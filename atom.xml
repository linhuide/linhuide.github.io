<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林汇德的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linhuide.github.io/"/>
  <updated>2020-04-01T09:32:28.016Z</updated>
  <id>https://linhuide.github.io/</id>
  
  <author>
    <name>Linhuide</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线程-2</title>
    <link href="https://linhuide.github.io/post/94189774.html"/>
    <id>https://linhuide.github.io/post/94189774.html</id>
    <published>2020-04-01T09:32:28.000Z</published>
    <updated>2020-04-01T09:32:28.016Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>线程-1</title>
    <link href="https://linhuide.github.io/post/d11c6ce.html"/>
    <id>https://linhuide.github.io/post/d11c6ce.html</id>
    <published>2020-03-31T16:56:09.000Z</published>
    <updated>2020-04-01T09:31:39.015Z</updated>
    
    <content type="html"><![CDATA[<p>​    线程的使用</p><a id="more"></a><h2 id="1-多线程理解"><a href="#1-多线程理解" class="headerlink" title="1.多线程理解"></a>1.多线程理解</h2><p>​    如果程序只有一条执行路径，那么该程序是单线程程序。如果该程序有多条执行路径，那么该程序是多线程程序。</p><p><img src="../images/%E7%BA%BF%E7%A8%8B/1.png" alt="1"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1:要想了解多线程，必须先了解线程，而要想了解线程，必须先了解进程，因为线程是依赖于进程而存在。</span><br><span class="line"></span><br><span class="line">2:什么是进程?</span><br><span class="line">   通过任务管理器我们就看到了进程的存在。</span><br><span class="line">   而通过观察，我们发现只有运行的程序才会出现进程。</span><br><span class="line">   进程：就是正在运行的程序。</span><br><span class="line">   进程是系统进行资源分配和调用的独立单位。每一个进程都有它自己的内存空间和系统资源。</span><br><span class="line">   </span><br><span class="line">3:多进程有什么意义呢?</span><br><span class="line">   单进程的计算机只能做一件事情，而我们现在的计算机都可以做多件事情。</span><br><span class="line">   举例：一边玩游戏(游戏进程)，一边听音乐(音乐进程)。</span><br><span class="line">   也就是说现在的计算机都是支持多进程的，可以在一个时间段内执行多个任务。</span><br><span class="line">   并且呢，可以提高CPU的使用率。</span><br><span class="line">   </span><br><span class="line">   问题：</span><br><span class="line">      一边玩游戏，一边听音乐是同时进行的吗?</span><br><span class="line">      不是。因为单CPU在某一个时间点上只能做一件事情。</span><br><span class="line">      而我们在玩游戏，或者听音乐的时候，是CPU在做着程序间的高效切换让我们觉得是同时进行的。</span><br><span class="line">      </span><br><span class="line">4:什么是线程呢?</span><br><span class="line">   在同一个进程内又可以执行多个任务，而这每一个任务我就可以看出是一个线程。</span><br><span class="line">   线程：是程序的执行单元，执行路径。是程序使用CPU的最基本单位。</span><br><span class="line">   单线程：如果程序只有一条执行路径。</span><br><span class="line">   多线程：如果程序有多条执行路径。</span><br><span class="line">   </span><br><span class="line">5:多线程有什么意义呢?</span><br><span class="line">   多线程的存在，不是提高程序的执行速度。其实是为了提高应用程序的使用率。</span><br><span class="line">   程序的执行其实都是在抢CPU的资源，CPU的执行权。</span><br><span class="line">   多个进程是在抢这个资源，而其中的某一个进程如果执行路径比较多，就会有更高的几率抢到CPU的执行权。</span><br><span class="line">   我们是不敢保证哪一个线程能够在哪个时刻抢到，所以线程的执行有随机性。</span><br><span class="line">   而多线程却给了我们一个错觉：让我们认为多个线程是并发执行的。其实不是。</span><br><span class="line">   因为多个线程共享同一个进程的资源(堆内存和方法区)，但是栈内存是独立的，一个线程一个栈。</span><br><span class="line">   所以他们仍然是在抢CPU的资源执行。一个时间点上只有能有一个线程执行。而且谁抢到，这个不一定，所以，造成了线程运行的随机性。</span><br><span class="line"></span><br><span class="line">6：那么什么又是并发呢？</span><br><span class="line">    大家注意两个词汇的区别：并行和并发。</span><br><span class="line">    前者是逻辑上同时发生，指在某一个时间内同时运行多个程序。</span><br><span class="line">    后者是物理上同时发生，指在某一个时间点同时运行多个程序。</span><br><span class="line">    那么，我们能不能实现真正意义上的并发呢，是可以的，多个CPU就可以实现，不过你得知道如何调度和控制它们。</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>进程：<ul><li>正在运行的程序，是系统进行资源分配和调用的独立单位。</li><li>每一个进程都有它自己的内存空间和系统资源。</li></ul></li><li>线程：<ul><li>是进程中的单个顺序控制流，是一条执行路径</li><li>一个进程如果只有一条执行路径，则称为单线程程序。</li><li>一个进程如果有多条执行路径，则称为多线程程序。</li></ul></li></ul><p>Java程序的运行原理：</p><p>​    由java命令启动JVM，JVM启动就相当于启动了一个进程。接着有该进程创建了一个主线程去调用main方法。</p><p>jvm虚拟机的启动是单线程的还是多线程的?</p><p>​    多线程的。</p><p>​    原因是垃圾回收线程也要先启动，否则很容易会出现内存溢出。现在的垃圾回收线程加上前面的主线程，最低启动了两个线程，所以，jvm的启动其实是多线程的。</p><h2 id="2-实现多线程的程序"><a href="#2-实现多线程的程序" class="headerlink" title="2.实现多线程的程序"></a>2.实现多线程的程序</h2><h3 id="2-1-如何实现呢"><a href="#2-1-如何实现呢" class="headerlink" title="2-1.如何实现呢?"></a>2-1.如何实现呢?</h3><p>​    由于线程是依赖进程而存在的，所以我们应该先创建一个进程出来。而进程是由系统创建的，所以我们应该去调用系统功能创建一个进程。Java是不能直接调用系统功能的，所以，我们没有办法直接实现多线程程序。Java可以去调用写好的程序来实现多线程程序。由JAVA去调用这样的东西，然后提供一些类供我们使用。我们就可以实现多线程程序了。</p><h3 id="2-2-那么Java提供的类是什么呢"><a href="#2-2-那么Java提供的类是什么呢" class="headerlink" title="2-2.那么Java提供的类是什么呢?"></a>2-2.那么Java提供的类是什么呢?</h3><p>​    Thread。通过查看API，我们知道了有2中方式实现多线程程序。</p><h4 id="方式1：继承Thread类。"><a href="#方式1：继承Thread类。" class="headerlink" title="方式1：继承Thread类。"></a>方式1：继承Thread类。</h4><p>步骤：</p><ul><li>A:自定义类MyThread继承Thread类。</li><li>B:MyThread类里面重写run()</li><li>C:创建对象</li><li>D:启动线程</li></ul><p><strong>问题1：该类要重写run()方法,为什么呢?</strong></p><p>​    不是类中的所有代码都需要被线程执行的。而这个时候，为了区分哪些代码能够被线程执行，java提供了Thread类中的run()用来包含那些被线程执行的代码。</p><p><strong>问题2：调用run()方法为什么是单线程的呢?</strong></p><p>​     因为run()方法直接调用其实就相当于普通的方法调用,所以你看到的是单线程的效果要想看到多线程的效果，就必须说说另一个方法：start()。</p><p> <strong>面试题：run()和start()的区别?</strong></p><ul><li>run():仅仅是封装被线程执行的代码，直接调用是普通方法</li><li>start():首先启动了线程，然后再由jvm去调用该线程的run()方法。</li></ul><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 一般来说，被线程执行的代码肯定是比较耗时的。所以我们用循环改进</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">200</span>; x++) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line">MyThread my = <span class="keyword">new</span> MyThread();</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">my.run();</span><br><span class="line">my.run();</span><br><span class="line"><span class="comment">// MyThread my = new MyThread();</span></span><br><span class="line"><span class="comment">// my.start();</span></span><br><span class="line"><span class="comment">// IllegalThreadStateException:非法的线程状态异常</span></span><br><span class="line"><span class="comment">// 为什么呢?</span></span><br><span class="line">        <span class="comment">//因为这个相当于是my线程被调用了两次。而不是两个线程启动。</span></span><br><span class="line"><span class="comment">// my.start();</span></span><br><span class="line"><span class="comment">// 创建两个线程对象</span></span><br><span class="line">MyThread my1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">MyThread my2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">my1.start();</span><br><span class="line">my2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式2：实现Runnable接口"><a href="#方式2：实现Runnable接口" class="headerlink" title="方式2：实现Runnable接口"></a>方式2：实现Runnable接口</h4><p>步骤：</p><ul><li>自定义类MyRunnable实现Runnable接口</li><li>重写run()方法</li><li>创建MyRunnable类的对象</li><li>创建Thread类的对象，并把C步骤的对象作为构造参数传递</li></ul><p>实现接口方式的好处：</p><ul><li>可以避免由于Java单继承带来的局限性。</li><li>适合多个相同程序的代码去处理同一个资源的情况，把线程同程序的代码，数据有效分离，较好的体现了面向对象的设计思想。</li></ul><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line"><span class="comment">// 由于实现接口的方式就不能直接使用Thread类的方法了,但是可以间接的使用</span></span><br><span class="line"><span class="comment">// getName()不能直接用</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnableDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建MyRunnable类的对象</span></span><br><span class="line">MyRunnable my = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"><span class="comment">// 创建Thread类的对象，并把C步骤的对象作为构造参数传递</span></span><br><span class="line"><span class="comment">// Thread(Runnable target)</span></span><br><span class="line"><span class="comment">// Thread t1 = new Thread(my);</span></span><br><span class="line"><span class="comment">// Thread t2 = new Thread(my);</span></span><br><span class="line"><span class="comment">// t1.setName("t1");</span></span><br><span class="line"><span class="comment">// t2.setName("t2");</span></span><br><span class="line">        <span class="comment">// 方法使用</span></span><br><span class="line"><span class="comment">// Thread(Runnable target, String name)</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(my, <span class="string">"t1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(my, <span class="string">"t2"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/%E7%BA%BF%E7%A8%8B/3.png" alt="3"></p><h3 id="线程名称"><a href="#线程名称" class="headerlink" title="线程名称"></a>线程名称</h3><ul><li>如何获取线程对象的名称呢?<ul><li>public final String getName()    获取线程的名称。</li></ul></li><li>如何设置线程对象的名称呢?<ul><li>public final void setName(String name)    设置线程的名称</li></ul></li></ul><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">":"</span> + x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line"><span class="comment">//无参构造+setXxx()</span></span><br><span class="line">MyThread my1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">MyThread my2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"><span class="comment">//调用方法设置名称</span></span><br><span class="line">my1.setName(<span class="string">"林青霞"</span>);</span><br><span class="line">my2.setName(<span class="string">"刘意"</span>);</span><br><span class="line">my1.start();</span><br><span class="line">my2.start();</span><br><span class="line">        <span class="comment">//不用setName，会得到Thread-0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//名称为什么是：Thread-? 编号。调用Thread的init方法设置的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Thread &#123;</span></span><br><span class="line"><span class="comment">private char name[];</span></span><br><span class="line"><span class="comment">//名字</span></span><br><span class="line"><span class="comment">public Thread() &#123;</span></span><br><span class="line"><span class="comment">        init(null, null, "Thread-" + nextThreadNum(), 0);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">class MyThread extends Thread &#123;</span></span><br><span class="line"><span class="comment">public MyThread() &#123;</span></span><br><span class="line"><span class="comment">super();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>方式二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一定要</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一定要</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">":"</span> + x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">带参构造方法给线程起名字</span><br><span class="line">MyThread my1 = <span class="keyword">new</span> MyThread(<span class="string">"林青霞"</span>);</span><br><span class="line">MyThread my2 = <span class="keyword">new</span> MyThread(<span class="string">"刘意"</span>);</span><br><span class="line">my1.start();</span><br><span class="line">my2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题1：针对不是Thread类的子类中如何获取线程对象名称呢?</strong></p><ul><li>public static Thread currentThread()    返回当前正在执行的线程对象</li><li>Thread.currentThread().getName()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Thread.currentThread().getName());</span><br></pre></td></tr></table></figure><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><p>​    假如我们的计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到 CPU时间片，也就是使用权，才可以执行指令。那么Java是如何对线程进行调用的呢？</p><p>线程有两种调度模型：</p><ul><li>分时调度模型   所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片</li><li>抢占式调度模型   优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些。 </li><li>Java使用的是抢占式调度模型。</li></ul><p><strong>如何设置和获取线程优先级？</strong></p><p>线程没有设置优先级,肯定有默认优先级。线程默认优先级是5。</p><p><strong>获取线程对象的优先级：</strong></p><ul><li>public final int getPriority():返回线程对象的优先级</li></ul><p><strong>设置线程对象的优先级：</strong></p><ul><li>public final void setPriority(int newPriority)：更改线程的优先级。 </li></ul><p><strong>注意：</strong></p><p>​    线程优先级的范围是：1-10。</p><p>​    线程优先级高仅仅表示线程获取的 CPU时间片的几率高，但是要在次数比较多，或者多次运行的时候才能看到比较好的效果。因为，线程有随机性。</p><p>​    IllegalArgumentException    非法参数异常。</p><p>​    抛出的异常表明向方法传递了一个不合法或不正确的参数。 </p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPriorityDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ThreadPriority tp1 = <span class="keyword">new</span> ThreadPriority();</span><br><span class="line">ThreadPriority tp2 = <span class="keyword">new</span> ThreadPriority();</span><br><span class="line">ThreadPriority tp3 = <span class="keyword">new</span> ThreadPriority();</span><br><span class="line">tp1.setName(<span class="string">"tp1"</span>);</span><br><span class="line">tp2.setName(<span class="string">"tp2"</span>);</span><br><span class="line">tp3.setName(<span class="string">"tp3"</span>);</span><br><span class="line"><span class="comment">// 获取默认优先级</span></span><br><span class="line">System.out.println(tp1.getPriority());</span><br><span class="line">System.out.println(tp2.getPriority());</span><br><span class="line">System.out.println(tp3.getPriority());</span><br><span class="line"><span class="comment">// 设置线程优先级</span></span><br><span class="line"><span class="comment">// tp1.setPriority(100000);</span></span><br><span class="line"><span class="comment">//出异常，优先级太大</span></span><br><span class="line"><span class="comment">//设置正确的线程优先级</span></span><br><span class="line">tp1.setPriority(<span class="number">10</span>);</span><br><span class="line">tp2.setPriority(<span class="number">1</span>);</span><br><span class="line">tp1.start();</span><br><span class="line">tp2.start();</span><br><span class="line">tp3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程控制-睡眠"><a href="#线程控制-睡眠" class="headerlink" title="线程控制-睡眠"></a>线程控制-睡眠</h3><p>​    public static void sleep(long millis)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSleep</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">":"</span> + x + <span class="string">",日期："</span> + <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">//休息1秒钟</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSleepDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ThreadSleep ts1 = <span class="keyword">new</span> ThreadSleep();</span><br><span class="line">ThreadSleep ts2 = <span class="keyword">new</span> ThreadSleep();</span><br><span class="line">ThreadSleep ts3 = <span class="keyword">new</span> ThreadSleep();</span><br><span class="line">ts1.setName(<span class="string">"ts1"</span>);</span><br><span class="line">ts2.setName(<span class="string">"ts2"</span>);</span><br><span class="line">ts3.setName(<span class="string">"ts3"</span>);</span><br><span class="line">ts1.start();</span><br><span class="line">ts2.start();</span><br><span class="line">ts3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程控制-加入"><a href="#线程控制-加入" class="headerlink" title="线程控制-加入"></a>线程控制-加入</h3><p>​    public final void join():等待该线程终止。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadJoin为普通继承Thread</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadJoinDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ThreadJoin tj1 = <span class="keyword">new</span> ThreadJoin();</span><br><span class="line">ThreadJoin tj2 = <span class="keyword">new</span> ThreadJoin();</span><br><span class="line">ThreadJoin tj3 = <span class="keyword">new</span> ThreadJoin();</span><br><span class="line">tj1.setName(<span class="string">"tj1"</span>);</span><br><span class="line">tj2.setName(<span class="string">"tj2"</span>);</span><br><span class="line">tj3.setName(<span class="string">"tj3"</span>);</span><br><span class="line">        <span class="comment">//直到tj1结束，tj2，tj3才开始</span></span><br><span class="line">tj1.start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">tj1.join();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">tj2.start();</span><br><span class="line">tj3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程控制-礼让"><a href="#线程控制-礼让" class="headerlink" title="线程控制-礼让"></a>线程控制-礼让</h3><p>​    public static void yield()</p><p>​    暂停当前正在执行的线程对象，并执行其他线程。 让多个线程的执行更和谐，但是不能靠它保证一人一次。（后面会完善用法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadYield</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">":"</span> + x);</span><br><span class="line">Thread.yield();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadYieldDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ThreadYield ty1 = <span class="keyword">new</span> ThreadYield();</span><br><span class="line">ThreadYield ty2 = <span class="keyword">new</span> ThreadYield();</span><br><span class="line">ty1.setName(<span class="string">"ty1"</span>);</span><br><span class="line">ty2.setName(<span class="string">"ty2"</span>);</span><br><span class="line">ty1.start();</span><br><span class="line">ty2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程控制-后台线程"><a href="#线程控制-后台线程" class="headerlink" title="线程控制-后台线程"></a>线程控制-后台线程</h3><p>​    public final void setDaemon(boolean on)</p><p>​    将该线程标记为守护线程或用户线程。当正在运行的线程都是守护线程时，Java 虚拟机退出。 该方法必须在启动线程前调用。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ThreadDaemon为普通继承Thread</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDaemonDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ThreadDaemon td1 = <span class="keyword">new</span> ThreadDaemon();</span><br><span class="line">ThreadDaemon td2 = <span class="keyword">new</span> ThreadDaemon();</span><br><span class="line">td1.setName(<span class="string">"td1"</span>);</span><br><span class="line">td2.setName(<span class="string">"td2"</span>);</span><br><span class="line"><span class="comment">// 设置收获线程</span></span><br><span class="line">td1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">td2.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">td1.start();</span><br><span class="line">td2.start();</span><br><span class="line">        <span class="comment">//当main线程结束，td1和td2线程也会结束，但会相应走一段，结束，但没那么快</span></span><br><span class="line">Thread.currentThread().setName(<span class="string">"main"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">5</span>; x++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程控制-中断线程"><a href="#线程控制-中断线程" class="headerlink" title="线程控制-中断线程"></a>线程控制-中断线程</h3><ul><li><p>public final void stop()</p><ul><li>让线程停止，过时了，但是还可以使用。</li></ul></li><li><p>public void interrupt()</p><ul><li>中断线程，方法：把线程的状态终止，并抛出一个InterruptedException。</li><li>接着代码走，抛出的异常和剩下的代码</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStop</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始执行："</span> + <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 休息10秒钟</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// e.printStackTrace();</span></span><br><span class="line">System.out.println(<span class="string">"线程被终止了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"结束执行："</span> + <span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStopDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ThreadStop ts = <span class="keyword">new</span> ThreadStop();</span><br><span class="line">ts.start();</span><br><span class="line"><span class="comment">// 超过三秒不醒过来，终止</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="comment">//过时</span></span><br><span class="line"><span class="comment">// ts.stop();</span></span><br><span class="line">ts.interrupt();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><ul><li>新建：创建线程对象</li><li>就绪：有执行资格，没有执行权</li><li>运行：有执行资格，有执行权</li><li>阻塞：由于一些操作让线程处于该状态。没有执行状态，没有执行权，而另一些操作却可以把它给激活，激活后处于就绪状态</li><li>死亡：线程对象变成垃圾，等待被回收</li></ul><p><img src="../images/%E7%BA%BF%E7%A8%8B/2.png" alt="2"></p><h2 id="3-线程练习"><a href="#3-线程练习" class="headerlink" title="3.线程练习"></a>3.线程练习</h2><p>​    某电影院目前正在上映贺岁大片，共有100张票，而它有3个售票窗口售票，请设计一个程序模拟该电影院售票。</p><p><strong>两种方式实现：</strong></p><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义100张票</span></span><br><span class="line"><span class="comment">// private int tickets = 100;</span></span><br><span class="line"><span class="comment">// 为了让多个线程对象共享这100张票，用静态修饰</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 每个线程进来都会走这里，这样的话，每个线程对象相当于买的是自己的那100张票，这不合理，所以应该定义到外面</span></span><br><span class="line"><span class="comment">// int tickets = 100;</span></span><br><span class="line"><span class="comment">// 是为了模拟一直有票</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(getName() + <span class="string">"正在出售第"</span> + (tickets--) + <span class="string">"张票"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建三个线程对象</span></span><br><span class="line">SellTicket st1 = <span class="keyword">new</span> SellTicket();</span><br><span class="line">SellTicket st2 = <span class="keyword">new</span> SellTicket();</span><br><span class="line">SellTicket st3 = <span class="keyword">new</span> SellTicket();</span><br><span class="line"><span class="comment">// 给线程对象起名字</span></span><br><span class="line">st1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">st2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">st3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">st1.start();</span><br><span class="line">st2.start();</span><br><span class="line">st3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    会有错误，后面修订</p><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义100张票</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"正在出售第"</span></span><br><span class="line">+ (tickets--) + <span class="string">"张票"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建资源对象</span></span><br><span class="line">SellTicket st = <span class="keyword">new</span> SellTicket();</span><br><span class="line"><span class="comment">// 创建三个线程对象</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(st, <span class="string">"窗口1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(st, <span class="string">"窗口2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(st, <span class="string">"窗口3"</span>);</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    相比较之下，Runnable接口的方式产生错误会比继承Thread少，但还是会有，后面修订</p><h3 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h3><p>​    电影院售票程序，从表面上看不出什么问题，但是在真实生活中，售票时网络是不能实时传输的，总是存在延迟的情况，所以，在出售一张票以后，需要一点时间的延迟</p><p>​    接口方式的卖票程序：每次卖票延迟100毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义100张票</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//问题-1：相同的票卖了多次</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">// t1,t2,t3三个线程</span></span><br><span class="line"><span class="comment">// 这一次的tickets = 100;</span></span><br><span class="line"><span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 模拟真实的场景，稍作休息</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>); <span class="comment">// t1就稍作休息,t2就稍作休息</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"正在出售第"</span></span><br><span class="line">+ (tickets--) + <span class="string">"张票"</span>);</span><br><span class="line"><span class="comment">// 理想状态：</span></span><br><span class="line"><span class="comment">// 窗口1正在出售第100张票</span></span><br><span class="line"><span class="comment">// 窗口2正在出售第99张票</span></span><br><span class="line"><span class="comment">// 但是呢?</span></span><br><span class="line"><span class="comment">// CPU的每一次执行必须是一个原子性(最简单基本的)的操作。</span></span><br><span class="line"><span class="comment">// 先记录以前的值</span></span><br><span class="line"><span class="comment">// 接着把ticket--</span></span><br><span class="line"><span class="comment">// 然后输出以前的值(t2来了)</span></span><br><span class="line"><span class="comment">// ticket的值就变成了99</span></span><br><span class="line"><span class="comment">// 窗口1正在出售第100张票</span></span><br><span class="line"><span class="comment">// 窗口2正在出售第100张票</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//问题-2：出现了负数票</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">// t1,t2,t3三个线程</span></span><br><span class="line"><span class="comment">// 这一次的tickets = 1;</span></span><br><span class="line"><span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 为了模拟更真实的场景，我们稍作休息</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>); <span class="comment">//t1进来了并休息，t2进来了并休息，t3进来了并休息，</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"正在出售第"</span></span><br><span class="line">+ (tickets--) + <span class="string">"张票"</span>);</span><br><span class="line"><span class="comment">//窗口1正在出售第1张票,tickets=0</span></span><br><span class="line"><span class="comment">//窗口2正在出售第0张票,tickets=-1</span></span><br><span class="line"><span class="comment">//窗口3正在出售第-1张票,tickets=-2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建资源对象</span></span><br><span class="line">SellTicket st = <span class="keyword">new</span> SellTicket();</span><br><span class="line"><span class="comment">// 创建三个线程对象</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(st, <span class="string">"窗口1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(st, <span class="string">"窗口2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(st, <span class="string">"窗口3"</span>);</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过加入延迟后，就产生了两个问题："><a href="#通过加入延迟后，就产生了两个问题：" class="headerlink" title="通过加入延迟后，就产生了两个问题："></a>通过加入延迟后，就产生了两个问题：</h4><ul><li>A:相同的票卖了多次<ul><li>CPU的一次操作必须是原子性的</li></ul></li><li>B:出现了负数票<ul><li>随机性和延迟导致的</li></ul></li></ul><p>线程安全问题在理想状态下，不容易出现，但一旦出现对软件的影响是非常大的</p><p>​    要想解决问题，就要知道哪些原因会导致出问题:(而且这些原因也是以后我们判断一个程序是否会有线程安全问题的标准)</p><ol><li>是否是多线程环境</li><li>是否有共享数据</li><li>是否有多条语句操作共享数据</li></ol><p><strong>解决思想：</strong></p><p>​    把多条语句操作共享数据的代码给包成一个整体，让某个线程在执行的时候，别人不能来执行。Java给我们提供了：同步机制。</p><h4 id="同步代码块："><a href="#同步代码块：" class="headerlink" title="同步代码块："></a>同步代码块：</h4><p>​     synchronized(对象){<br>​        需要同步的代码;<br>​     }</p><h4 id="需要同步的代码是哪些呢"><a href="#需要同步的代码是哪些呢" class="headerlink" title="需要同步的代码是哪些呢?"></a>需要同步的代码是哪些呢?</h4><p>​        把多条语句操作共享数据的代码的部分给包起来</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>同步可以解决安全问题的根本原因就在那个对象上。该对象如同锁的功能。</li><li>多个线程必须是同一把锁。</li></ul><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 定义100张票</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 定义同一把锁</span></span><br><span class="line"><span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">// t1,t2,t3都能走到这里</span></span><br><span class="line"><span class="comment">// 假设t1抢到CPU的执行权，t1就要进来</span></span><br><span class="line"><span class="comment">// 假设t2抢到CPU的执行权，t2就要进来,发现门是关着的，进不去。所以就等着。</span></span><br><span class="line"><span class="comment">// 门(开,关)</span></span><br><span class="line"><span class="keyword">synchronized</span> (obj) &#123; <span class="comment">// 发现这里的代码将来是会被锁上的，所以t1进来后，就锁了。(关)</span></span><br><span class="line"><span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>); <span class="comment">// t1就睡眠了</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">"正在出售第"</span> + (tickets--) + <span class="string">"张票 "</span>);</span><br><span class="line"><span class="comment">//窗口1正在出售第100张票</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">//t1就出来可，然后就开门。(开)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建资源对象</span></span><br><span class="line">SellTicket st = <span class="keyword">new</span> SellTicket();</span><br><span class="line"><span class="comment">// 创建三个线程对象</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(st, <span class="string">"窗口1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(st, <span class="string">"窗口2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(st, <span class="string">"窗口3"</span>);</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-同步"><a href="#4-同步" class="headerlink" title="4.同步"></a>4.同步</h2><p>同步的特点：</p><ul><li>前提：多个线程</li><li>解决问题的时候要注意：多个线程使用的是同一个锁对象</li><li>同步的好处 ：同步的出现解决了多线程的安全问题。</li><li>同步的弊端： 当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率。</li></ul><h3 id="同步的各种问题"><a href="#同步的各种问题" class="headerlink" title="同步的各种问题"></a>同步的各种问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="comment">//同步代码块用obj做锁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()</span><br><span class="line">                                   + <span class="string">"正在出售第"</span> + (tickets--) + <span class="string">"张票 "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同步代码块的锁对象是：任意对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line"><span class="comment">//同步代码块用任意对象做锁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()</span><br><span class="line">                                   + <span class="string">"正在出售第"</span> + (tickets--) + <span class="string">"张票 "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>同步方法的格式及锁对象：把同步关键字加在方法上。</p></li><li><p>同步方法是：this</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                                       + <span class="string">"正在出售第"</span> + (tickets--) + <span class="string">"张票 "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            sellTicket();</span><br><span class="line">        &#125;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sellTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()</span><br><span class="line">                           + <span class="string">"正在出售第"</span> + (tickets--) + <span class="string">"张票 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态方法及锁对象是：类的字节码文件对象。(反射)（要比静态先存在，class文件）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SellTicket<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                                       + <span class="string">"正在出售第"</span> + (tickets--) + <span class="string">"张票 "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            sellTicket();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sellTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()</span><br><span class="line">                           + <span class="string">"正在出售第"</span> + (tickets--) + <span class="string">"张票 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果锁对象是this，就可以考虑使用同步方法。否则能使用同步代码块的尽量使用同步代码块</p><h2 id="5-以前的线程安全的类"><a href="#5-以前的线程安全的类" class="headerlink" title="5.以前的线程安全的类"></a>5.以前的线程安全的类</h2><p>线程安全：StringBuffer、Vector、Hashtable<br>如何把一个线程不安全的集合类变成一个线程安全的集合类？<br>用Collections工具类的方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 线程安全的类</span></span><br><span class="line">      <span class="comment">// 里面有些方法加synchronized</span></span><br><span class="line">      StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">      Vector&lt;String&gt; v = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">      Hashtable&lt;String, String&gt; h = <span class="keyword">new</span> Hashtable&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Vector是线程安全的时候才去考虑使用的，但是我还说过即使要安全，我也不用你</span></span><br><span class="line">      <span class="comment">// 那么到底用谁呢?</span></span><br><span class="line">      <span class="comment">// public static &lt;T&gt; List&lt;T&gt; synchronizedList(List&lt;T&gt; list)</span></span><br><span class="line">      List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">// 线程不安全</span></span><br><span class="line">      List&lt;String&gt; list2 = Collections</span><br><span class="line">            .synchronizedList(<span class="keyword">new</span> ArrayList&lt;String&gt;()); <span class="comment">// 线程安全</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    线程的使用&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://linhuide.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>做过项目展示</title>
    <link href="https://linhuide.github.io/post/d9dde34b.html"/>
    <id>https://linhuide.github.io/post/d9dde34b.html</id>
    <published>2020-03-31T16:47:52.000Z</published>
    <updated>2020-03-31T16:55:19.025Z</updated>
    
    <content type="html"><![CDATA[<p>做过的项目</p><a id="more"></a><p><a href="https://linhuide.github.io/Sprintboot-BiShe/" title="毕业项目">毕业项目</a></p><p><a href="https://linhuide.github.io/SSM-JAVAEE/">JaveEE课程设计</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做过的项目&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java8新特性</title>
    <link href="https://linhuide.github.io/post/f41870e2.html"/>
    <id>https://linhuide.github.io/post/f41870e2.html</id>
    <published>2020-03-25T16:24:59.000Z</published>
    <updated>2020-03-31T16:33:01.772Z</updated>
    
    <content type="html"><![CDATA[<p>​    关于java8的新特性</p><a id="more"></a><ul><li>速度更快<ul><li>修改底层数据结构：HashMap（数组-链表-红黑数），HashSet，ConcurrentHashMap（CAS算法）</li><li>修改垃圾回收机制（内存结构）：取消堆中的永久区（PremGen）-&gt;回收条件苛刻，使用元空间（MetaSpace）-&gt;直接使用物理内存-&gt;加载类文件</li></ul></li></ul><p>底层数据结构：最核心HashMap：</p><p>​    HashMap如果不用哈希算法，用equals，效率极低。对比HashCode，没有直接进来。相同，通过equals内容比较不同，形成链表，后加的放前边，称为碰撞，但碰撞应该避免，因为链表元素过多，效率低。</p><p>​    equals和HashCode重写方法严谨一点，但还是避免不了，因为数组的索引值就几个。方法，提供加载因子，默认0,75，当元素到达哈希表的75%，进行扩容。把链表里面的元素进行重排序，新位置，碰撞概率变低。</p><p>​    但极端情况，查找元素，查找到链表，查找到最后一个，查找效率变低。<br><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/1.png" alt="1"></p><p>​    所以jdk1.8后，数组+链表+红黑数（二叉树一种）</p><p>​    链表元素长度（个数）大于8，容量大于64，转换为红黑树。</p><p>​    链表转为红黑树后，除了添加以外，其他的效率都高了。添加，链表直接在后面添加，在红黑树要比较大小后才添加。</p><p>​    扩容以后，换位置不用重新计算，在原来哈希表的总长度+当前的位置，原来5，+3，在第8个位置。</p><p>​    HashSet变了，ConcurrenHashMap变了，改为CAS算法（无锁算法）</p><p>底层数据结构：内存</p><p>​    永久区没有了，JVM调优，PremGenSize，MaxPremGenSize没有了。取而代之，MetaspaceSize，MaxMetaSpaceSize。</p><ul><li>代码更少（增加了新的语法 Lambda  表达式）</li><li>强大的 Stream API</li><li>便于并行</li><li>最大化减少空指针异常 Optional</li></ul><h2 id="1-Lambda-表达式"><a href="#1-Lambda-表达式" class="headerlink" title="1.Lambda 表达式"></a>1.Lambda 表达式</h2><p>​    Lambda 是一个 匿名函数，我们可以把 Lambda表达式理解为是 一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p><h3 id="1-1-从匿名类到Lambda的转换："><a href="#1-1-从匿名类到Lambda的转换：" class="headerlink" title="1-1.从匿名类到Lambda的转换："></a>1-1.从匿名类到Lambda的转换：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原来的匿名内部类</span></span><br><span class="line">Runnable ri=<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sss"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//现在的 Lambda 表达式</span></span><br><span class="line">Runnable ri=()-&gt;System.out.println(<span class="string">"sss"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//原来的匿名内部类作为参数传递</span></span><br><span class="line">TreeSet&lt;String&gt; ts2 = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.compare(o1.length(), o2.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//现在的 Lambda 表达式作为参数传递</span></span><br><span class="line">TreeSet&lt;String&gt; ts2 = <span class="keyword">new</span> TreeSet&lt;&gt;((o1,o2) -&gt; Integer.compare(o1.length(), o2.length());</span><br></pre></td></tr></table></figure><p><strong>代码例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原来的匿名内部类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">Comparator&lt;String&gt; com = <span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.compare(o1.length(), o2.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">TreeSet&lt;String&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;(com);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在的 Lambda 表达式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Comparator&lt;String&gt; com = (x, y) -&gt; Integer.compare(x.length(), y.length());</span><br><span class="line">TreeSet&lt;String&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;(com);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-具体例子："><a href="#1-2-具体例子：" class="headerlink" title="1-2.具体例子："></a>1-2.具体例子：</h3><p>一个实体类，接口，两个实现类，优化方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyPredicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="comment">//年龄小于 35</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterEmployeeForAge</span> <span class="keyword">implements</span> <span class="title">MyPredicate</span>&lt;<span class="title">Employee</span>&gt;</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Employee t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> t.getAge() &lt;= <span class="number">35</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工资大于 5000</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterEmployeeForSalary</span> <span class="keyword">implements</span> <span class="title">MyPredicate</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Employee t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> t.getSalary() &gt;= <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组转集合，输入数据</span></span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">9999.99</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">102</span>, <span class="string">"李四"</span>, <span class="number">59</span>, <span class="number">6666.66</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">103</span>, <span class="string">"王五"</span>, <span class="number">28</span>, <span class="number">3333.33</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">105</span>, <span class="string">"田七"</span>, <span class="number">38</span>, <span class="number">5555.55</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//需求：获取公司中年龄小于 35 的员工信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployeeAge</span><span class="params">(List&lt;Employee&gt; emps)</span></span>&#123;</span><br><span class="line">List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Employee emp : emps) &#123;</span><br><span class="line"><span class="keyword">if</span>(emp.getAge() &lt;= <span class="number">35</span>)&#123;</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;Employee&gt; list = filterEmployeeAge(emps);</span><br><span class="line"><span class="keyword">for</span> (Employee employee : list) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果又多出一个需求</span></span><br><span class="line"><span class="comment">//需求：获取公司中工资大于 5000 的员工信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployeeSalary</span><span class="params">(List&lt;Employee&gt; emps)</span></span>&#123;</span><br><span class="line">List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Employee emp : emps) &#123;</span><br><span class="line"><span class="keyword">if</span>(emp.getSalary() &gt;= <span class="number">5000</span>)&#123;</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//又要写多一个方法，所以要优化</span></span><br></pre></td></tr></table></figure><p><strong>优化方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优化方式一：策略设计模式，使用接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployee</span><span class="params">(List&lt;Employee&gt; emps, MyPredicate&lt;Employee&gt; mp)</span></span>&#123;</span><br><span class="line">List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Employee employee : emps) &#123;</span><br><span class="line"><span class="keyword">if</span>(mp.test(employee))&#123;</span><br><span class="line">list.add(employee);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//需求1，年龄小于 35</span></span><br><span class="line">List&lt;Employee&gt; list = filterEmployee(emps, <span class="keyword">new</span> FilterEmployeeForAge());</span><br><span class="line"><span class="keyword">for</span> (Employee employee : list) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"------------------------------------------"</span>);</span><br><span class="line">    <span class="comment">//需求2，工资大于 5000</span></span><br><span class="line">List&lt;Employee&gt; list2 = filterEmployee(emps, <span class="keyword">new</span> FilterEmployeeForSalary());</span><br><span class="line"><span class="keyword">for</span> (Employee employee : list2) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优化方式二：匿名内部类，也是使用接口</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//需求1，年龄小于 35</span></span><br><span class="line">List&lt;Employee&gt; list = filterEmployee(emps, <span class="keyword">new</span> MyPredicate&lt;Employee&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Employee t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> t.getAge() &lt;= <span class="number">35</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (Employee employee : list) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优化方式三：Lambda 表达式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//需求1，年龄小于 35</span></span><br><span class="line">List&lt;Employee&gt; list = filterEmployee(emps, (e) -&gt; e.getAge() &lt;= <span class="number">35</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"------------------------------------------"</span>);</span><br><span class="line">    <span class="comment">//需求2，工资大于5000</span></span><br><span class="line">List&lt;Employee&gt; list2 = filterEmployee(emps, (e) -&gt; e.getSalary() &gt;= <span class="number">5000</span>);</span><br><span class="line">list2.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优化方式四：Stream API，什么都不用，只要有数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//需求1，年龄小于 35</span></span><br><span class="line">emps.stream()</span><br><span class="line">.filter((e) -&gt; e.getAge() &lt;= <span class="number">35</span>)</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">    <span class="comment">//需求2，取出名字，排序sorted，limit前3个</span></span><br><span class="line">emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.limit(<span class="number">3</span>)</span><br><span class="line">.sorted()</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-Lambda表达式的基础介绍"><a href="#1-3-Lambda表达式的基础介绍" class="headerlink" title="1-3.Lambda表达式的基础介绍"></a>1-3.Lambda表达式的基础介绍</h3><p>​    Java8中引入了一个新的操作符 “-&gt;” 该操作符称为箭头操作符或 Lambda 操作符。箭头操作符将 Lambda 表达式拆分成两部分：</p><ul><li>左侧：Lambda 表达式的参数列表（接口中抽象方法）</li><li>右侧：Lambda 表达式中所需执行的功能， 即 Lambda体。（接口中抽象方法的实现）</li></ul><h3 id="1-4-基础语法"><a href="#1-4-基础语法" class="headerlink" title="1.4.基础语法"></a>1.4.基础语法</h3><ul><li>语法格式一：无参数，无返回值<ul><li>() -&gt; System.out.println(“Hello Lambda!”);</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//局部内部类中用了同级别的局部变量时，jdk 1.7 前，必须是 final</span></span><br><span class="line">Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span> + num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">r.run();</span><br><span class="line">System.out.println(<span class="string">"-------------------------------"</span>);</span><br><span class="line">    </span><br><span class="line">Runnable r1 = () -&gt; System.out.println(<span class="string">"Hello Lambda!"</span>+num);</span><br><span class="line">r1.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>语法格式二：有一个参数，并且无返回值<ul><li>(x) -&gt; System.out.println(x)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; con = x -&gt; System.out.println(x);</span><br><span class="line">    con.accept(<span class="string">"是是是"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>语法格式三：若只有一个参数，小括号可以省略不写<ul><li>x -&gt; System.out.println(x)</li></ul></li></ul><ul><li>语法格式四：有两个以上的参数，有返回值，并且 Lambda 体中有多条语句<ul><li>Comparator<Integer> com = (x, y) -&gt; {System.out.println(“函数式接口”);</Integer></li><li>return Integer.compare(x, y);</li><li>};</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">Comparator&lt;Integer&gt; com = (x, y) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"函数式接口"</span>);</span><br><span class="line"><span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>语法格式五：若 Lambda 体中只有一条语句， return 和 大括号都可以省略不写<ul><li>Comparator<Integer> com = (x, y) -&gt; Integer.compare(x, y);</Integer></li></ul></li></ul><ul><li>语法格式六：Lambda 表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即“类型推断” <ul><li>(Integer x, Integer y) -&gt; Integer.compare(x, y);</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//类型推断</span></span><br><span class="line">    Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//类型推断</span></span><br><span class="line">    String[] strs = &#123;<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>&#125;;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    show(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>左右遇一括号省</li><li>左侧推断类型省</li><li>能省则省</li></ul><h2 id="2-Lambda-表达式需要“函数式接口”的支持"><a href="#2-Lambda-表达式需要“函数式接口”的支持" class="headerlink" title="2.Lambda 表达式需要“函数式接口”的支持"></a>2.Lambda 表达式需要“函数式接口”的支持</h2><ul><li>函数式接口：接口中只有一个抽象方法的接口，称为函数式接口。</li><li>可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda表达式抛出一个受检异常，那么该异常需要在目标接口的抽象方法上进行声明）。</li><li>可以使用注解 @FunctionalInterface 修饰，可以检查它是否是一个函数式接口，同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数式接口中使用泛型</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFun</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    为了将  Lambda  表达式作为参数传递，接收 Lambda 该 表达式的参数类型必须是与该  Lambda  表达式兼容的函数式接口的类型。</p><p><strong>代码：</strong></p><p>接口，需求实现方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只能一个抽象方法，多余一个，报错</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFun</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">(Integer num)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需求：对一个数进行运算</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//对x进行平方</span></span><br><span class="line">    Integer num = operation(<span class="number">100</span>, (x) -&gt; x * x);</span><br><span class="line">    System.out.println(num);</span><br><span class="line"><span class="comment">//对y进行加200操作</span></span><br><span class="line">    System.out.println(operation(<span class="number">200</span>, (y) -&gt; y + <span class="number">200</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法，调用接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">operation</span><span class="params">(Integer num, MyFun mf)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mf.getValue(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做习题：</p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/2.png" alt="2"></p><p>1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据添加</span></span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">9999.99</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">102</span>, <span class="string">"李四"</span>, <span class="number">59</span>, <span class="number">6666.66</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">103</span>, <span class="string">"王五"</span>, <span class="number">28</span>, <span class="number">3333.33</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">105</span>, <span class="string">"田七"</span>, <span class="number">38</span>, <span class="number">5555.55</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//方法，排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Collections.sort(emps, (e1, e2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(e1.getAge() == e2.getAge())&#123;</span><br><span class="line">            <span class="keyword">return</span> e1.getName().compareTo(e2.getName());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -Integer.compare(e1.getAge(), e2.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (Employee emp : emps) &#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunction</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//去除空格</span></span><br><span class="line">    String trimStr = strHandler(<span class="string">"\t\t\t 啊啊啊   "</span>, (str) -&gt; str.trim());</span><br><span class="line">    System.out.println(trimStr);</span><br><span class="line">    <span class="comment">//转换大写</span></span><br><span class="line">    String upper = strHandler(<span class="string">"abcdef"</span>, (str) -&gt; str.toUpperCase());</span><br><span class="line">    System.out.println(upper);</span><br><span class="line">    <span class="comment">//截取字符</span></span><br><span class="line">    String newStr = strHandler(<span class="string">"啊啊啊"</span>, (str) -&gt; str.substring(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">    System.out.println(newStr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需求：用于处理字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">strHandler</span><span class="params">(String str, MyFunction mf)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mf.getValue(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunction2</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getValue</span><span class="params">(T t1, T t2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//相加</span></span><br><span class="line">    op(<span class="number">100L</span>, <span class="number">200L</span>, (x, y) -&gt; x + y);</span><br><span class="line">    <span class="comment">//相乘</span></span><br><span class="line">    op(<span class="number">100L</span>, <span class="number">200L</span>, (x, y) -&gt; x * y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需求：对于两个 Long 型数据进行处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">op</span><span class="params">(Long l1, Long l2, MyFunction2&lt;Long, Long&gt; mf)</span></span>&#123;</span><br><span class="line">    System.out.println(mf.getValue(l1, l2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Java提供接口"><a href="#2-2-Java提供接口" class="headerlink" title="2-2.Java提供接口"></a>2-2.Java提供接口</h3><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/3.png" alt="3"></p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/4.png" alt="4"></p><p><strong>四大内置的四大核心函数式接口：</strong></p><ul><li>Consumer<T> : 消费型接口<ul><li>void accept(T t);</li></ul></T></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Consumer&lt;T&gt; 消费型接口 :</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    happy(<span class="number">10000</span>, (m) -&gt; System.out.println(<span class="string">"每次消费："</span> + m + <span class="string">"元"</span>));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">happy</span><span class="params">(<span class="keyword">double</span> money, Consumer&lt;Double&gt; con)</span></span>&#123;</span><br><span class="line">    con.accept(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Supplier<T> : 供给型接口<ul><li>T get(); </li></ul></T></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Supplier&lt;T&gt; 供给型接口 :</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numList = getNumList(<span class="number">10</span>, () -&gt; (<span class="keyword">int</span>)(Math.random() * <span class="number">100</span>));</span><br><span class="line">    <span class="keyword">for</span> (Integer num : numList) &#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需求：产生指定个数的整数，并放入集合中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNumList</span><span class="params">(<span class="keyword">int</span> num, Supplier&lt;Integer&gt; sup)</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        Integer n = sup.get();</span><br><span class="line">        list.add(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Function&lt;T, R&gt; : 函数型接口<ul><li>R apply(T t);</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function&lt;T, R&gt; 函数型接口：</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String newStr = strHandler(<span class="string">"\t\t\t 我大尚硅谷威武   "</span>, (str) -&gt; str.trim());</span><br><span class="line">    System.out.println(newStr);</span><br><span class="line"></span><br><span class="line">    String subStr = strHandler(<span class="string">"我大尚硅谷威武"</span>, (str) -&gt; str.substring(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">    System.out.println(subStr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需求：用于处理字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">strHandler</span><span class="params">(String str, Function&lt;String, String&gt; fun)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fun.apply(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Predicate<T> : 断言型接口<ul><li>boolean test(T t);</li></ul></T></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Predicate&lt;T&gt; 断言型接口：</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">"Hello"</span>, <span class="string">"atguigu"</span>, <span class="string">"Lambda"</span>, <span class="string">"www"</span>, <span class="string">"ok"</span>);</span><br><span class="line">    List&lt;String&gt; strList = filterStr(list, (s) -&gt; s.length() &gt; <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (String str : strList) &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：将满足条件的字符串，放入集合中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">filterStr</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pre.test(str))&#123;</span><br><span class="line">            strList.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-方法引用与构造器引用"><a href="#3-方法引用与构造器引用" class="headerlink" title="3.方法引用与构造器引用"></a>3.方法引用与构造器引用</h2><h3 id="3-1-方法引用"><a href="#3-1-方法引用" class="headerlink" title="3-1.方法引用"></a>3-1.方法引用</h3><p>​    若 Lambda 体中的功能，已经有方法提供了实现，可以使用方法引用（可以将方法引用理解为 Lambda 表达式的另外一种表现形式）</p><p>​    实现抽象方法的参数列表，必须与方法引用方法的参数列表保持一致.</p><p>​    方法引用：使用操作符 “ ::” 将方法名和对象或类的名字分隔开来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PrintStream ps = System.out;</span><br><span class="line">    Consumer&lt;String&gt; con = (str) -&gt; ps.println(str);</span><br><span class="line">    con.accept(<span class="string">"Hello World！"</span>);</span><br><span class="line">    System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">    con2.accept(<span class="string">"Hello Java8！"</span>);</span><br><span class="line">    Consumer&lt;String&gt; con3 = System.out::println;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>方法引用所引用的方法的参数列表与返回值类型，需要与函数式接口中抽象方法的参数列表和返回值类型保持一致！</p><ul><li>若Lambda 的参数列表的第一个参数，是实例方法的调用者，第二个参数(或无参)是实例方法的参数时，格式： ClassName::MethodName</li></ul></li></ul><ul><li>对象的引用 :: 实例方法名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象的引用 :: 实例方法名</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Employee emp = <span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">9999.99</span>);</span><br><span class="line">    Supplier&lt;String&gt; sup = () -&gt; emp.getName();</span><br><span class="line">    System.out.println(sup.get());</span><br><span class="line">    System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    Supplier&lt;String&gt; sup2 = emp::getName;</span><br><span class="line">    System.out.println(sup2.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类名 :: 静态方法名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类名 :: 静态方法名</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">    System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiFunction&lt;Double, Double, Double&gt; fun = (x, y) -&gt; Math.max(x, y);</span><br><span class="line">    System.out.println(fun.apply(<span class="number">1.5</span>, <span class="number">22.2</span>));</span><br><span class="line">    System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    BiFunction&lt;Double, Double, Double&gt; fun2 = Math::max;</span><br><span class="line">    System.out.println(fun2.apply(<span class="number">1.2</span>, <span class="number">1.5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类名 :: 实例方法名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类名 :: 实例方法名</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiPredicate&lt;String, String&gt; bp = (x, y) -&gt; x.equals(y);</span><br><span class="line">    System.out.println(bp.test(<span class="string">"abcde"</span>, <span class="string">"abcde"</span>));</span><br><span class="line">    System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    BiPredicate&lt;String, String&gt; bp2 = String::equals;</span><br><span class="line">    System.out.println(bp2.test(<span class="string">"abc"</span>, <span class="string">"abc"</span>));</span><br><span class="line">    System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Function&lt;Employee, String&gt; fun = (e) -&gt; e.show();</span><br><span class="line">    System.out.println(fun.apply(<span class="keyword">new</span> Employee()));</span><br><span class="line">    System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Employee, String&gt; fun2 = Employee::show;</span><br><span class="line">    System.out.println(fun2.apply(<span class="keyword">new</span> Employee()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-构造器引用"><a href="#3-2-构造器引用" class="headerlink" title="3-2.构造器引用"></a>3-2.构造器引用</h3><p>​    与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，与构造器参数列表要与接口中抽象方法的参数列表一致！</p><p>​    类名 :: new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造器引用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Function&lt;String, Employee&gt; fun = Employee::<span class="keyword">new</span>;</span><br><span class="line">    BiFunction&lt;String, Integer, Employee&gt; fun2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Supplier&lt;Employee&gt; sup = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">    System.out.println(sup.get());</span><br><span class="line">    System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    Supplier&lt;Employee&gt; sup2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(sup2.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-数组引用"><a href="#3-3-数组引用" class="headerlink" title="3-3.数组引用"></a>3-3.数组引用</h3><p>​    类型[] :: new;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组引用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Function&lt;Integer, String[]&gt; fun = (args) -&gt; <span class="keyword">new</span> String[args];</span><br><span class="line">    String[] strs = fun.apply(<span class="number">10</span>);</span><br><span class="line">    System.out.println(strs.length);</span><br><span class="line">    System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    Function&lt;Integer, Employee[]&gt; fun2 = Employee[] :: <span class="keyword">new</span>;</span><br><span class="line">    Employee[] emps = fun2.apply(<span class="number">20</span>);</span><br><span class="line">    System.out.println(emps.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Stream-API"><a href="#4-Stream-API" class="headerlink" title="4.Stream API"></a>4.Stream API</h2><p>​    Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p><p>​    流 (Stream)  是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。</p><p>​    集合讲的是数据，流讲的是计算</p><p><strong>注意：</strong></p><ul><li>Stream 自己不会存储元素。</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li></ul><h3 id="4-1-Stream-的操作三个步骤"><a href="#4-1-Stream-的操作三个步骤" class="headerlink" title="4-1.Stream  的操作三个步骤"></a>4-1.Stream  的操作三个步骤</h3><ul><li>创建  Stream<br>一个数据源（如：集合、数组），获取一个流</li><li>中间操作<br>一个中间操作链，对数据源的数据进行处理</li><li>终止操作( ( 终端操作) )<br>一个终止操作，执行中间操作链，并产生结果</li></ul><h3 id="4-2-创建-Stream"><a href="#4-2-创建-Stream" class="headerlink" title="4-2.创建  Stream"></a>4-2.创建  Stream</h3><ul><li>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法 ：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">stream</span><span class="params">()</span> : 返回一个顺序流</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">parallelStream</span><span class="params">()</span> : 返回一个并行流</span></span><br></pre></td></tr></table></figure><ul><li>Java8 中的 Arrays 的静态方法 stream() 可以获取数组流<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Stream&lt;T&gt; <span class="title">stream</span><span class="params">(T[] array)</span>: 返回一个流</span></span><br></pre></td></tr></table></figure><ul><li>重载形式，能够处理对应基本类型的数组</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntStream <span class="title">stream</span><span class="params">(<span class="keyword">int</span>[] array)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LongStream <span class="title">stream</span><span class="params">(<span class="keyword">long</span>[] array)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleStream <span class="title">stream</span><span class="params">(<span class="keyword">double</span>[] array)</span></span></span><br></pre></td></tr></table></figure><ul><li>可以使用静态方法 Stream.of(), 通过显示值创建一个流。它可以接收任意数量的参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title">of</span><span class="params">(T... values)</span> : 返回一个流</span></span><br></pre></td></tr></table></figure><ul><li>可以使用静态方法 Stream.iterate() 和Stream.generate(), 创建无限流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title">iterate</span><span class="params">(<span class="keyword">final</span> T seed, <span class="keyword">final</span> UnaryOperator&lt;T&gt; f)</span></span></span><br><span class="line"><span class="function"><span class="comment">//生成</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title">generate</span><span class="params">(Supplier&lt;T&gt; s)</span> :</span></span><br></pre></td></tr></table></figure><p><strong>例子： Collection 接口，由数组创建流，由值创建流，由函数创建流：创建无限流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建 Stream</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. Collection 提供了两个方法  stream() 与 parallelStream()</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Stream&lt;String&gt; stream = list.stream(); <span class="comment">//获取一个顺序流</span></span><br><span class="line">    Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class="comment">//获取一个并行流</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 通过 Arrays 中的 stream() 获取一个数组流</span></span><br><span class="line">    Integer[] nums = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = Arrays.stream(nums);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 通过 Stream 类中静态方法 of()</span></span><br><span class="line">    Stream&lt;Integer&gt; stream2 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 创建无限流</span></span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    Stream&lt;Integer&gt; stream3 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">2</span>).limit(<span class="number">10</span>);</span><br><span class="line">    stream3.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    Stream&lt;Double&gt; stream4 = Stream.generate(Math::random).limit(<span class="number">2</span>);</span><br><span class="line">    stream4.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-Stream-的中间操作"><a href="#4-3-Stream-的中间操作" class="headerlink" title="4-3.Stream 的中间操作"></a>4-3.Stream 的中间操作</h3><p>​    多个 中间操作可以连接起来形成一个 流水线，除非流水线上触发终止操作，否则 中间操作不会执行任何的处理。</p><p>​    而在终止操作时一次性全部 处理，称为“惰性求值”</p><p><strong>方法：筛选与切片，映射，排序</strong></p><p>筛选与切片</p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/5.png" alt="5"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 中间操作</span></span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">102</span>, <span class="string">"李四"</span>, <span class="number">59</span>, <span class="number">6666.66</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">9999.99</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">103</span>, <span class="string">"王五"</span>, <span class="number">28</span>, <span class="number">3333.33</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">105</span>, <span class="string">"田七"</span>, <span class="number">38</span>, <span class="number">5555.55</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">筛选与切片</span></span><br><span class="line"><span class="comment">filter——接收 Lambda ， 从流中排除某些元素。</span></span><br><span class="line"><span class="comment">limit——截断流，使其元素不超过给定数量。</span></span><br><span class="line"><span class="comment">skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span></span><br><span class="line"><span class="comment">distinct——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素（要在实体类里重写方法 hashCode() 和 equals()）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//内部迭代：迭代操作 Stream API 内部完成</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//所有的中间操作不会做任何的处理</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = emps.stream()</span><br><span class="line">        .filter((e) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"测试中间操作"</span>);</span><br><span class="line">            <span class="keyword">return</span> e.getAge() &lt;= <span class="number">35</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有当做终止操作时，所有的中间操作会一次性的全部执行，称为“惰性求值”</span></span><br><span class="line">    stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部迭代</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Iterator&lt;Employee&gt; it = emps.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">        System.out.println(it.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//filter——接收 Lambda ， 从流中排除某些元素。</span></span><br><span class="line"><span class="comment">//limit——截断流，使其元素不超过给定数量。</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    emps.stream()</span><br><span class="line">        .filter((e) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"短路！"</span>); <span class="comment">// &amp;&amp;  ||</span></span><br><span class="line">            <span class="keyword">return</span> e.getSalary() &gt;= <span class="number">5000</span>;</span><br><span class="line">        &#125;).limit(<span class="number">3</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    emps.parallelStream()</span><br><span class="line">        .filter((e) -&gt; e.getSalary() &gt;= <span class="number">5000</span>)</span><br><span class="line">        .skip(<span class="number">2</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//distinct——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span></span><br><span class="line"><span class="comment">//要在实体类里重写方法 hashCode() 和 equals()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    emps.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射</p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/6.png" alt="6"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">映射</span></span><br><span class="line"><span class="comment">map——接收 Lambda ， 将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class="line"><span class="comment">flatMap——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</span></span><br><span class="line"><span class="comment">类似add（Object ob），addAll（Collection coll）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Stream&lt;String&gt; str = emps.stream()</span><br><span class="line">        .map((e) -&gt; e.getName());</span><br><span class="line">    System.out.println(<span class="string">"-------------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; strList = Arrays.asList(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"ddd"</span>, <span class="string">"eee"</span>);</span><br><span class="line">    Stream&lt;String&gt; stream = strList.stream()</span><br><span class="line">        .map(String::toUpperCase);</span><br><span class="line">    stream.forEach(System.out::println);</span><br><span class="line"><span class="comment">//map使用方法filterCharacter</span></span><br><span class="line">    Stream&lt;Stream&lt;Character&gt;&gt; stream2 = strList.stream()</span><br><span class="line">        .map(TestStreamAPI1::filterCharacter);</span><br><span class="line">    <span class="comment">//&#123;a，a，a&#125;，&#123;b，b，b&#125;，流放在流中</span></span><br><span class="line">    stream2.forEach((sm) -&gt; &#123;</span><br><span class="line">        sm.forEach(System.out::println);</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">"---------------------------------------------"</span>);</span><br><span class="line"><span class="comment">//flatMap使用方法filterCharacter</span></span><br><span class="line">    Stream&lt;Character&gt; stream3 = strList.stream()</span><br><span class="line">        .flatMap(TestStreamAPI1::filterCharacter);</span><br><span class="line">    <span class="comment">//a，a，a，b，b，b,元素放在流中</span></span><br><span class="line">    stream3.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">filterCharacter</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//Str转字符串数组</span></span><br><span class="line">    <span class="keyword">for</span> (Character ch : str.toCharArray()) &#123;</span><br><span class="line">        list.add(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序</p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/7.png" alt="7"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sorted()——自然排序（Comparable）</span></span><br><span class="line"><span class="comment">sorted(Comparator com)——定制排序（Compatator）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//对名字排序</span></span><br><span class="line">emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.sorted()</span><br><span class="line">.forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line"><span class="comment">//对年龄和名字进行排序</span></span><br><span class="line">emps.stream()</span><br><span class="line">.sorted((x, y) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(x.getAge() == y.getAge())&#123;</span><br><span class="line"><span class="keyword">return</span> x.getName().compareTo(y.getName());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.compare(x.getAge(), y.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-Stream-的终止操作"><a href="#4-4-Stream-的终止操作" class="headerlink" title="4-4.Stream 的终止操作"></a>4-4.Stream 的终止操作</h3><p>​    操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void</p><p><strong>方法：</strong></p><p>查找与匹配</p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/8.png" alt="8"></p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/9.png" alt="9"></p><p><strong>实体类加个方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"><span class="keyword">private</span> Status status;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Status &#123;</span><br><span class="line">FREE, BUSY, VOCATION;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStreamAPI2</span> </span>&#123;</span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">102</span>, <span class="string">"李四"</span>, <span class="number">59</span>, <span class="number">6666.66</span>, Status.BUSY),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">9999.99</span>, Status.FREE),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">103</span>, <span class="string">"王五"</span>, <span class="number">28</span>, <span class="number">3333.33</span>, Status.VOCATION),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.BUSY),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.FREE),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.FREE),</span><br><span class="line"><span class="keyword">new</span> Employee(<span class="number">105</span>, <span class="string">"田七"</span>, <span class="number">38</span>, <span class="number">5555.55</span>, Status.BUSY)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//3. 终止操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">allMatch——检查是否匹配所有元素</span></span><br><span class="line"><span class="comment">anyMatch——检查是否至少匹配一个元素</span></span><br><span class="line"><span class="comment">noneMatch——检查是否没有匹配的元素</span></span><br><span class="line"><span class="comment">findFirst——返回第一个元素</span></span><br><span class="line"><span class="comment">findAny——返回当前流中的任意元素</span></span><br><span class="line"><span class="comment">count——返回流中元素的总个数</span></span><br><span class="line"><span class="comment">max——返回流中最大值</span></span><br><span class="line"><span class="comment">min——返回流中最小值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//allMatch——检查是否匹配所有元素</span></span><br><span class="line">        <span class="keyword">boolean</span> bl = emps.stream()</span><br><span class="line">            .allMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line">        System.out.println(bl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//anyMatch——检查是否至少匹配一个元素</span></span><br><span class="line">        <span class="keyword">boolean</span> bl1 = emps.stream()</span><br><span class="line">            .anyMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line">        System.out.println(bl1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noneMatch——检查是否没有匹配的元素</span></span><br><span class="line">        <span class="keyword">boolean</span> bl2 = emps.stream()</span><br><span class="line">            .noneMatch((e) -&gt; e.getStatus().equals(Status.BUSY));</span><br><span class="line">        System.out.println(bl2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//findFirst——返回第一个元素</span></span><br><span class="line"><span class="comment">//对工资进行排序，找第一个，有可能没有数据，没有第一个</span></span><br><span class="line"><span class="comment">//Optional，避免空指针异常，容器类，有个orElse方法，对象为空，找个替代的对象</span></span><br><span class="line">Optional&lt;Employee&gt; op = emps.stream()</span><br><span class="line">.sorted((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()))</span><br><span class="line">.findFirst();</span><br><span class="line">System.out.println(op.get());</span><br><span class="line">System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//findAny——返回当前流中的任意元素</span></span><br><span class="line">Optional&lt;Employee&gt; op2 = emps.parallelStream()</span><br><span class="line">            .filter((e) -&gt; e.getStatus().equals(Status.FREE))</span><br><span class="line">            .findAny();</span><br><span class="line">System.out.println(op2.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//count——返回流中元素的总个数</span></span><br><span class="line"><span class="keyword">long</span> count = emps.stream()</span><br><span class="line">            .filter((e) -&gt; e.getStatus().equals(Status.FREE))</span><br><span class="line">            .count();</span><br><span class="line">System.out.println(count);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//max——返回流中最大值</span></span><br><span class="line">Optional&lt;Double&gt; op = emps.stream()</span><br><span class="line">            .map(Employee::getSalary)</span><br><span class="line">            .max(Double::compare);</span><br><span class="line">System.out.println(op.get());</span><br><span class="line">        </span><br><span class="line"><span class="comment">//min——返回流中最小值</span></span><br><span class="line">Optional&lt;Employee&gt; op2 = emps.stream()</span><br><span class="line">            .min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class="line">System.out.println(op2.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：流进行了终止操作后，不能再次使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//查找FREE</span></span><br><span class="line">Stream&lt;Employee&gt; stream = emps.stream()</span><br><span class="line"> .filter((e) -&gt; e.getStatus().equals(Status.FREE));</span><br><span class="line">        <span class="comment">//统计总数</span></span><br><span class="line"><span class="keyword">long</span> count = stream.count();</span><br><span class="line"><span class="comment">//提取getSalary，找工资最大值</span></span><br><span class="line">stream.map(Employee::getSalary)</span><br><span class="line">.max(Double::compare);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>归约：：map 和 reduce 的连接通常称为 map-reduce 模式</p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/10.png" alt="10"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">归约</span></span><br><span class="line"><span class="comment">reduce(T identity, BinaryOperator)</span></span><br><span class="line"><span class="comment">reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//sum，累加</span></span><br><span class="line">Integer sum = list.stream()</span><br><span class="line">.reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">System.out.println(<span class="string">"----------------------------------------"</span>);</span><br><span class="line"><span class="comment">//提取工资，累加</span></span><br><span class="line">Optional&lt;Double&gt; op = emps.stream()</span><br><span class="line">.map(Employee::getSalary)</span><br><span class="line">.reduce(Double::sum);</span><br><span class="line">System.out.println(op.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//收集的例子</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Double&gt; sum = emps.stream()</span><br><span class="line">.map(Employee::getSalary)</span><br><span class="line">.collect(Collectors.reducing(Double::sum));</span><br><span class="line">System.out.println(sum.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需求：搜索名字中 “六” 出现的次数</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Integer&gt; sum = emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.flatMap(TestStreamAPI1::filterCharacter)</span><br><span class="line">.map((ch) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(ch.equals(<span class="string">'六'</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;).reduce(Integer::sum);</span><br><span class="line"></span><br><span class="line">System.out.println(sum.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收集</p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/11.png" alt="11"></p><ul><li>Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、Set、Map)。但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，</li></ul><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/12.png" alt="12"></p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/13.png" alt="13"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//collect——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//元素收集到list</span></span><br><span class="line">List&lt;String&gt; list = emps.stream()</span><br><span class="line">        .map(Employee::getName)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//元素收集到set</span></span><br><span class="line">Set&lt;String&gt; set = emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.collect(Collectors.toSet());</span><br><span class="line">set.forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//元素收集到HashSet</span></span><br><span class="line">HashSet&lt;String&gt; hs = emps.stream()</span><br><span class="line">.map(Employee::getName)</span><br><span class="line">.collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line">hs.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//最大值</span></span><br><span class="line">Optional&lt;Double&gt; min = emps.stream()</span><br><span class="line">.map(Employee::getSalary)</span><br><span class="line">.collect(Collectors.minBy(Double::compare));</span><br><span class="line">System.out.println(min.get());</span><br><span class="line">    </span><br><span class="line"><span class="comment">//最小值</span></span><br><span class="line">Optional&lt;Employee&gt; max = emps.stream()</span><br><span class="line">.collect(Collectors.maxBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line">System.out.println(max.get());</span><br><span class="line">    </span><br><span class="line"><span class="comment">//总和</span></span><br><span class="line">Double sum = emps.stream()</span><br><span class="line">.collect(Collectors.summingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(sum);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//平均值</span></span><br><span class="line">Double avg = emps.stream()</span><br><span class="line">.collect(Collectors.averagingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(avg);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//总数</span></span><br><span class="line">Long count = emps.stream()</span><br><span class="line">.collect(Collectors.counting());</span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"--------------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//一次性得到要搞该元素的个数、总和、均值、最大值、最小值</span></span><br><span class="line">DoubleSummaryStatistics dss = emps.stream()</span><br><span class="line">        .collect(Collectors.summarizingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(dss);</span><br><span class="line">System.out.println(dss.getMax());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">Map&lt;Status, List&lt;Employee&gt;&gt; map = emps.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(Employee::getStatus));</span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多级分组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; map = emps.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy((e) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(e.getAge() &gt;= <span class="number">60</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">"老年"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getAge() &gt;= <span class="number">35</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">"中年"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"成年"</span>;</span><br><span class="line">&#125;)));</span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分区，对或错</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">Map&lt;Boolean, List&lt;Employee&gt;&gt; map = emps.stream()</span><br><span class="line">        .collect(Collectors.partitioningBy((e) -&gt; e.getSalary() &gt;= <span class="number">5000</span>));</span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串加，首尾加"----"</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">String str = emps.stream()</span><br><span class="line">        .map(Employee::getName)</span><br><span class="line">        .collect(Collectors.joining(<span class="string">","</span> , <span class="string">"----"</span>, <span class="string">"----"</span>));</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-练习题"><a href="#4-5-练习题" class="headerlink" title="4-5.练习题"></a>4-5.练习题</h3><h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a><strong>Stream</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.给定一个数字列表，如何返回一个由每个数的平方构成的列表呢？</span></span><br><span class="line"><span class="comment">给定【1，2，3，4，5】， 应该返回【1，4，9，16，25】。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Integer[] nums = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    Arrays.stream(nums)</span><br><span class="line">        .map((x) -&gt; x * x)</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 2.怎样用 map 和 reduce 方法数一数流中有多少个Employee呢？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Employee&gt; emps = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">102</span>, <span class="string">"李四"</span>, <span class="number">59</span>, <span class="number">6666.66</span>, Status.BUSY),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">9999.99</span>, Status.FREE),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">103</span>, <span class="string">"王五"</span>, <span class="number">28</span>, <span class="number">3333.33</span>, Status.VOCATION),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.BUSY),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.FREE),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">104</span>, <span class="string">"赵六"</span>, <span class="number">8</span>, <span class="number">7777.77</span>, Status.FREE),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="number">105</span>, <span class="string">"田七"</span>, <span class="number">38</span>, <span class="number">5555.55</span>, Status.BUSY)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;Integer&gt; count = emps.stream()</span><br><span class="line">        .map((e) -&gt; <span class="number">1</span>)</span><br><span class="line">        .reduce(Integer::sum);</span><br><span class="line">    System.out.println(count.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="综合例子：实体类，解决问题类"><a href="#综合例子：实体类，解决问题类" class="headerlink" title="综合例子：实体类，解决问题类"></a><strong>综合例子：实体类，解决问题类</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交易员类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trader</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String city;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交易类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Trader trader;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;Transaction&gt; transactions = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">Trader raoul = <span class="keyword">new</span> Trader(<span class="string">"Raoul"</span>, <span class="string">"Cambridge"</span>);</span><br><span class="line">Trader mario = <span class="keyword">new</span> Trader(<span class="string">"Mario"</span>, <span class="string">"Milan"</span>);</span><br><span class="line">Trader alan = <span class="keyword">new</span> Trader(<span class="string">"Alan"</span>, <span class="string">"Cambridge"</span>);</span><br><span class="line">Trader brian = <span class="keyword">new</span> Trader(<span class="string">"Brian"</span>, <span class="string">"Cambridge"</span>);</span><br><span class="line">transactions = Arrays.asList(</span><br><span class="line"><span class="keyword">new</span> Transaction(brian, <span class="number">2011</span>, <span class="number">300</span>),</span><br><span class="line"><span class="keyword">new</span> Transaction(raoul, <span class="number">2012</span>, <span class="number">1000</span>),</span><br><span class="line"><span class="keyword">new</span> Transaction(raoul, <span class="number">2011</span>, <span class="number">400</span>),</span><br><span class="line"><span class="keyword">new</span> Transaction(mario, <span class="number">2012</span>, <span class="number">710</span>),</span><br><span class="line"><span class="keyword">new</span> Transaction(mario, <span class="number">2012</span>, <span class="number">700</span>),</span><br><span class="line"><span class="keyword">new</span> Transaction(alan, <span class="number">2012</span>, <span class="number">950</span>)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 找出2011年发生的所有交易， 并按交易额排序（从低到高）</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">transactions.stream()</span><br><span class="line">            .filter((t) -&gt; t.getYear() == <span class="number">2011</span>)</span><br><span class="line">            .sorted((t1, t2) -&gt; Integer.compare(t1.getValue(), t2.getValue()))</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 交易员都在哪些不同的城市工作过？</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">transactions.stream()</span><br><span class="line">            .map((t) -&gt; t.getTrader().getCity())</span><br><span class="line">            .distinct()</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 查找所有来自剑桥的交易员，并按姓名排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">transactions.stream()</span><br><span class="line">            .filter((t) -&gt; t.getTrader().getCity().equals(<span class="string">"Cambridge"</span>))</span><br><span class="line">            .map(Transaction::getTrader)</span><br><span class="line">            .sorted((t1, t2) -&gt; t1.getName().compareTo(t2.getName()))</span><br><span class="line">            .distinct()</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4. 返回所有交易员的姓名字符串，按字母顺序排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">transactions.stream()</span><br><span class="line">            .map((t) -&gt; t.getTrader().getName())</span><br><span class="line">            .sorted()</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line"><span class="comment">//String的排序</span></span><br><span class="line">String str = transactions.stream()</span><br><span class="line">            .map((t) -&gt; t.getTrader().getName())</span><br><span class="line">            .sorted()</span><br><span class="line">            .reduce(<span class="string">""</span>, String::concat);</span><br><span class="line">System.out.println(str);</span><br><span class="line">System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line"><span class="comment">//按字母大小写排序,调用方法</span></span><br><span class="line">transactions.stream()</span><br><span class="line">            .map((t) -&gt; t.getTrader().getName())</span><br><span class="line">            .flatMap(TestTransaction::filterCharacter)</span><br><span class="line">            .sorted((s1, s2) -&gt; s1.compareToIgnoreCase(s2))</span><br><span class="line">            .forEach(System.out::print);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;String&gt; <span class="title">filterCharacter</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Character ch : str.toCharArray()) &#123;</span><br><span class="line">list.add(ch.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5. 有没有交易员是在米兰工作的？</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> bl = transactions.stream()</span><br><span class="line">            .anyMatch((t) -&gt; t.getTrader().getCity().equals(<span class="string">"Milan"</span>));</span><br><span class="line">System.out.println(bl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6. 打印生活在剑桥的交易员的所有交易额</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Integer&gt; sum = transactions.stream()</span><br><span class="line">            .filter((e) -&gt; e.getTrader().getCity().equals(<span class="string">"Cambridge"</span>))</span><br><span class="line">            .map(Transaction::getValue)</span><br><span class="line">            .reduce(Integer::sum);</span><br><span class="line">System.out.println(sum.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//7. 所有交易中，最高的交易额是多少</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Integer&gt; max = transactions.stream()</span><br><span class="line">            .map((t) -&gt; t.getValue())</span><br><span class="line">            .max(Integer::compare);</span><br><span class="line">System.out.println(max.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//8. 找到交易额最小的交易</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Transaction&gt; op = transactions.stream()</span><br><span class="line">            .min((t1, t2) -&gt; Integer.compare(t1.getValue(), t2.getValue()));</span><br><span class="line">System.out.println(op.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-并行流与串行流"><a href="#5-并行流与串行流" class="headerlink" title="5.并行流与串行流"></a>5.并行流与串行流</h2><p>​    并行流，是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流。</p><p>​    Java 8 中将并行进行了优化，对数据进行并行操作。Stream API 可以声明性地通过 parallel() 与<br>sequential() 在并行流与顺序流之间进行切换。</p><h3 id="Fork-Join-框架"><a href="#Fork-Join-框架" class="headerlink" title="Fork/Join 框架"></a>Fork/Join 框架</h3><p>​    Fork/Join  框架：就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务（拆到不可再拆时），再将一个个的小任务运算的结果进行 join 汇总.</p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/14.png" alt="14"></p><h3 id="Fork-Join-框架与传统线程池的区别"><a href="#Fork-Join-框架与传统线程池的区别" class="headerlink" title="Fork/Join 框架与传统线程池的区别"></a>Fork/Join 框架与传统线程池的区别</h3><p>采用 “工作窃取”模式（work-stealing）：</p><p>​    当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。</p><p>​    相对于一般的线程池实现，fork/join框架的优势体现在对其中包含的任务的处理方式上。在一般的线程池中，如果一个线程正在执行的任务由于某些原因无法继续运行，那么该线程会处于等待状态。</p><p>​    而在fork/join框架实现中，如果某个子问题由于等待另外一个子问题的完成而无法继续运行。那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行，这种方式减少了线程的等待时间,提高了性能 。</p><p><strong>ForkJoin框架</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinCalculate</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">13475679780L</span>;</span><br><span class="line"><span class="comment">//拆分</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> end;</span><br><span class="line"><span class="comment">//临界值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> THRESHOLD = <span class="number">10000L</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ForkJoinCalculate</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.start = start;</span><br><span class="line"><span class="keyword">this</span>.end = end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> length = end - start;</span><br><span class="line"><span class="comment">//到临界值不能再拆</span></span><br><span class="line"><span class="keyword">if</span>(length &lt;= THRESHOLD)&#123;</span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//递归拆</span></span><br><span class="line"><span class="keyword">long</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line">ForkJoinCalculate left = <span class="keyword">new</span> ForkJoinCalculate(start, middle);</span><br><span class="line">left.fork(); </span><br><span class="line"><span class="comment">//拆分，并将该子任务压入线程队列</span></span><br><span class="line">ForkJoinCalculate right = <span class="keyword">new</span> ForkJoinCalculate(middle+<span class="number">1</span>, end);</span><br><span class="line">right.fork();</span><br><span class="line"><span class="comment">//合并，累加总和</span></span><br><span class="line"><span class="keyword">return</span> left.join() + right.join();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestForkJoin</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*ForkJoin框架</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="comment">//线程池支持</span></span><br><span class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> ForkJoinCalculate(<span class="number">0L</span>, <span class="number">10000000000L</span>);</span><br><span class="line"><span class="keyword">long</span> sum = pool.invoke(task);</span><br><span class="line">System.out.println(sum);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"耗费的时间为: "</span> + (end - start)); </span><br><span class="line">        <span class="comment">//112-1953-1988-2654-2647-20663-113808</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*普通for</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0L</span>; i &lt;= <span class="number">10000000000L</span>; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"耗费的时间为: "</span> + (end - start)); </span><br><span class="line">        <span class="comment">//34-3174-3132-4227-4223-31583</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*java8并行流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="comment">//reduce（0，Long::sum）顺序流</span></span><br><span class="line">Long sum = LongStream.rangeClosed(<span class="number">0L</span>, <span class="number">10000000000L</span>)</span><br><span class="line"> .parallel()</span><br><span class="line"> .sum();</span><br><span class="line">System.out.println(sum);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"耗费的时间为: "</span> + (end - start)); </span><br><span class="line">        <span class="comment">//2061-2053-2086-18926</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-Optional-类"><a href="#6-Optional-类" class="headerlink" title="6.Optional 类"></a>6.Optional 类</h2><p>​    Optional<T> 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。</T></p><p><strong>常用方法：</strong></p><table><thead><tr><th><strong>Optional.ofNullable(T t)</strong></th><th><strong>若 t 不为 null,创建 Optional 实例,否则创建空实例</strong></th></tr></thead><tbody><tr><td><strong>Optional.of(T t)</strong></td><td><strong>创建一个 Optional 实例</strong></td></tr><tr><td><strong>Optional.empty()</strong></td><td><strong>创建一个空的 Optional 实例</strong></td></tr><tr><td><strong>isPresent()</strong></td><td><strong>判断是否包含值</strong></td></tr><tr><td><strong>orElse(T t)</strong></td><td><strong>如果调用对象包含值，返回该值，否则返回t</strong></td></tr><tr><td><strong>orElseGet(Supplier s)</strong></td><td><strong>如果调用对象包含值，返回该值，否则返回 s 获取的值</strong></td></tr><tr><td><strong>map(Function f)</strong></td><td><strong>如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()</strong></td></tr><tr><td><strong>flatMap(Function mapper)</strong></td><td><strong>与 map 类似，要求返回值必须是Optional</strong></td></tr></tbody></table><p><strong>Optional 容器类：用于尽量避免空指针异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Optional.of(T t) : 创建一个 Optional 实例</span></span><br><span class="line"><span class="comment"> * Optional.empty() : 创建一个空的 Optional 实例</span></span><br><span class="line"><span class="comment"> * Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例</span></span><br><span class="line"><span class="comment"> * isPresent() : 判断是否包含值</span></span><br><span class="line"><span class="comment"> * orElse(T t) :  如果调用对象包含值，返回该值，否则返回t</span></span><br><span class="line"><span class="comment"> * orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值</span></span><br><span class="line"><span class="comment"> * map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()</span></span><br><span class="line"><span class="comment"> * flatMap(Function mapper):与 map 类似，要求返回值必须是Optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOptional</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Employee&gt; op = Optional.of(<span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">9999.99</span>));</span><br><span class="line"><span class="comment">//如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()</span></span><br><span class="line">Optional&lt;String&gt; op2 = op.map(Employee::getName);</span><br><span class="line">System.out.println(op2.get());</span><br><span class="line"><span class="comment">//与 map 类似，要求返回值必须是Optional</span></span><br><span class="line">Optional&lt;String&gt; op3 = op.flatMap((e) -&gt; Optional.of(e.getName()));</span><br><span class="line">System.out.println(op3.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//若 t 不为 null,创建 Optional 实例,否则创建空实例</span></span><br><span class="line">Optional&lt;Employee&gt; op = Optional.ofNullable(<span class="keyword">new</span> Employee());</span><br><span class="line"><span class="comment">//判断是否包含值</span></span><br><span class="line"><span class="keyword">if</span>(op.isPresent())&#123;</span><br><span class="line">System.out.println(op.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果调用对象包含值，返回该值，否则返回t</span></span><br><span class="line">Employee emp = op.orElse(<span class="keyword">new</span> Employee(<span class="string">"张三"</span>));</span><br><span class="line">System.out.println(emp);</span><br><span class="line"><span class="comment">//如果调用对象包含值，返回该值，否则返回 s 获取的值</span></span><br><span class="line">Employee emp2 = op.orElseGet(() -&gt; <span class="keyword">new</span> Employee());</span><br><span class="line">System.out.println(emp2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Employee&gt; op2 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line">System.out.println(op2.get());</span><br><span class="line"><span class="comment">//创建一个空的 Optional 实例</span></span><br><span class="line">Optional&lt;Employee&gt; op = Optional.empty();</span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line">System.out.println(op.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建一个 Optional 实例</span></span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="comment">//Optional&lt;Employee&gt; op = Optional.of(null);</span></span><br><span class="line">Optional&lt;Employee&gt; op = Optional.of(<span class="keyword">new</span> Employee());</span><br><span class="line">Employee emp = op.get();</span><br><span class="line">System.out.println(emp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Godness god;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Godness</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意：Optional 不能被序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewMan</span> </span>&#123;</span><br><span class="line"><span class="comment">//有对象在</span></span><br><span class="line"><span class="keyword">private</span> Optional&lt;Godness&gt; godness = Optional.empty();</span><br><span class="line"><span class="keyword">private</span> Godness god;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例题</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Man man = <span class="keyword">new</span> Man();</span><br><span class="line">    String name = getGodnessName(man);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需求：获取一个男人心中女神的名字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getGodnessName</span><span class="params">(Man man)</span></span>&#123;</span><br><span class="line">    <span class="comment">//避免空指针异常</span></span><br><span class="line">    <span class="keyword">if</span>(man != <span class="keyword">null</span>)&#123;</span><br><span class="line">        Godness g = man.getGod();</span><br><span class="line">       <span class="keyword">if</span>(g != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> g.getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"没有这个人"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运用 Optional 的实体类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;Godness&gt; godness = Optional.ofNullable(<span class="keyword">new</span> Godness(<span class="string">"林志玲"</span>));</span><br><span class="line">    Optional&lt;NewMan&gt; op = Optional.ofNullable(<span class="keyword">new</span> NewMan(godness));</span><br><span class="line">    String name = getGodnessName2(op);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getGodnessName2</span><span class="params">(Optional&lt;NewMan&gt; man)</span></span>&#123;</span><br><span class="line">    <span class="comment">//保证一定有个对象 </span></span><br><span class="line">    <span class="keyword">return</span> man.orElse(<span class="keyword">new</span> NewMan())</span><br><span class="line">        .getGodness()</span><br><span class="line">        .orElse(<span class="keyword">new</span> Godness(<span class="string">"没有这个人"</span>))</span><br><span class="line">        .getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-接口中的默认方法与静态方法"><a href="#7-接口中的默认方法与静态方法" class="headerlink" title="7.接口中的默认方法与静态方法"></a>7.接口中的默认方法与静态方法</h2><p>​    Java 8中允许接口中包含具有具体实现的方法，该方法称为“默认方法”，默认方法使用 default 关键字修饰。</p><p>如下面：MyFun</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFun</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"哈哈哈"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口默认方法的 ” 类优先 ”原则</p><p>​    若一个接口中定义了一个默认方法，而另外一个父类或接口中又定义了一个同名的方法时</p><ul><li>选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。</li><li>接口冲突。如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突</li></ul><p>Java8 中，接口中允许添加静态方法。</p><p><strong>例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFun</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"哈哈哈"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"嘿嘿嘿"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"呵呵呵"</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"接口中的静态方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：****</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">MyClass</span> <span class="keyword">implements</span> <span class="title">MyFun</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass2</span> <span class="keyword">implements</span> <span class="title">MyFun</span>, <span class="title">MyInterface</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> MyInterface.<span class="keyword">super</span>.getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDefaultInterface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SubClass sc = <span class="keyword">new</span> SubClass();</span><br><span class="line">System.out.println(sc.getName());</span><br><span class="line">        <span class="comment">//静态方法</span></span><br><span class="line">MyInterface.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-新时间日期-API"><a href="#8-新时间日期-API" class="headerlink" title="8.新时间日期 API"></a>8.新时间日期 API</h2><p><strong>例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatThreadLocal</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;()&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Date <span class="title">convert</span><span class="params">(String source)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line"><span class="keyword">return</span> df.get().parse(source);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSimpleDateFormat</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//线程问题</span></span><br><span class="line"><span class="comment">SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");</span></span><br><span class="line"><span class="comment">//需要一个实例</span></span><br><span class="line"><span class="comment">Callable&lt;Date&gt; task = new Callable&lt;Date&gt;() &#123;</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public Date call() throws Exception &#123;</span></span><br><span class="line"><span class="comment">return sdf.parse("20161121");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">//线程池，长度为10</span></span><br><span class="line"><span class="comment">ExecutorService pool = Executors.newFixedThreadPool(10);</span></span><br><span class="line"><span class="comment">//返回结果放在list</span></span><br><span class="line"><span class="comment">List&lt;Future&lt;Date&gt;&gt; results = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">results.add(pool.submit(task));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (Future&lt;Date&gt; future : results) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(future.get());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">pool.shutdown();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//解决多线程安全问题</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Callable&lt;Date&gt; task = new Callable&lt;Date&gt;() &#123;</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public Date call() throws Exception &#123;</span></span><br><span class="line"><span class="comment">return DateFormatThreadLocal.convert("20161121");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">ExecutorService pool = Executors.newFixedThreadPool(10);</span></span><br><span class="line"><span class="comment">List&lt;Future&lt;Date&gt;&gt; results = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">results.add(pool.submit(task));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (Future&lt;Date&gt; future : results) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(future.get());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">pool.shutdown();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//java8</span></span><br><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">Callable&lt;LocalDate&gt; task = <span class="keyword">new</span> Callable&lt;LocalDate&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocalDate <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">LocalDate ld = LocalDate.parse(<span class="string">"20161121"</span>, dtf);</span><br><span class="line"><span class="keyword">return</span> ld;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">List&lt;Future&lt;LocalDate&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">results.add(pool.submit(task));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Future&lt;LocalDate&gt; future : results) &#123;</span><br><span class="line">System.out.println(future.get());</span><br><span class="line">&#125;</span><br><span class="line">pool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-1-使用-LocalDate-、LocalTime-、LocalDateTime"><a href="#8-1-使用-LocalDate-、LocalTime-、LocalDateTime" class="headerlink" title="8-1.使用 LocalDate 、LocalTime 、LocalDateTime"></a>8-1.使用 LocalDate 、LocalTime 、LocalDateTime</h3><p>​    LocalDate、LocalTime、LocalDateTime 类的实例是不可变的对象，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的日期或时间，并不包含当前的时间信息。也不包含与时区相关的信息。</p><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/15.png" alt="15"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. LocalDate、LocalTime、LocalDateTime</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前时间</span></span><br><span class="line">    LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">    System.out.println(ldt);</span><br><span class="line">    <span class="comment">//设置时间</span></span><br><span class="line">    LocalDateTime ld2 = LocalDateTime.of(<span class="number">2016</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    System.out.println(ld2);</span><br><span class="line">    <span class="comment">//加年</span></span><br><span class="line">    LocalDateTime ldt3 = ld2.plusYears(<span class="number">20</span>);</span><br><span class="line">    System.out.println(ldt3);</span><br><span class="line">    <span class="comment">//减时间</span></span><br><span class="line">    LocalDateTime ldt4 = ld2.minusMonths(<span class="number">2</span>);</span><br><span class="line">    System.out.println(ldt4);</span><br><span class="line">    <span class="comment">//细化获取时间</span></span><br><span class="line">    System.out.println(ldt.getYear());</span><br><span class="line">    System.out.println(ldt.getMonthValue());</span><br><span class="line">    System.out.println(ldt.getDayOfMonth());</span><br><span class="line">    System.out.println(ldt.getHour());</span><br><span class="line">    System.out.println(ldt.getMinute());</span><br><span class="line">    System.out.println(ldt.getSecond());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-Instant"><a href="#8-2-Instant" class="headerlink" title="8-2.Instant"></a>8-2.Instant</h3><p>​    用于“时间戳”的运算。它是以Unix元年(传统的设定为UTC时区1970年1月1日午夜时分)开始所经历的描述进行运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. Instant : 时间戳。 （使用 Unix 元年  1970年1月1日 00:00:00 所经历的毫秒值）</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Instant ins = Instant.now();  </span><br><span class="line">    <span class="comment">//默认使用 UTC 时区</span></span><br><span class="line">    System.out.println(ins);</span><br><span class="line">    <span class="comment">//添加时间</span></span><br><span class="line">    OffsetDateTime odt = ins.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">    System.out.println(odt);</span><br><span class="line">    <span class="comment">//从第二个开始的时间线获取纳米秒数</span></span><br><span class="line">    System.out.println(ins.getNano());</span><br><span class="line">    <span class="comment">//加5秒，原始时间</span></span><br><span class="line">    Instant ins2 = Instant.ofEpochSecond(<span class="number">5</span>);</span><br><span class="line">    System.out.println(ins2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-Duration-和-Period"><a href="#8-3-Duration-和-Period" class="headerlink" title="8-3.Duration  和 Period"></a>8-3.Duration  和 Period</h3><ul><li>Duration:用于计算两个“时间”间隔</li><li>Period:用于计算两个“日期”间隔</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Duration : 用于计算两个“时间”间隔</span></span><br><span class="line"><span class="comment">//Period : 用于计算两个“日期”间隔</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Instant ins1 = Instant.now();</span><br><span class="line">    System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Instant ins2 = Instant.now();</span><br><span class="line">    System.out.println(<span class="string">"所耗费时间为："</span> + Duration.between(ins1, ins2));</span><br><span class="line">    <span class="comment">//获取毫秒 Duration.toMillis()</span></span><br><span class="line">    System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    LocalDate ld1 = LocalDate.now();</span><br><span class="line">    LocalDate ld2 = LocalDate.of(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    Period pe = Period.between(ld2, ld1);</span><br><span class="line">    System.out.println(pe.getYears());</span><br><span class="line">    System.out.println(pe.getMonths());</span><br><span class="line">    System.out.println(pe.getDays());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-日期的操纵"><a href="#8-4-日期的操纵" class="headerlink" title="8-4.日期的操纵"></a>8-4.日期的操纵</h3><ul><li>TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下个周日”等操作。</li><li>TemporalAdjusters : 该类通过静态方法提供了大量的常<br>用 TemporalAdjuster 的实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4. TemporalAdjuster : 时间校正器</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">    System.out.println(ldt);</span><br><span class="line">    </span><br><span class="line">    LocalDateTime ldt2 = ldt.withDayOfMonth(<span class="number">10</span>);</span><br><span class="line">    System.out.println(ldt2);</span><br><span class="line">    <span class="comment">//增加下一周</span></span><br><span class="line">    LocalDateTime ldt3 = ldt.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));</span><br><span class="line">    System.out.println(ldt3);</span><br><span class="line">    <span class="comment">//自定义：下一个工作日</span></span><br><span class="line">    LocalDateTime ldt5 = ldt.with((l) -&gt; &#123;</span><br><span class="line">        LocalDateTime ldt4 = (LocalDateTime) l;</span><br><span class="line">        DayOfWeek dow = ldt4.getDayOfWeek();</span><br><span class="line">        <span class="comment">//周五加3天，周六加2天，周日加一天</span></span><br><span class="line">        <span class="keyword">if</span>(dow.equals(DayOfWeek.FRIDAY))&#123;</span><br><span class="line">            <span class="keyword">return</span> ldt4.plusDays(<span class="number">3</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dow.equals(DayOfWeek.SATURDAY))&#123;</span><br><span class="line">            <span class="keyword">return</span> ldt4.plusDays(<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ldt4.plusDays(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(ldt5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-5-解析与格式化"><a href="#8-5-解析与格式化" class="headerlink" title="8-5.解析与格式化"></a>8-5.解析与格式化</h3><p>​    java.time.format.DateTimeFormatter 类：该类提供了三种格式化方法：</p><ul><li>预定义的标准格式</li><li>语言环境相关的格式</li><li>自定义的格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5. DateTimeFormatter : 解析和格式化日期或时间</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//提供的时间格式</span></span><br><span class="line">    <span class="comment">//DateTimeFormatter dtf = DateTimeFormatter.ISO_LOCAL_DATE;</span></span><br><span class="line">    <span class="comment">//自定义时间格式</span></span><br><span class="line">    DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日 HH:mm:ss E"</span>);</span><br><span class="line">    LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">    String strDate = ldt.format(dtf);</span><br><span class="line">    System.out.println(strDate);</span><br><span class="line">    <span class="comment">//将字符串转换为时间</span></span><br><span class="line">    LocalDateTime newLdt = ldt.parse(strDate, dtf);</span><br><span class="line">    System.out.println(newLdt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6-时区的处理"><a href="#8-6-时区的处理" class="headerlink" title="8-6.时区的处理"></a>8-6.时区的处理</h3><p>​    带时区的时间为分别为：ZonedDate、ZonedTime、ZonedDateTime</p><p>​    其中每个时区都对应着 ID，地区ID都为 “{区域}/{城市}”的格式</p><p>​    例如 ：Asia/Shanghai 等</p><ul><li>ZoneId：该类中包含了所有的时区信息<ul><li>getAvailableZoneIds() : 可以获取所有时区时区信息</li><li>of(id) : 用指定的时区信息获取 ZoneId 对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.ZonedDate、ZonedTime、ZonedDateTime ： 带时区的时间或日期</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//指定时区Asia/Shanghai</span></span><br><span class="line">    LocalDateTime ldt = LocalDateTime.now(ZoneId.of(<span class="string">"Asia/Shanghai"</span>));</span><br><span class="line">    System.out.println(ldt);</span><br><span class="line">    <span class="comment">//指定时区US/Pacific</span></span><br><span class="line">    ZonedDateTime zdt = ZonedDateTime.now(ZoneId.of(<span class="string">"US/Pacific"</span>));</span><br><span class="line">    System.out.println(zdt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取所有时区</span></span><br><span class="line">    Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();</span><br><span class="line">    set.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-7-与传统日期处理的转换"><a href="#8-7-与传统日期处理的转换" class="headerlink" title="8-7.与传统日期处理的转换"></a>8-7.与传统日期处理的转换</h3><p><img src="../images/java8%E6%96%B0%E7%89%B9%E6%80%A7/16.png" alt="16"></p><h2 id="9-重复注解与类型注解"><a href="#9-重复注解与类型注解" class="headerlink" title="9.重复注解与类型注解"></a>9.重复注解与类型注解</h2><p>​    Java 8对注解处理：可重复的注解及可用于类型的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型注解 TYPE_PARAMETER</span></span><br><span class="line"><span class="meta">@Repeatable</span>(MyAnnotations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Target</span>(</span>&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "atguigu"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotations &#123;</span><br><span class="line">    MyAnnotation[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  重复注解与类型注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;TestAnnotation&gt; clazz=TestAnnotation<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Method m1=clazz.getMethod(<span class="string">"show"</span>);</span><br><span class="line">        MyAnnotation[] max=m1.getAnnotationsByType(MyAnnotation<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (MyAnnotation myAnnotation : max) &#123;</span><br><span class="line">            System.out.println(myAnnotation.value());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span>(<span class="string">"Hello"</span>)</span><br><span class="line">    <span class="meta">@MyAnnotation</span>(<span class="string">"World"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span>(<span class="string">"Hello"</span>)</span><br><span class="line">    <span class="meta">@MyAnnotation</span>(<span class="string">"World"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">(@MyAnnotation(<span class="string">"abd"</span>)</span> String str)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    关于java8的新特性&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://linhuide.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA8" scheme="https://linhuide.github.io/tags/JAVA8/"/>
    
  </entry>
  
  <entry>
    <title>全部面试笔记-2</title>
    <link href="https://linhuide.github.io/post/c0e5897b.html"/>
    <id>https://linhuide.github.io/post/c0e5897b.html</id>
    <published>2020-03-25T12:21:44.000Z</published>
    <updated>2020-03-25T14:22:06.803Z</updated>
    
    <content type="html"><![CDATA[<p>​    Java面试的笔记-2，全面回忆</p><a id="more"></a><h1 id="4-前端部分"><a href="#4-前端部分" class="headerlink" title="4.前端部分"></a>4.前端部分</h1><h2 id="4-1-html-css-javascript在网页开发中的定位"><a href="#4-1-html-css-javascript在网页开发中的定位" class="headerlink" title="4-1.html,css,javascript在网页开发中的定位?"></a>4-1.html,css,javascript在网页开发中的定位?</h2><p>HTML 超文本标记语言 定义网页的结构</p><p>CSS 层叠样式表，用来美化页面</p><p>JavaScript主要用来验证表单，做动态交互(其中ajax)</p><h2 id="4-2-Ajax"><a href="#4-2-Ajax" class="headerlink" title="4-2.Ajax?"></a>4-2.Ajax?</h2><p>​    什么是Ajax? </p><p>​        异步的javascript和xml</p><p>​    作用是什么？</p><p>​        通过AJAX与服务器进行数据交换，AJAX可以使网页实现布局更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><p>​    怎么来实现Ajax的XmlHttpRequest对象，使用这个对象可以异步向服务器发送请求，获取获取响应，完成局部更新。Open send responseText/responseXML 局部响应。</p><p>​    使用场景：登陆失败时不跳转页面，注册时提示用户名是否存在，二级联动等等使用场景</p><h2 id="4-3-js和jQuery的关系"><a href="#4-3-js和jQuery的关系" class="headerlink" title="4-3.js和jQuery的关系?"></a>4-3.js和jQuery的关系?</h2><p>​    jQuery是一个js框架，封装了js的属性和方法，让用户使用起来更加便利，并且增强了js的功能.</p><p>​    使用原生js是要处理很多兼容性的问题(注册事件等)，由jQuery封装了底层，就不用处理兼容性问题。</p><p>​    原生的js的dom和事件绑定和Ajax等操作非常麻烦，jQuery封装以后操作非常方便。</p><h2 id="4-4-jQuery的常用选择器？"><a href="#4-4-jQuery的常用选择器？" class="headerlink" title="4-4.jQuery的常用选择器？"></a>4-4.jQuery的常用选择器？</h2><ul><li><p>ID选择器   通过ID获取一个元素</p></li><li><p>Class选择器 通过类(css)获取元素</p></li><li><p>标签选择器 通过标签获取元素</p></li><li><p>通用选择器(*) 获取所以的元素</p><p>​    div.myCls  获取有myCls这个类的div</p></li><li><p>层次选择器</p><p>​     儿子选择器 &gt; 获取下面的子元素</p><p>​     后代选择器 空格 获取下面后代，包括儿子、孙子等后代</p></li><li><p>属性选择器</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Tag[attrName=’test’] </span><br><span class="line">获取有属性名为xxxx并且属性的值为test的所有xxx标签</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>/&gt;</span> 吃饭<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>/&gt;</span> 睡觉<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">Input[name=’hobby’]</span><br><span class="line">表示获取属性名为name并且name属性值为hobby的的所有input标签元素</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="4-5-jQuery的页面加载完毕事件？"><a href="#4-5-jQuery的页面加载完毕事件？" class="headerlink" title="4-5.jQuery的页面加载完毕事件？"></a>4-5.jQuery的页面加载完毕事件？</h2><p>​    需要获取元素，但是必须等到该元素被加载完成后才能获取。我们可以把js代码放到该元素的后面，但是这样就会造成js在我们的body中存在不好管理。所有页面加载完毕后所有的元素当然已经加载完毕。一般获取元素做操作都要在页面加载完毕后操作。</p><table><thead><tr><th>$(document).ready(function(){});</th><th>$(function(){});</th></tr></thead><tbody><tr><td>$(document)把原生的document这个dom对象转换为jQuery对象，转换完成后才能调用ready方法</td><td>当页面加载完毕后执行里面的函数,这一种相对简单，用得最多。</td></tr><tr><td>ready(fn),表示的是页面结构被加载完毕后执行传入函数fn</td><td></td></tr></tbody></table><p><strong>window.onload的区别</strong></p><p>​    1、jQuery中的页面加载完毕事件，表示的是页面结构被加载完毕。</p><p>​    2、window.onload 表示的是页面被加载完毕。</p><p>​    <strong>onload</strong>必须等等页面中的图片、声音、图像等远程资源被加载完毕后才调用</p><p>​    <strong>jQuery</strong>中只需要页面结构被加载完毕。</p><h2 id="4-6-Jquery的Ajax和原生Js实现Ajax有什么关系？"><a href="#4-6-Jquery的Ajax和原生Js实现Ajax有什么关系？" class="headerlink" title="4-6.Jquery的Ajax和原生Js实现Ajax有什么关系？"></a>4-6.Jquery的Ajax和原生Js实现Ajax有什么关系？</h2><p>​    jQuery中的Ajax也是通过原生的js封装的。封装完成后让我们使用起来更加便利，不用考虑底层实现或兼容性等处理。</p><p>​    如果采用原生js实现Ajax是非常麻烦的，并且每次都是一样的。如果我们不使用jQuery我们也要封装Ajax对象的方法和属性。</p><p>​    有像jQuery这些已经封装完成，并经过很多企业实际的框架，比较可靠并且开源。我们就不需要封装，直接使用成熟的框架(jQuery)即可.</p><h2 id="4-7-html5"><a href="#4-7-html5" class="headerlink" title="4-7.html5?"></a>4-7.html5?</h2><p>​    Html5是最新版本的html,是在原来html4的基础上增强了一些标签。</p><p>​    Html增加一些像画板、声音、视频、web存储等高级功能。但是html5有一个不好的地方，那就是html5太强调语义了，导致开发中都不知道要选择那个标签。</p><p>​    在做页面布局是，无论头部、主题、导航等模块都使用div来表示，但是html5的规范，需要使用不同的标签来表示。(header footer等)</p><h2 id="4-8-css3"><a href="#4-8-css3" class="headerlink" title="4-8.css3?"></a>4-8.css3?</h2><p>Css3是最新版本的css,是对原理css2的功能增强。</p><p>Css3中提供一些原来css2中实现起来比较困难或者不能实现的功能。</p><p>​     1、盒子圆角边框</p><p>​     2、盒子和文字的阴影</p><p>​     3、渐变</p><p>​     4、转换 移动、缩放、旋转等</p><p>​     5、过渡、动画都可以使用动画。</p><p>​     6、可以使用媒体查询实现响应式网站。</p><p>Css3最大缺点就是要根据不同的浏览器处理兼容性。对应有一些处理兼容性的工具。不用担心.</p><h2 id="4-9-bootstrap是什么？"><a href="#4-9-bootstrap是什么？" class="headerlink" title="4-9.bootstrap是什么？"></a>4-9.bootstrap是什么？</h2><p>​    BootStrap是一个移动设备优先的UI框架。我们可以不用谢任何css,js代码就能实现比较漂亮的有交互性的页面。我们程序员对页面的编写是有硬伤的，所有要自己写页面的话就要使用类似于bootstrap这样的UI框架。</p><h1 id="5-后端部分"><a href="#5-后端部分" class="headerlink" title="5.后端部分"></a>5.后端部分</h1><h2 id="5-1-什么是框架"><a href="#5-1-什么是框架" class="headerlink" title="5-1.什么是框架?"></a>5-1.什么是框架?</h2><p>​    <strong>框架</strong>（Framework）是一个框子——指其约束性，也是一个架子——指其支撑性。</p><p>​    IT语境中的框架，特指为解决一个开放性问题而设计的具有一定约束性的支撑结构。在此结构上可以根据具体问题扩展、安插更多的组成部分，从而更迅速和方便地构建完整的解决问题的方案。</p><p>​    1）框架本身一般不完整到可以解决特定问题,但是可以帮助您快速解决特定问题；</p><p>​    2）框架天生就是为扩展而设计的；</p><p>​    3）框架里面可以为后续扩展的组件提供很多辅助性、支撑性的方便易用的实用工具（utilities），也就是说框架时常配套了一些帮助解决某类问题的库（libraries）或工具（tools）。</p><p>​    java中就是一系列的jar包，其本质就是对jdk功能的扩展.</p><h2 id="5-2-MVC模式"><a href="#5-2-MVC模式" class="headerlink" title="5-2. MVC模式"></a>5-2. MVC模式</h2><p>​    <strong>MVC</strong>全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写</p><p>​    一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。</p><p>​    最简单的、最经典就是Jsp(view) +Servlet(controller) + JavaBean(model)</p><p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B0/6.png" alt="6"></p><p>​    1、当控制器收到来自用户的请求</p><p>​    2、控制器调用JavaBean完成业务</p><p>​    3、完成业务后通过控制器跳转JSP页面的方式给用户反馈信息</p><p>​    4、Jsp个 用户做出响应。</p><h2 id="5-3-MVC框架"><a href="#5-3-MVC框架" class="headerlink" title="5-3.MVC框架"></a>5-3.MVC框架</h2><p>​    是为了解决传统MVC模式(Jsp + Servlet + JavaBean)的一些问题而出现的框架。</p><p><strong>传统MVC模式问题</strong></p><p>​    1、所有的Servlet和Servlet映射都要配置在web.xml中，如果项目太大，web.xml就太庞大，并且不能实现模块化管理。</p><p>​    2、Servlet的主要功能就是接受参数、调用逻辑、跳转页面，比如像其他字符编码、文件上传等功能也要写在Servlet中，不能让Servlet主要功能而需要做处理一下特例。</p><p>​    3、接受参数比较麻烦(String name = request.getParameter(“name”),User user=new User user.setName(name))，不能通过model接收，只能单个接收，接收完成后转换封装model.</p><p>​    4、跳转页面方式比较单一(forword,redirect),并且当我的页面名称发生改变时需要修改Servlet源代码.</p><h2 id="5-4-SpringMVC的执行流程？"><a href="#5-4-SpringMVC的执行流程？" class="headerlink" title="5-4.SpringMVC的执行流程？"></a>5-4.SpringMVC的执行流程？</h2><ol><li><p>用户向服务器发送请求，请求被Spring 前端控制Servelt DispatcherServlet捕获；</p></li><li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；</p></li><li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。（<strong>附注</strong>：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）</p></li><li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p></li><li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象；</p></li><li><p>根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet ；</p></li><li><p>ViewResolver 结合Model和View，来渲染视图</p></li><li><p>将渲染结果返回给客户端。</p></li></ol><p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B0/7.png" alt="7"></p><p>​    HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>​      数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>​      数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>​      数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><p><strong>面试：</strong></p><p>1、 用户向服务器发送请求，请求被Spring 前端控制Servelt DispatcherServlet捕获(捕获)</p><p>2、 DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；(查找handler)</p><p>3、 DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。 提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller), Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象(执行handler)</p><p>4、DispatcherServlet 根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver) (选择ViewResolver)</p><p>5、通过ViewResolver 结合Model和View，来渲染视图,DispatcherServlet 将渲染结果返回给客户端。（渲染返回）</p><p><strong>快速记忆技巧：</strong></p><p>​    核心控制器捕获请求、查找Handler、执行Handler、选择ViewResolver,通过ViewResolver渲染视图并返回</p><h2 id="5-5-struts2和springMVC有什么不同？"><a href="#5-5-struts2和springMVC有什么不同？" class="headerlink" title="5-5.struts2和springMVC有什么不同？"></a>5-5.struts2和springMVC有什么不同？</h2><p>对SpringMvc和Struts2进行各方面的比较:</p><ol><li><p>核 心控制器（前端控制器、预处理控制器）：对于使用过mvc框架的人来说这个词应该不会陌生，核心控制器的主要用途是处理所有的请求，然后对那些特殊的请求 （控制器）统一的进行处理(字符编码、文件上传、参数接受、异常处理等等),spring mvc核心控制器是Servlet，而Struts2是Filter。</p></li><li><p>控制器实例：Spring Mvc会比Struts快一些（理论上）。Spring Mvc是基于方法设计，而Sturts是基于对象，每次发一次请求都会实例一个action，每个action都会被注入 属性，而Spring更像Servlet一样，只有一个实例，每次请求执行对应的方法即可(注意：由于是单例实例，所以应当避免全局变量的修改，这样会产生线程安全问题)。</p></li><li><p>管理方式：大部分的公司的核心架构中，就会使用到spring,而spring mvc又是spring中的一个模块，所以spring对于spring mvc的控制器管理更加简单方便，而且提供了全 注解方式进行管理，各种功能的注解都比较全面，使用简单，而struts2需要采用XML很多的配置参数来管理（虽然也可以采用注解，但是几乎没有公司那 样使用）。</p></li><li><p>参数传递：Struts2中自身提供多种参数接受，其实都是通过（ValueStack）进行传递和赋值，而SpringMvc是通过方法的参数进行接收。</p></li><li><p>学习难度：Struts更加很多新的技术点，比如拦截器、值栈及OGNL表达式，学习成本较高，springmvc 比较简单，很较少的时间都能上手。</p></li><li><p>intercepter 的实现机制：struts有以自己的interceptor机制，spring mvc用的是独立的AOP方式。这样导致struts的配置文件量还是比spring mvc大，虽然struts的配置能继承，所以我觉得论使用上来讲，spring mvc使用更加简洁，开发效率Spring MVC确实比struts2高。</p></li><li><p>spring mvc是方法级别的拦截，一个方法对应一个request上下文，而方法同时又跟一个url对应，所以说从架构本身上spring3 mvc就容易实现restful url。struts2是类级别的拦截，一个类对应一个request上下文；实现restful url要费劲，因为struts2 action的一个方法可以对应一个url；而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了。</p></li><li><p>spring3 mvc的方法之间基本上独立的，独享request response数据，请求数据通过参数获取，处理结果通过ModelMap交回给框架方法之间不共享变量，而struts2搞的就比较乱，虽然方法之间 也是独立的，但其所有Action变量是共享的，这不会影响程序运行，却给我们编码，读程序时带来麻烦。</p></li><li><p>spring mvc处理ajax请求,直接通过返回数据，方法中使用注解@ResponseBody，spring mvc自动帮我们对象转换为JSON数据。而struts2是通过插件的方式进行处理</p></li></ol><p>​    在SpringMVC流行起来之前，Struts2在MVC框架中占核心地位，随着SpringMVC的出现，SpringMVC慢慢的取代struts2,但是很多企业都是原来搭建的框架，使用Struts2较多。</p><h2 id="5-6-Spring中的两大核心？"><a href="#5-6-Spring中的两大核心？" class="headerlink" title="5-6.Spring中的两大核心？"></a>5-6.Spring中的两大核心？</h2><p>​    Spring是J2EE应用程序框架，是轻量级的IoC和AOP的容器框架(相对于重量级的EJB)，主要是针对javaBean的生命周期进行管理的轻量级容器，可以单独使用，也可以和Struts框架，ibatis框架等组合使用。</p><ol><li>IOC(Inversion of Control )或DI(Dependency Injection)：<strong>控制权反转</strong></li></ol><p>​          原来：我的Service需要调用DAO，Service就需要创建DAO</p><p>​          Spring:Spring发现你Service依赖于dao,就给你注入.</p><p>​       核心原理：就是配置文件+反射(工厂也可以)+容器(map)  </p><p>2、AOP：<strong>面向切面编程</strong></p><p>​       核心原理：使用动态代理的设计模式在执行方法前后或出现异常做加入相关逻辑。</p><p>​      我们主要使用AOP来做：</p><p>​      1、事务处理</p><p>​      2、权限判断</p><p>​      3、日志</p><p>​      4、….</p><h2 id="5-7-AOP是什么？你都拿它做什么？"><a href="#5-7-AOP是什么？你都拿它做什么？" class="headerlink" title="5-7.AOP是什么？你都拿它做什么？"></a>5-7.AOP是什么？你都拿它做什么？</h2><p>AOP：<strong>面向切面编程</strong></p><p>​       核心原理：使用动态代理的设计模式在执行方法前后或出现异常做加入相关逻辑。</p><p>​      我们主要使用AOP来做：</p><p>​      1、事务处理：执行方法前，开启事务、执行完成后关闭事务、出现异常后回滚事务</p><p>​      2、权限判断：在执行方法前，判断是否具有权限</p><p>​      3、日志：在执行前进行日志处理</p><p>​      4、….</p><h2 id="5-8-Spring的事务传播特性"><a href="#5-8-Spring的事务传播特性" class="headerlink" title="5-8.Spring的事务传播特性"></a>5-8.Spring的事务传播特性</h2><ol><li><p>PROPAGATION_REQUIRED：如果存在一个事务，则支持当前事务。如果没有事务则开启</p></li><li><p>PROPAGATION_SUPPORTS：如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行</p></li><li><p>PROPAGATION_MANDATORY：如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异常。</p></li><li><p>PROPAGATION_REQUIRES_NEW：总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起。</p></li><li><p>PROPAGATION_NOT_SUPPORTED：总是非事务地执行，并挂起任何存在的事务。</p></li><li><p>PROPAGATION_NEVER： 总是非事务地执行，如果存在一个活动事务，则抛出异常</p></li><li><p>PROPAGATION_NESTED：如果一个活动的事务存在，则运行在一个嵌套的事务中. 如果没有活动事务, 则按TransactionDefinition.PROPAGATION_REQUIRED属性执行</p></li></ol><p>Required： 需要：如果存在一个事务，则支持当前事务。如果没有事务则开启</p><p>Supports： 支持：如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行</p><p>Mandatory： 必要的：如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异常。</p><p>required_new： 总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起。</p><p>Not_support： 总是非事务地执行，并挂起任何存在的事务。</p><p>Never： 绝不：总是非事务地执行，如果存在一个活动事务，则抛出异常</p><p>Nested： 嵌套的：如果有就嵌套、没有就开启事务</p><h2 id="5-9-Spring事务的隔离级别"><a href="#5-9-Spring事务的隔离级别" class="headerlink" title="5-9.Spring事务的隔离级别"></a>5-9.Spring事务的隔离级别</h2><ol><li><p>ISOLATION_DEFAULT： 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别。    另外四个与JDBC的隔离级别相对应</p></li><li><p>ISOLATION_READ_UNCOMMITTED： 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。    这种隔离级别会产生脏读，不可重复读和幻像读。</p></li><li><p>ISOLATION_READ_COMMITTED： 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据</p></li><li><p>ISOLATION_REPEATABLE_READ： 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。</p></li><li><p>ISOLATION_SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读。</p></li></ol><p><strong>其中的一些概念的说明：</strong></p><ul><li><strong>脏读:</strong> 指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据， 那么另外一 个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。</li><li><strong>不可重复读:</strong> 指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。 那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</li><li><strong>幻觉读:</strong> 指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及 到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</li></ul><h2 id="5-10-什么是ORM"><a href="#5-10-什么是ORM" class="headerlink" title="5-10.什么是ORM?"></a>5-10.什么是ORM?</h2><p>​    <strong>对象关系映射</strong>（Object Relational Mapping，简称ORM）模式是一种为了解决面向<strong>对象</strong>与<strong>关系</strong>数据库存在的互不匹配的现象的技术。</p><p>​    简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</p><p>​    那么，到底如何实现持久化呢？</p><p>​    一种简单的方案是采用硬编码方式(jdbc操作sql方式)，为每一种可能的数据库访问操作提供单独的方法。</p><p>这种方案存在以下不足： </p><p>​    1.持久化层缺乏弹性。一旦出现业务需求的变更，就必须修改持久化层的接口 </p><p>​    2.持久化层同时与域模型与关系数据库模型绑定，不管域模型还是关系数据库模型发生变化，都要修改持久化曾的相关程序代码，增加了软件的维护难度。 </p><p>​    ORM提供了实现持久化层的另一种模式，它采用映射元数据来描述对象关系的映射，使得ORM中间件能在任何一个应用的业务逻辑层和数据库层之间充当桥梁。</p><p>​    Java典型的ORM框架有:Hibernate、mybatis、speedframework。</p><p>   ORM的方法论基于三个核心原则： </p><p>　　   简单：以最基本的形式建模数据。 </p><p>　　   传达性：数据库结构被任何人都能理解的语言文档化。 </p><p>　　   精确性：基于数据模型创建正确标准化了的结构</p><h2 id="5-11-mybatis与Hibernate有什么不同"><a href="#5-11-mybatis与Hibernate有什么不同" class="headerlink" title="5-11.mybatis与Hibernate有什么不同?"></a>5-11.mybatis与Hibernate有什么不同?</h2><p>相同点：</p><p>​    都是java中orm框架、屏蔽jdbc api的底层访问细节，使用我们不用与jdbc api打交道，就可以完成对数据库的持久化操作。</p><p>​    jdbc api编程流程固定，还将sql语句与java代码混杂在了一起，经常需要拼凑sql语句，细节很繁琐。</p><p>mybatis的好处：</p><ul><li>屏蔽jdbc api的底层访问细节</li><li>将sql语句与java代码进行分离;提供了将结果集自动封装称为实体对象和对象的集合的功能.queryForList返回对象集合，用queryForObject返回单个对象</li><li>提供了自动将实体对象的属性传递给sql语句的参数。</li></ul><p> Hibername的好处：</p><ul><li>Hibernate是一个全自动的orm映射工具，它可以自动生成sql语句，并执行并返回java结果。</li></ul><p>不同点：</p><p>​    1、hibernate要比mybatis功能强大很多。因为hibernate自动生成sql语句。</p><p>​    2、mybatis需要我们自己在xml配置文件中写sql语句，hibernate我们无法直接控制该语句，我们就无法去写特定的高效率的sql。对于一些不太复杂的sql查询，hibernate可以很好帮我们完成，但是，对于特别复杂的查询，hibernate就很难适应了，这时候用mybatis就是不错的选择，因为mybatis还是由我们自己写sql语句。</p><p>​    3、mybatis可以出来复杂语句，而hibernate不能。</p><p>​    4、mybatis要比hibernate简单的多。mybatis是面向sql的，不同考虑对象间一些复杂的映射关系。</p><h1 id="6-其他方面（待续…）"><a href="#6-其他方面（待续…）" class="headerlink" title="6.其他方面（待续…）"></a>6.其他方面（待续…）</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    Java面试的笔记-2，全面回忆&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="JAVA" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/JAVA/"/>
    
    
      <category term="Java面试" scheme="https://linhuide.github.io/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>全部面试笔记-1</title>
    <link href="https://linhuide.github.io/post/448efa24.html"/>
    <id>https://linhuide.github.io/post/448efa24.html</id>
    <published>2020-03-21T06:26:12.000Z</published>
    <updated>2020-03-25T14:23:04.344Z</updated>
    
    <content type="html"><![CDATA[<p>​    Java面试的笔记，全面回忆</p><a id="more"></a><h1 id="1-java基础"><a href="#1-java基础" class="headerlink" title="1.java基础"></a>1.java基础</h1><h2 id="1-1-java的跨平台原理"><a href="#1-1-java的跨平台原理" class="headerlink" title="1-1.java的跨平台原理"></a>1-1.java的跨平台原理</h2><p>​    由于各操作系统支持的指令集，不是完全一致。不同的操作系统上要执行不同程序代码，但相同代码会使程序执行不了。所以，java开发了适用于不同操作系统及位数的java虚拟机(jvm)来屏蔽各个系统之间的差异，提供统一的接口(java API)。</p><p>​    对于java开发者而言，只需要在不同系统上安装对应不同的虚拟机。只要java程序遵循java规范，可以在所有操作系统上运行java程序</p><p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B0/1.png" alt="1"></p><h2 id="1-2-搭建java开发环境的步骤"><a href="#1-2-搭建java开发环境的步骤" class="headerlink" title="1-2.搭建java开发环境的步骤"></a>1-2.搭建java开发环境的步骤</h2><p>​    1、适用于我们开发环境的jdk</p><p>​    2、对应开发环境eclipse或idea</p><p>​    3、还需要web服务器(tomcat)</p><h2 id="1-3-int占几个字节"><a href="#1-3-int占几个字节" class="headerlink" title="1-3.int占几个字节"></a>1-3.int占几个字节</h2><p>​    java有8个基本数据类型：byte，shot，int，long，float，double，char，boolean</p><p>byte：8位    shot：16位    int：32位，占4个字节    </p><p>long：64位    float：32位    double：64位    </p><p>char：16位    boolean：1位    </p><h2 id="1-4-面向对象的特征有哪些方面"><a href="#1-4-面向对象的特征有哪些方面" class="headerlink" title="1-4.面向对象的特征有哪些方面"></a>1-4.面向对象的特征有哪些方面</h2><p>​    四大基本特征：封装，抽象，继承，多态</p><ul><li>封装：将对象封装成一个高度自治和相对封闭的个体，对象状态（属性由这个对象自己的行为（方法）来读取和改变。</li><li>抽象：做出一些事物的相似和共性之处，归为一个类。（把现实生活中的对象，抽象为类）</li><li>继承：在一个已经存在的类的基础之上进行，将其定义的内容作为自己的，可以加入若干新内容，或修改原来的方法，符合需求。</li><li>多态：<ul><li>程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定。</li><li>即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</li><li>引用变量所指向的具体实例对象的方法，也就是内存里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。 </li></ul></li></ul><h2 id="1-5-基本数据类型，为什么还需要包装类型"><a href="#1-5-基本数据类型，为什么还需要包装类型" class="headerlink" title="1-5.基本数据类型，为什么还需要包装类型"></a>1-5.基本数据类型，为什么还需要包装类型</h2><p>​    每一个基本数据类型会对于一个包装类型：boolean–&gt;Boolean    int–&gt;Integer</p><ul><li>基本数据类型，包装类型–&gt;装箱和拆箱</li></ul><p>​    装箱：把基本的数据类型转换成对应的包装类型</p><p>​        Integer i = 1–&gt;Integer .valueOf(1)</p><p>​        自动装箱，实际上在编译时会调用Integer .valueOf方法来装箱</p><p>​    拆箱：把包装类型转换为基本数据类型.基本数据类型</p><p>​        Integer i = 1;</p><p>​        int j = i–&gt;自动拆箱</p><p>​        int j = i.intValue()i–&gt;手动拆箱</p><p>​        自动拆箱：实际上会在编译调用intValue    （源码）</p><ul><li><p>Java是一个面向对象的语言，而基本的数据类型，不具备面向对象的特性</p><p>面向对象特性：null，max，min</p><p>例子：Integer和int分别表示Person这个类的ID，可以null，判断一下</p></li><li><p>包装类型：对象有缓存–&gt;Integer i=1、Integer j= 1、i ==j</p></li></ul><h2 id="1-6-和equals有什么区别"><a href="#1-6-和equals有什么区别" class="headerlink" title="1-6.==和equals有什么区别"></a>1-6.==和equals有什么区别</h2><p>​    ==，用来判断两个变量之间的的值是否相等。</p><p>​    变量就可以分为基本数据类型变量，引用类型。</p><p>​    如果是基本数据类型的变量直接比较值，而引用类型要比较对应的引用的内存的首地址。</p><p>​    equals 用来比较两个对象长得是否一样。</p><p>​    判断两个对象的某些特征是否一样。实际上就是调用对象的equals方法进行比较。</p><h2 id="1-7-String和StringBuilder的区别？StringBuffer和StringBuilder的区别"><a href="#1-7-String和StringBuilder的区别？StringBuffer和StringBuilder的区别" class="headerlink" title="1-7.String和StringBuilder的区别？StringBuffer和StringBuilder的区别?"></a>1-7.String和StringBuilder的区别？StringBuffer和StringBuilder的区别?</h2><p>​    String、StringBuillder、StringBuffer三个类是来表示和操作字符串：字符串就是多个字符的集合。</p><p>​    String是内容不可变的字符串。String底层使用了一个不可变的字符数组(final char[])</p><p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B0/2.png" alt="2"></p><p>​    StringBuillder、StringBuffer：是内容可以改变的字符串。StringBuillder、StringBuffer底层使用的可变的字符数组（没有使用final来修饰） </p><p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B0/3.png" alt="3"></p><p><strong>拼接字符串：</strong></p><p>​    String进行拼接：String c = “a”+”b”</p><p>​    StringBuilder或者StringBuffer ：</p><p>​        StringBuilder sb = new StringBuilder();    </p><p>​        sb.apend(“a”).apend(“b”)</p><p>​    拼接字符串不能使用String进行拼接，要使用StringBuilder或者StringBuffer</p><p><strong>区别：</strong></p><p>​    StringBuilder是线程不安全的，效率较高    而StringBuffer是线程安全的，效率较低。</p><h2 id="1-8-java中的集合"><a href="#1-8-java中的集合" class="headerlink" title="1-8.java中的集合?"></a>1-8.java中的集合?</h2><p>​    Java中的集合为两种：Conllection：value，Map：key–vale</p><p>Conllection：存储值有分为List 和Set</p><ul><li>List是有序的，可以重复的。</li><li>Set是无序的，不可以重复的。根据equals和hashcode判断，也就是如果一个对象要存储在Set中，必须重写equals和hashCode方法。</li></ul><p>map：存储key-value</p><h2 id="1-9-ArrayList和LinkedList的区别"><a href="#1-9-ArrayList和LinkedList的区别" class="headerlink" title="1-9.ArrayList和LinkedList的区别?"></a>1-9.ArrayList和LinkedList的区别?</h2><ul><li><p>ArrayList底层使用时数组。LinkedList使用的是链表。</p></li><li><p>数组查询具有所有查询特定元素比较快，而插入和删除和修改比较慢(数组在内存中是一块连续的内存，如果插入或删除是需要移动内存)。</p></li><li><p>链表不要求内存是连续的，在当前元素中存放下一个或上一个元素的地址。查询时需要从头部开始，一个一个的找。所以查询效率低。插入时不需要移动内存，只需改变引用指向即可。所以插入或者删除的效率高。</p></li></ul><p><strong>区别：</strong></p><p>​      ArrayList使用在查询比较多，但是插入和删除比较少的情况</p><p>​      而LinkedList使用在查询比较少而插入和删除比较多的情况。</p><h2 id="1-10-HashMap哈HashTable的区别-HashTable和ConcurrentHashMap的区别"><a href="#1-10-HashMap哈HashTable的区别-HashTable和ConcurrentHashMap的区别" class="headerlink" title="1-10.HashMap哈HashTable的区别?HashTable和ConcurrentHashMap的区别?"></a>1-10.HashMap哈HashTable的区别?HashTable和ConcurrentHashMap的区别?</h2><ul><li>HashMap和HasheTalbe都可以使用来存储key–value的数据。</li><li>HashMap是可以把null作为key或者value的，而HashTable是不可以的。</li><li>HashMap是线程不安全的，效率较高。而HashTalbe是线程安全的，效率较低。</li></ul><p><strong>提高：</strong></p><p>​    我想线程安全但是我又想效率高？</p><p>​        通过把整个Map分为N个Segment（类似HashTable），可以提供相同的线程安全，但是效率提升N倍，默认提升16倍。    </p><p>​    </p><h2 id="1-11-实现一个拷贝文件的工具类使用字节流还是字符流"><a href="#1-11-实现一个拷贝文件的工具类使用字节流还是字符流" class="headerlink" title="1-11.实现一个拷贝文件的工具类使用字节流还是字符流?"></a>1-11.实现一个拷贝文件的工具类使用字节流还是字符流?</h2><p>​    拷贝的文件不确定是只包含字符流，有可以能有字节流(图片、声音、图像等)，为考虑到通用性，要使用字节流。</p><h2 id="1-12-线程的几种实现方式-启动方式？区分方式？"><a href="#1-12-线程的几种实现方式-启动方式？区分方式？" class="headerlink" title="1-12.线程的几种实现方式?启动方式？区分方式？"></a>1-12.线程的几种实现方式?启动方式？区分方式？</h2><ol><li><p>实现方式</p><ul><li>通过继承Thread类实现一个线程</li><li>通过实现Runnable接口实现一个线程：继承扩展性不强，java总只支持单继承，如果一个类继承Thread就不能继承其他的类了。</li></ul></li><li><p>启动方式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread</span><br><span class="line"><span class="comment">//(继承了Thread的对象/实现了Runnable的对象)</span></span><br><span class="line">thread.setName(“设置一个线程名称”);</span><br><span class="line">thread.start();</span><br><span class="line"><span class="comment">//启动线程使用start方法，而启动了以后执行的是run方法。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>区分方式</li></ol><p>​        在一个系统中有很多线程，每个线程都会打印日志，我想区分是哪个线程打印的怎么办？</p><p>​     thread.setName(“设置一个线程名称”);</p><p>​    这是一种规范，在创建线程完成后，都需要设置名称。</p><h2 id="1-13-线程并发库"><a href="#1-13-线程并发库" class="headerlink" title="1-13.线程并发库?"></a>1-13.线程并发库?</h2><p>​    JDK5中增加了Doug Lea的并发库，这一引进给Java线程的管理和使用提供了强大的便利性。</p><p>​     java.util.current包中提供了对线程优化、管理的各项操作，使得线程的使用变得的心应手。该包提供了线程的运行，线程池的创建，线程生命周期的控制.</p><p>​    Java通过Executors提供四个静态方法创建四种线程池，分别为：</p><ul><li><p><strong>newCachedThreadPool</strong>创建一个<strong>可缓存</strong>线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p></li><li><p><strong>newFixedThreadPool</strong> 创建一个<strong>定长线</strong>程池，可控制线程最大并发数，超出的线程会在队列中等待。</p></li><li><p><strong>newScheduledThreadPool</strong> 创建一个<strong>定长线</strong>程池，支持定时及周期性任务执行。</p></li><li><p><strong>newSingleThreadExecutor</strong> 创建一个<strong>单线程化</strong>的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行</p></li></ul><h2 id="1-14-线程池的作用？"><a href="#1-14-线程池的作用？" class="headerlink" title="1-14.线程池的作用？"></a>1-14.线程池的作用？</h2><p>1、限定线程的个数，不会导致由于线程过多导致系统运行缓慢或崩溃</p><p>2、线程池不需要每次都去创建或销毁，节约了资源、</p><p>3、线程池不需要每次都去创建，响应时间更快。</p><h2 id="1-15-什么是设计模式？常用的设计模式有哪些？"><a href="#1-15-什么是设计模式？常用的设计模式有哪些？" class="headerlink" title="1-15.什么是设计模式？常用的设计模式有哪些？"></a>1-15.什么是设计模式？常用的设计模式有哪些？</h2><p>​    设计模式就是经过前人无数次的实践总结出的，设计过程中可以反复使用的、可以解决特定问题的设计方法。</p><p><strong>常用的设计模式：</strong></p><ul><li><p>单例(饱汉模式、饥汉模式)</p><ul><li>构造方法私有化，让出了自己类中能创建外其他地方都不能创建</li><li>在自己的类中创建一个单实例（饱汉模式是一出来就创建创建单实例，而饥汉模式需要的时候才创建）</li><li>提供一个方法获取该实例对象(创建时需要进行方法同步)</li></ul></li><li><p>工厂模式：Spring IOC就是使用了工厂模式.</p><ul><li>对象的创建交给一个工厂去创建。</li></ul></li><li><p>代理模式</p><ul><li>Spring AOP就是使用的动态代理。</li></ul></li></ul><h1 id="2-javaweb"><a href="#2-javaweb" class="headerlink" title="2.javaweb"></a>2.javaweb</h1><h2 id="2-1-http中get和post请求的区别"><a href="#2-1-http中get和post请求的区别" class="headerlink" title="2-1.http中get和post请求的区别?"></a>2-1.http中get和post请求的区别?</h2><p>​    GET和POST请求都是http的请求方式，用户通过不同的http的请求方式完成对资源（url）的不同操作。</p><p>​    GET，POST，PUT，DELETE就对应着对这个资源的查 ，改 ，增 ，删 4个操作，具体点来讲GET一般用于获取/查询资源信息，而POST一般用于更新资源信息</p><ul><li><p>Get请求提交的数据会在地址栏显示出来，而post请求不会再地址栏显示出来.</p><ul><li>GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接。</li><li>POST提交：把提交的数据放置在是HTTP包的包体中。 因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</li></ul></li><li><p>传输数据的大小</p><ul><li>Get请求由于浏览器对地址长度的限制而导致传输的数据有限制</li><li>POST请求不会因为地址长度限制而导致传输数据限制</li></ul></li><li><p>安全性</p><ul><li>POST的安全性要比GET的安全性高：由于数据是会在地址中呈现，所以可以通过历史记录找到密码等关键信息</li></ul></li></ul><h2 id="2-2-对servlet的理解？或者servlet是什么？"><a href="#2-2-对servlet的理解？或者servlet是什么？" class="headerlink" title="2-2.对servlet的理解？或者servlet是什么？"></a>2-2.对servlet的理解？或者servlet是什么？</h2><p>​    <strong>Servlet</strong>（Server Applet），全称<strong>Java Servlet</strong>， 是用Java编写的服务器端程序。而这些Sevlet都要实现Servlet这个借口。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。Servlet运行于支持Java的应用服务器中。</p><p>​    HttpServlet 重写doGet和doPost方法，或者你也可以重写service方法完成对get和post请求的响应。</p><h2 id="2-3-servlet的生命周期"><a href="#2-3-servlet的生命周期" class="headerlink" title="2-3.servlet的生命周期?"></a>2-3.servlet的生命周期?</h2><p>​    servlet有良好的生存期的定义，包括加载和实例化、初始化、处理请求以及服务结束。</p><p>​    这个生存期由javax.servlet.Servlet接口的init,service和destroy方法表达。</p><p>加载Servlet的class—-&gt;实例化Servlet—–&gt;调用Servlet的init完成初始化</p><p>—-&gt;响应请求（Servlet的service方法）—–&gt;Servlet容器关闭时(Servlet的destory方法)</p><ul><li>Servlet启动时，开始加载servlet生命周期开始。</li><li>Servlet被服务器实例化后，容器运行其init方法，请求到达时运行其service方法</li><li>service方法自动派遣运行与请求对应的doXXX方法（doGet，doPost）等。</li><li>当服务器决定将实例销毁的时候(服务器关闭)调用其destroy方法。</li></ul><h2 id="2-4-Servlet-API中forward-与redirect-的区别？"><a href="#2-4-Servlet-API中forward-与redirect-的区别？" class="headerlink" title="2-4.Servlet API中forward() 与redirect()的区别？"></a>2-4.Servlet API中forward() 与redirect()的区别？</h2><p>1、forward是服务器端的转向而redirect是客户端的跳转。</p><p>2、使用forward浏览器的地址不会发生改变。而redirect会发生改变。</p><p>3、Forward是一次请求中完成。而redirect是重新发起请求。</p><p>4、Forward是在服务器端完成，而不用客户端重新发起请求，效率较高。</p><h2 id="2-5-JSP和Servlet有哪些相同点和不同点"><a href="#2-5-JSP和Servlet有哪些相同点和不同点" class="headerlink" title="2-5.JSP和Servlet有哪些相同点和不同点?"></a>2-5.JSP和Servlet有哪些相同点和不同点?</h2><p>​    JSP是Servlet技术的扩展，所有的jsp文件都会被翻译为一个继承HttpServlet的类。也就是jsp最终也是一个Servlet.这个Servlet对外提供服务。</p><p>​    JSP是Servlet技术的扩展，所有的jsp文件都会被翻译为一个继承HttpServlet的类。也就是jsp最终也是一个Servlet.这个Servlet对外提供服务。</p><p>​    Servlet如果要实现html的功能，必须使用Writer输出对应的html，比较麻烦。</p><p>​    JSP的情况是Java和HTML，可以组合成一个扩展名为.jsp的文件，做界面展示比较方便而嵌入逻辑比较复杂。</p><p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B0/4.png" alt="4"></p><h2 id="2-6-jsp有哪些内置对象-作用分别是什么"><a href="#2-6-jsp有哪些内置对象-作用分别是什么" class="headerlink" title="2-6.jsp有哪些内置对象?作用分别是什么?"></a>2-6.jsp有哪些内置对象?作用分别是什么?</h2><p>9个内置的对象： </p><ul><li><p>request 用户端请求，此请求会包含来自GET/POST请求的参数 </p></li><li><p>response 网页传回用户端的回应 </p></li><li><p>pageContext 网页的属性是在这里管理 </p></li><li><p>session 与请求有关的会话期 </p></li><li><p>application servlet正在执行的内容 </p></li><li><p>out 用来传送回应的输出 </p></li><li><p>config servlet的构架部件 </p></li><li><p>page JSP网页本身 </p></li><li><p>exception 针对错误网页，未捕捉的例外 </p><p>四大作用域：pageContext 、request 、session 、application 可以通过jstl从四大作用域中取值.</p><p>Jsp传递值request、session 、application 、cookie也能传值</p></li></ul><h2 id="2-7-session和cookie的区别？你在项目中都有哪些地方使用了？"><a href="#2-7-session和cookie的区别？你在项目中都有哪些地方使用了？" class="headerlink" title="2-7.session和cookie的区别？你在项目中都有哪些地方使用了？"></a>2-7.session和cookie的区别？你在项目中都有哪些地方使用了？</h2><p>​    Session和cookie都是会话(Seesion)跟踪技术。</p><p>​    Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。</p><p>​    但是Session的实现依赖于Cookie,sessionId(session的唯一标识需要存放在客户端).</p><p><strong>区别：</strong></p><p>​    1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p><p>​    2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session。</p><p>​    3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能,考虑到减轻服务器性能方面，应当使用COOKIE。</p><p>​    4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p><p>​    5、建议：将登陆信息等重要信息存放为SESSION、 其他信息如果需要保留，可以放在COOKIE中，比如购物车</p><p>​    购物车最好使用cookie，但是cookie是可以在客户端禁用的，这时候我们要使用cookie+数据库的方式实现，当从cookie中不能取出数据时，就从数据库获取。</p><h2 id="2-8-MVC的各个部分都有那些技术来实现"><a href="#2-8-MVC的各个部分都有那些技术来实现" class="headerlink" title="2-8.MVC的各个部分都有那些技术来实现?"></a>2-8.MVC的各个部分都有那些技术来实现?</h2><ul><li><p>M(Model) 模型 javabean</p></li><li><p>V(View) 视图  html jsp volicity freemaker</p></li><li><p>C(Control) 控制器 Servlet,Action</p><p>Jsp+Servlet+javabean 最经典mvc模式,实际上就是model2的实现方式，就是把视图和逻辑隔离开来</p></li></ul><h1 id="3-数据库"><a href="#3-数据库" class="headerlink" title="3.数据库"></a>3.数据库</h1><h2 id="3-1-数据库的分类及常用的数据库"><a href="#3-1-数据库的分类及常用的数据库" class="headerlink" title="3-1.数据库的分类及常用的数据库"></a>3-1.数据库的分类及常用的数据库</h2><p>关系型数据库和非关系型数据库</p><ul><li>关系型：mysql oracle sqlserver等</li><li>非关系型：redis,memcache,mogodb,hadoop等</li></ul><h2 id="3-2-关系数据库三范式？"><a href="#3-2-关系数据库三范式？" class="headerlink" title="3-2.关系数据库三范式？"></a>3-2.关系数据库三范式？</h2><p>​    范式就是规范,就是关系型数据库在设计表时，要遵循的三个规范。</p><p>​    要想满足第二范式必须先满足第一范式，要满足第三范式必须先满足第二范式。</p><ul><li>第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。<strong>列数据的不可分割</strong></li></ul><ul><li>二范式（2NF）要求数据库表中的每个行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。(<strong>主键</strong>)</li></ul><ul><li>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。(<strong>外键</strong>)</li></ul><ul><li>反三范式，有的时候为了效率，可以设置重复或者可以推导出的字段：订单（总价）和订单项（单价）</li></ul><h2 id="3-3-事务四个基本特征或-ACID-特性"><a href="#3-3-事务四个基本特征或-ACID-特性" class="headerlink" title="3-3.事务四个基本特征或 ACID 特性"></a>3-3.事务四个基本特征或 ACID 特性</h2><p>​    事务是并发控制的单位，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位。</p><p>​    如：一个转账必须 A账号扣钱成功，B账号加钱成功，才算正真的转账成功</p><p>​    事务必须满足四大特征：原子性、一致性、隔离性、持久性/持续性</p><ul><li>原子性：表示事务内操作不可分割。要么都成功、要么都是失败.</li><li>一致性：要么都成功、要么都是失败.后面的失败了要对前面的操作进行回滚。</li><li>隔离性：一个事务开始后，不能后其他事务干扰。</li><li>持久性/持续性：表示事务开始了，就不能终止。</li></ul><h2 id="3-4-mysql数据库的默认的最大连接数？"><a href="#3-4-mysql数据库的默认的最大连接数？" class="headerlink" title="3-4.mysql数据库的默认的最大连接数？"></a>3-4.mysql数据库的默认的最大连接数？</h2><p>​    100 </p><p>​     为什么需要最大连接数？特定服务器上面的数据库只能支持一定数目同时连接，这时候我们一般都会设置最大连接数（最多同时服务多少连接）。在数据库安装时都会有一个默认的最大连接数为100</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_connections=100</span><br></pre></td></tr></table></figure><h2 id="3-5-msyql的分页？Oracle的分页？"><a href="#3-5-msyql的分页？Oracle的分页？" class="headerlink" title="3-5.msyql的分页？Oracle的分页？"></a>3-5.msyql的分页？Oracle的分页？</h2><p>​    Mysql是使用关键字limit来进行分页的：limit、offset、size 表示从多少索引去多少位.</p><p>​    Oracle的分页，大部分情况下，我们是记不住了。说思路，要使用三层嵌套查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql:</span><br><span class="line">String sql &#x3D; &quot;select * from students order by id limit &quot; + pageSize*(pageNumber-1) + &quot;,&quot; + pageSize;</span><br><span class="line"></span><br><span class="line">oracle:</span><br><span class="line">String sql &#x3D; &quot;select * from &quot; </span><br><span class="line">+  (select *,rownum rid from (select * from students order by postime desc) where rid&lt;&#x3D;&quot;</span><br><span class="line">+ pagesize*pagenumber + &quot;) as t&quot; + &quot;where t&gt;&quot; </span><br><span class="line">+ pageSize*(pageNumber-1);</span><br></pre></td></tr></table></figure><h2 id="3-6-数据库的触发器的使用场景？"><a href="#3-6-数据库的触发器的使用场景？" class="headerlink" title="3-6.数据库的触发器的使用场景？"></a>3-6.数据库的触发器的使用场景？</h2><p>​    触发器，需要有触发条件，当条件满足以后做什么操作。</p><p>​    就是在增加日志时做一个后触发，再向通知表中写入条目。因为触发器效率高，而UCH没有用触发器，效率和数据处理能力都很低。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">create table board1(id int primary key auto_increment,name varchar(50),articleCount int);</span><br><span class="line"></span><br><span class="line">create table article1(id int primary key auto_increment,title varchar(50),bid int references board1(id));</span><br><span class="line"></span><br><span class="line">delimiter |#把分割符;改成|</span><br><span class="line"></span><br><span class="line">create trigger insertArticle_Trigger after insert on article1 for each row begin</span><br><span class="line">    -&gt; update board1 set articleCount&#x3D;articleCount+1 where id&#x3D; NEW.bid;</span><br><span class="line">    -&gt; end;</span><br><span class="line">    -&gt; |</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">insert into board1 value (null,&#39;test&#39;,0);</span><br><span class="line"></span><br><span class="line">insert into article1 value(null,&#39;test&#39;,1);</span><br></pre></td></tr></table></figure><h2 id="3-7-数据库的存储过程的使用场景？"><a href="#3-7-数据库的存储过程的使用场景？" class="headerlink" title="3-7.数据库的存储过程的使用场景？"></a>3-7.数据库的存储过程的使用场景？</h2><p><strong>数据库存储过程具有如下优点：</strong></p><p>​    1、存储过程只在创建时进行编译，以后每次执行存储过程都不需再重新编译，而一般 SQL 语句每执行一次就编译一次，因此使用存储过程可以大大提高数据库执行速度。</p><p>​    2、通常，复杂的业务逻辑需要多条 SQL 语句。这些语句要分别地从客户机发送到服务器，当客户机和服务器之间的操作很多时，将产生大量的网络传输。如果将这些操作放在一个存储过程中，那么客户机和服务器之间的网络传输就会大大减少，降低了网络负载。</p><p>​    3、存储过程创建一次便可以重复使用，从而可以减少数据库开发人员的工作量。</p><p>​    4、安全性高，存储过程可以屏蔽对底层数据库对象的直接访问，使用 EXECUTE 权限调用存储过程，无需拥有访问底层数据库对象的显式权限。</p><p>​    正是由于存储过程的上述优点，目前常用的数据库都支持存储过程，例如 IBM DB2，Microsoft SQL Server，Oracle，Access 等，开源数据库系统 MySQL 也在 5.0 的时候实现了对存储过程的支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create procedure insert_Student (_name varchar(50),_age int ,out _id int)</span><br><span class="line">begin</span><br><span class="line">insert into student value(null,_name,_age);</span><br><span class="line">select max(stuId) into _id from student;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">call insert_Student(&#39;wfz&#39;,23,@id);</span><br><span class="line">select @id;</span><br></pre></td></tr></table></figure><h2 id="3-8-用jdbc怎么调用存储过程？"><a href="#3-8-用jdbc怎么调用存储过程？" class="headerlink" title="3-8.用jdbc怎么调用存储过程？"></a>3-8.用jdbc怎么调用存储过程？</h2><p>​    加载驱动    获取连接    设置参数    执行    释放连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Connection cn = <span class="keyword">null</span>;</span><br><span class="line">CallableStatement cstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//这里最好不要这么干，因为驱动名写死在程序中了</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//实际项目中，这里应用DataSource数据，如果用框架，</span></span><br><span class="line"><span class="comment">//这个数据源不需要我们编码创建，我们只需Datasource ds = context.lookup()</span></span><br><span class="line"><span class="comment">//cn = ds.getConnection();</span></span><br><span class="line">cn = DriverManager.getConnection(<span class="string">"jdbc:mysql:///test"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">cstmt = cn.prepareCall(<span class="string">"&#123;call insert_Student(?,?,?)&#125;"</span>);</span><br><span class="line">cstmt.registerOutParameter(<span class="number">3</span>,Types.INTEGER);</span><br><span class="line">cstmt.setString(<span class="number">1</span>, <span class="string">"wangwu"</span>);</span><br><span class="line">cstmt.setInt(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line">cstmt.execute();</span><br><span class="line"><span class="comment">//get第几个，不同的数据库不一样，建议不写</span></span><br><span class="line">System.out.println(cstmt.getString(<span class="number">3</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(cstmt != <span class="keyword">null</span>)</span><br><span class="line">cstmt.close();</span><br><span class="line"><span class="keyword">if</span>(cn != <span class="keyword">null</span>)</span><br><span class="line">cn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-对jdbc的理解？"><a href="#3-9-对jdbc的理解？" class="headerlink" title="3-9.对jdbc的理解？"></a>3-9.对jdbc的理解？</h2><p>​    Java database connection java：数据库连接</p><p>​    数据库管理系统(mysql oracle等)是很多，每个数据库管理系统支持的命令是不一样的。</p><p>​    Java只定义接口，让数据库厂商自己实现接口，对于我们者而言。只需要导入对应厂商开发的实现即可。然后以接口方式进行调用.(mysql + mysql驱动（实现）+jdbc)</p><p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B01/5.png" alt="5"></p><h2 id="3-10-一个简单的jdbc的程序。写一个访问oracle数据的jdbc程序"><a href="#3-10-一个简单的jdbc的程序。写一个访问oracle数据的jdbc程序" class="headerlink" title="3-10.一个简单的jdbc的程序。写一个访问oracle数据的jdbc程序?"></a>3-10.一个简单的jdbc的程序。写一个访问oracle数据的jdbc程序?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">加载驱动</span><br><span class="line">com.mysql.jdbc.Driver,oracle.jdbc.driver.OracleDriver</span><br><span class="line">获取连接</span><br><span class="line">DriverManager.getConnection(url,usernam,passord)</span><br><span class="line">设置参数</span><br><span class="line">Statement PreparedStatement cstmt.setXXX(index, value);</span><br><span class="line">执行   </span><br><span class="line">executeQuery executeUpdate</span><br><span class="line">释放连接</span><br><span class="line">是否连接要从小到大，必须放到finnaly</span><br></pre></td></tr></table></figure><h2 id="3-11-JDBC中的PreparedStatement相比Statement的好处"><a href="#3-11-JDBC中的PreparedStatement相比Statement的好处" class="headerlink" title="3-11.JDBC中的PreparedStatement相比Statement的好处"></a>3-11.JDBC中的PreparedStatement相比Statement的好处</h2><ol><li>PreparedStatement是预编译的，比Statement速度快 </li><li>代码的可读性和可维护性</li></ol><ol start="3"><li>安全性</li></ol><p>​    虽然用PreparedStatement来代替Statement会使代码多出几行,但这样的代码无论从可读性还是可维护性上来说.都比直接用Statement的代码高很多档次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">两种比较：</span><br><span class="line">stmt.executeUpdate(&quot;insert into tb_name (col1,col2,col2,col4) values (&#39;&quot;+var1+&quot;&#39;,&#39;&quot;+var2+&quot;&#39;,&quot;+var3+&quot;,&#39;&quot;+var4+&quot;&#39;)&quot;); </span><br><span class="line"></span><br><span class="line">perstmt &#x3D; con.prepareStatement(&quot;insert into tb_name (col1,col2,col2,col4) values (?,?,?,?)&quot;);</span><br><span class="line">perstmt.setString(1,var1);</span><br><span class="line">perstmt.setString(2,var2);</span><br><span class="line">perstmt.setString(3,var3);</span><br><span class="line">perstmt.setString(4,var4);</span><br><span class="line">perstmt.executeUpdate();</span><br></pre></td></tr></table></figure><p>​    PreparedStatement可以防止SQL注入攻击，而Statement却不能。比如说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String sql &#x3D; &quot;select * from tb_name where name&#x3D; &#39;&quot;+varname+&quot;&#39; and passwd&#x3D;&#39;&quot;+varpasswd+&quot;&#39;&quot;;</span><br><span class="line"></span><br><span class="line">如果我们把[&#39; or &#39;1&#39; &#x3D; &#39;1]作为varpasswd传入进来.用户名随意,看看会成为什么?</span><br><span class="line">select * from tb_name &#x3D; &#39;随意&#39; and passwd &#x3D; &#39;&#39; or &#39;1&#39; &#x3D; &#39;1&#39;;</span><br><span class="line"></span><br><span class="line">因为&#39;1&#39;&#x3D;&#39;1&#39;肯定成立，所以可以任何通过验证，更有甚者：</span><br><span class="line">把[&#39;;drop table tb_name;]作为varpasswd传入进来,则：</span><br><span class="line">select * from tb_name &#x3D; &#39;随意&#39; and passwd &#x3D; &#39;&#39;;drop table tb_name;</span><br></pre></td></tr></table></figure><p>​    有些数据库是不会让你成功的，但也有很多数据库就可以使这些语句得到执行。</p><p>​    而如果你使用预编译语句你传入的任何内容就不会和原来的语句发生任何匹配的关系，只要全使用预编译语句你就用不着对传入的数据做任何过虑。而如果使用普通的statement,有可能要对drop等做费尽心机的判断和过虑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    Java面试的笔记，全面回忆&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="JAVA" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/JAVA/"/>
    
    
      <category term="Java面试" scheme="https://linhuide.github.io/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>maven的使用</title>
    <link href="https://linhuide.github.io/post/c1734c25.html"/>
    <id>https://linhuide.github.io/post/c1734c25.html</id>
    <published>2020-03-21T05:20:11.000Z</published>
    <updated>2020-03-21T05:47:54.875Z</updated>
    
    <content type="html"><![CDATA[<p>​    这是Maven的基本使用方法</p><a id="more"></a><h2 id="1-基本信息"><a href="#1-基本信息" class="headerlink" title="1.基本信息"></a>1.基本信息</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    这是Maven的基本使用方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Maven" scheme="https://linhuide.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>博客的完善</title>
    <link href="https://linhuide.github.io/post/fc7e1d6d.html"/>
    <id>https://linhuide.github.io/post/fc7e1d6d.html</id>
    <published>2020-03-20T06:47:13.000Z</published>
    <updated>2020-03-21T05:08:32.697Z</updated>
    
    <content type="html"><![CDATA[<p>​    对博客的完善，用next主题，逐步完善功能</p><a id="more"></a><h2 id="1-主题的启用"><a href="#1-主题的启用" class="headerlink" title="1.主题的启用"></a>1.主题的启用</h2><h2 id="2-对博客改中文"><a href="#2-对博客改中文" class="headerlink" title="2.对博客改中文"></a>2.对博客改中文</h2><h2 id="3-增加标签页和分类页"><a href="#3-增加标签页和分类页" class="headerlink" title="3.增加标签页和分类页"></a>3.增加标签页和分类页</h2><h2 id="4-主题样式的改变"><a href="#4-主题样式的改变" class="headerlink" title="4.主题样式的改变"></a>4.主题样式的改变</h2><h2 id="5-更改头像和logo"><a href="#5-更改头像和logo" class="headerlink" title="5.更改头像和logo"></a>5.更改头像和logo</h2><h2 id="6-更改标题和作者"><a href="#6-更改标题和作者" class="headerlink" title="6.更改标题和作者"></a>6.更改标题和作者</h2><h2 id="7-建立一篇文章"><a href="#7-建立一篇文章" class="headerlink" title="7.建立一篇文章"></a>7.建立一篇文章</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post "XXXXX"</span><br></pre></td></tr></table></figure><h2 id="8-建立友情链接"><a href="#8-建立友情链接" class="headerlink" title="8.建立友情链接"></a>8.建立友情链接</h2><h2 id="9-启动侧边栏链接"><a href="#9-启动侧边栏链接" class="headerlink" title="9.启动侧边栏链接"></a>9.启动侧边栏链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;linhuide || github</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    对博客的完善，用next主题，逐步完善功能&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="博客" scheme="https://linhuide.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>git的使用</title>
    <link href="https://linhuide.github.io/post/2e742d51.html"/>
    <id>https://linhuide.github.io/post/2e742d51.html</id>
    <published>2020-03-20T04:28:24.000Z</published>
    <updated>2020-03-20T17:13:15.223Z</updated>
    
    <content type="html"><![CDATA[<p>​    这是Git的基本使用方法</p><a id="more"></a><h2 id="1-基本信息设置"><a href="#1-基本信息设置" class="headerlink" title="1.基本信息设置"></a>1.基本信息设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#39;XXXXX&#39;</span><br><span class="line">用户名字设置</span><br><span class="line">git config --global user.email &#39;XXXXX@qq.com&#39;</span><br><span class="line">用户邮箱设置</span><br></pre></td></tr></table></figure><h2 id="2-创建文件夹"><a href="#2-创建文件夹" class="headerlink" title="2.创建文件夹"></a>2.创建文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir XXXX</span><br></pre></td></tr></table></figure><h2 id="3-文件内初始化git"><a href="#3-文件内初始化git" class="headerlink" title="3.文件内初始化git"></a>3.文件内初始化git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd XXX</span><br><span class="line">进入文件夹路径</span><br><span class="line">git init</span><br><span class="line">初始化git</span><br></pre></td></tr></table></figure><h2 id="4-增加文件"><a href="#4-增加文件" class="headerlink" title="4.增加文件"></a>4.增加文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">查看状态</span><br><span class="line">git add XXX</span><br><span class="line">git status</span><br><span class="line">增加，查看状态</span><br><span class="line">git commit -m &#39;XXXXXXXXX&#39;</span><br><span class="line">git status</span><br><span class="line">提交，查看状态</span><br></pre></td></tr></table></figure><h2 id="5-修改文件"><a href="#5-修改文件" class="headerlink" title="5.修改文件"></a>5.修改文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">查看状态</span><br><span class="line">git add XXX</span><br><span class="line">git status</span><br><span class="line">增加，查看状态</span><br><span class="line">git commit -m &#39;XXXXXXXXX&#39;</span><br><span class="line">git status</span><br><span class="line">提交，查看状态</span><br></pre></td></tr></table></figure><h2 id="6-删除文件"><a href="#6-删除文件" class="headerlink" title="6.删除文件"></a>6.删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rm -f XXX（删除文件）</span><br><span class="line">删除文件</span><br><span class="line">git rm XXX</span><br><span class="line">git删除文件</span><br><span class="line">git commit -m &#39;XXXXX&#39;</span><br><span class="line">提交删除文件描述</span><br></pre></td></tr></table></figure><h2 id="7-远程访问仓库"><a href="#7-远程访问仓库" class="headerlink" title="7.远程访问仓库"></a>7.远程访问仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">先克隆github上面的仓库</span><br><span class="line">git clone XXXX</span><br><span class="line">克隆</span><br><span class="line">git add XXX</span><br><span class="line">增加</span><br><span class="line">git commit -m &#39;XXXXXXXXX&#39;</span><br><span class="line">提交描述</span><br><span class="line">git push</span><br><span class="line">提交到github上面</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    这是Git的基本使用方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="版本管理" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Git" scheme="https://linhuide.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>建立个人博客</title>
    <link href="https://linhuide.github.io/post/bae8e301.html"/>
    <id>https://linhuide.github.io/post/bae8e301.html</id>
    <published>2020-03-19T15:06:30.000Z</published>
    <updated>2020-03-21T05:17:02.948Z</updated>
    
    <content type="html"><![CDATA[<p>​    创建自己的个人博客，记录步骤，希望可以帮上忙</p><a id="more"></a><h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h2><p>​    去官网下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p><img src="../images/%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.jpg" alt="1"></p><ul><li>选择好要安装的地方，安装软件。</li><li>一直next，其中：修改存放地址，（我自己）版本选第三个，后面的不选择</li><li>安装完后进行测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在桌面打开cmd，对node和npm进行测试</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">两个都有版本号，就安装成功</span><br></pre></td></tr></table></figure><h2 id="2-配置node"><a href="#2-配置node" class="headerlink" title="2.配置node"></a>2.配置node</h2><h3 id="1-提高空间"><a href="#1-提高空间" class="headerlink" title="1.提高空间"></a>1.提高空间</h3><p>修改npm的缓存目录和全局目录路径，将对应的模块目录改到D盘nodejs的安装目录。</p><p>在D盘的node的目录下创建两个目录</p><p><img src="../images/%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.jpg" alt="2"></p><p>因为当npm安装的模块越来越多，那么这个文件夹的体积会越来越大，直到占满你的C盘。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmd，代码</span><br><span class="line">npm config set prefix “D:\nodejs\node_global”   &#x2F;&#x2F;配置全局模块存放路径</span><br><span class="line">npm config set cache “D:\nodejs\node_cache”   &#x2F;&#x2F;cache路径</span><br><span class="line">测试成功</span><br><span class="line">npm config get prefix</span><br><span class="line">npm config get cache</span><br></pre></td></tr></table></figure><h3 id="2-在电脑配置环境变量"><a href="#2-在电脑配置环境变量" class="headerlink" title="2.在电脑配置环境变量"></a>2.在电脑配置环境变量</h3><p><img src="../images/%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.jpg" alt="3"></p><p><img src="../images/%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.jpg" alt="4"></p><p>​    测试配置是否成功：打开cmd，输入node，回车，再输入require(‘cluster’)，如果能正常输出cluster模块的信息，说明上面的所有配置就算生效了</p><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><p>​    先在cmd，阿里的国内镜像进行加速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>在自己目录下，D:\Blog\Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">打开git bush here</span><br><span class="line">开始安装</span><br><span class="line">npm i hexo-cli -g   </span><br><span class="line">安装hexo</span><br><span class="line"></span><br><span class="line">hexo -v   </span><br><span class="line">验证版本号</span><br><span class="line"></span><br><span class="line">hexo init</span><br><span class="line">初始化文件</span><br><span class="line"></span><br><span class="line">npm install   </span><br><span class="line">安装必备的组件</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line">生成静态网页</span><br><span class="line"></span><br><span class="line">hexo s</span><br><span class="line">打开本地服务器</span><br><span class="line"></span><br><span class="line">浏览器打开</span><br><span class="line">http:&#x2F;&#x2F;localhost:4000</span><br><span class="line"></span><br><span class="line">Ctrl+C，关闭服务器</span><br></pre></td></tr></table></figure><h2 id="4-配置github"><a href="#4-配置github" class="headerlink" title="4.配置github"></a>4.配置github</h2><p>在目录下，D:\Blog\Hexo</p><p>打开git bush here</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"XXXXX"</span></span><br><span class="line">git config --global user.email <span class="string">"XXXX@qq.com"</span></span><br><span class="line">配置名字和邮箱</span><br><span class="line"></span><br><span class="line">然后生成密钥SSH key：</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"XXXXX@qq.com"</span></span><br><span class="line"></span><br><span class="line">获取秘钥</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line">复制</span><br><span class="line"></span><br><span class="line">打开github，点击settings，点击SSH and GPG keys,新建一个ssh，名字随便，秘钥复制到下面框中。</span><br><span class="line"></span><br><span class="line">打开git bush here</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">结果出现你的用户名，那就成功了。</span><br></pre></td></tr></table></figure><p>打开D:\Blog\Hexo下的_config.yml</p><p>修改最后一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/XXXXX/XXXXX.github.io。git（建议直接复制URL过来）</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="5-上传博客"><a href="#5-上传博客" class="headerlink" title="5.上传博客"></a>5.上传博客</h2><p>打开git bush here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br><span class="line">上传到github</span><br><span class="line">出现Deploy done：git，表示成功，可以登录</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;XXXXXXX.github.io&#x2F;</span><br><span class="line">没有登录成功，消除缓存，等待响应</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    创建自己的个人博客，记录步骤，希望可以帮上忙&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="博客" scheme="https://linhuide.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://linhuide.github.io/post/ff05b5bf.html"/>
    <id>https://linhuide.github.io/post/ff05b5bf.html</id>
    <published>2020-03-19T09:00:51.000Z</published>
    <updated>2020-03-20T15:25:50.796Z</updated>
    
    <content type="html"><![CDATA[<p>创建第一篇博客，希望再接再厉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建第一篇博客，希望再接再厉&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
