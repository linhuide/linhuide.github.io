<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林汇德的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linhuide.github.io/"/>
  <updated>2020-06-23T04:19:31.090Z</updated>
  <id>https://linhuide.github.io/</id>
  
  <author>
    <name>Linhuide</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux下tomact安装和使用</title>
    <link href="https://linhuide.github.io/post/b39c2e4c.html"/>
    <id>https://linhuide.github.io/post/b39c2e4c.html</id>
    <published>2020-06-18T00:36:04.000Z</published>
    <updated>2020-06-23T04:19:31.090Z</updated>
    
    <content type="html"><![CDATA[<p>tomcat的使用和创建</p><a id="more"></a><h2 id="1-官网找tomact包路径"><a href="#1-官网找tomact包路径" class="headerlink" title="1.官网找tomact包路径"></a>1.官网找tomact包路径</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://tomcat.apache.org/download-80.cgi</span></span><br></pre></td></tr></table></figure><h2 id="2-复制路径，下载"><a href="#2-复制路径，下载" class="headerlink" title="2.复制路径，下载"></a>2.复制路径，下载</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//mirrors.bfsu.edu.cn/apache/tomcat/tomcat-8/v8.5.56/bin/apache-tomcat-8.5.56.tar.gz</span></span><br><span class="line">wget https:<span class="comment">//mirrors.bfsu.edu.cn/apache/tomcat/tomcat-7/v7.0.104/bin/apache-tomcat-7.0.104.tar.gz</span></span><br></pre></td></tr></table></figure><h2 id="3-解压"><a href="#3-解压" class="headerlink" title="3.解压"></a>3.解压</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf apache-tomcat<span class="number">-8.5</span><span class="number">.56</span>.tar.gz</span><br><span class="line">tar zxvf apache-tomcat<span class="number">-7.0</span><span class="number">.104</span>.tar.gz</span><br></pre></td></tr></table></figure><h2 id="4-移动和开始"><a href="#4-移动和开始" class="headerlink" title="4.移动和开始"></a>4.移动和开始</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建文件</span><br><span class="line"><span class="built_in">mkdir</span> use</span><br><span class="line"><span class="built_in">mkdir</span> tomcat</span><br><span class="line">移动</span><br><span class="line">mv apache-tomcat<span class="number">-8.5</span><span class="number">.56</span> /use/tomcat</span><br><span class="line">mv apache-tomcat<span class="number">-7.0</span><span class="number">.104</span> /use/tomcat</span><br></pre></td></tr></table></figure><p>tomcat</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始</span><br><span class="line">sh /use/tomcat/apache-tomcat<span class="number">-8.5</span><span class="number">.56</span>/bin/startup.sh</span><br><span class="line">结束</span><br><span class="line">sh /use/tomcat/apache-tomcat<span class="number">-8.5</span><span class="number">.56</span>/bin/<span class="built_in">shutdown</span>.sh</span><br></pre></td></tr></table></figure><h2 id="5-自动化tomcat开启或关闭"><a href="#5-自动化tomcat开启或关闭" class="headerlink" title="5.自动化tomcat开启或关闭"></a>5.自动化tomcat开启或关闭</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell时间写法</span><br><span class="line">time=$(date <span class="string">"+%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">echo $time</span><br></pre></td></tr></table></figure><h3 id="1-sh开启"><a href="#1-sh开启" class="headerlink" title="1.sh开启"></a>1.sh开启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi tomcat.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">/use/tomcat/apache-tomcat-8.5.56/bin/startup.sh</span><br><span class="line">echo "开启tomcat"</span><br><span class="line">sleep 2m</span><br><span class="line">/use/tomcat/apache-tomcat-8.5.56/bin/shutdown.sh</span><br><span class="line">echo "关闭tomcat"</span><br><span class="line"></span><br><span class="line">chmod +x tomcat.sh</span><br><span class="line">sh tomcat.sh</span><br></pre></td></tr></table></figure><h3 id="2-crontab开启tomcat"><a href="#2-crontab开启tomcat" class="headerlink" title="2.crontab开启tomcat"></a>2.crontab开启tomcat</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">* * * * * /root/tstart.sh &gt;&gt; /root/<span class="built_in">log</span></span><br><span class="line">service crond restart</span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">tomcatPath=/use/tomcat/apache-tomcat-8.5.56/</span><br><span class="line">binPath="$tomcatPath/bin"</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]正在监控tomcat，路径：$tomcatPath"</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]正在监控tomcat，路径：$tomcatPath bin路径：$binPath"</span><br><span class="line">pid=`ps aux | grep "/use/tomcat/apache-tomcat-8.5.56/bin" | grep -v grep | grep -v retomcat | awk '&#123;print $2&#125;'`</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">if [ -n "$pid" ]; then</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat已经启动，准备使用shutdown命令关闭..."</span><br><span class="line"><span class="meta">  $</span><span class="bash">binPath<span class="string">"/shutdown.sh"</span></span></span><br><span class="line">  sleep 2</span><br><span class="line">  pid=`ps aux | grep "/use/tomcat/apache-tomcat-8.5.56/bin" | grep -v grep | grep -v retomcat | awk '&#123;print $2&#125;'`</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">  if [ -n "$pid" ]; then</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]使用shutdown命令关闭失败，准备kill进程..."</span><br><span class="line">    kill -9 $pid</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]kill进程完毕！"</span><br><span class="line">    sleep 1</span><br><span class="line">  else</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]使用shutdown命令关闭成功！"</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat未启动！"</span><br><span class="line">fi</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]准备启动tomcat..."</span><br><span class="line"><span class="meta">$</span><span class="bash">binPath<span class="string">"/startup.sh"</span></span></span><br></pre></td></tr></table></figure><h3 id="3-crontab关闭tomcat"><a href="#3-crontab关闭tomcat" class="headerlink" title="3.crontab关闭tomcat"></a>3.crontab关闭tomcat</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="number">30</span> * * * * /root/tomcat/tstart8.sh &gt;&gt;/root/tomcat_log</span><br><span class="line"><span class="number">40</span> * * * * /root/tomcat/tdown8.sh &gt;&gt;/root/tomcat_log</span><br><span class="line"><span class="number">30</span> * * * * /root/tomcat/tomcat/tstart7.sh &gt;&gt;/root/tomcat_log</span><br><span class="line"><span class="number">40</span> * * * * /root/tomcat/tdown7.sh &gt;&gt;/root/tomcat_log</span><br><span class="line">service crond restart</span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">tomcatPath=/use/tomcat/apache-tomcat-8.5.56/</span><br><span class="line">binPath="$tomcatPath/bin"</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]正在监控tomcat，路径：$tomcatPath bin路径：$binPath"</span><br><span class="line">pid=`ps aux | grep "/use/tomcat/apache-tomcat-8.5.56/bin" | grep -v grep | grep -v retomcat | awk '&#123;print $2&#125;'`</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">if [ -n "$pid" ]; then</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat已经启动，准备使用shutdown命令关闭..."</span><br><span class="line"><span class="meta">  $</span><span class="bash">binPath<span class="string">"/shutdown.sh"</span></span></span><br><span class="line">  sleep 2</span><br><span class="line">  pid=`ps aux | grep "/use/tomcat/apache-tomcat-8.5.56/bin" | grep -v grep | grep -v retomcat | awk '&#123;print $2&#125;'`</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">  if [ -n "$pid" ]; then</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]使用shutdown命令关闭失败，准备kill进程..."</span><br><span class="line">    kill -9 $pid</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]kill进程完毕！"</span><br><span class="line">    sleep 1</span><br><span class="line">  else</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]使用shutdown命令关闭成功！"</span><br><span class="line">  fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="4-开启时发生错误"><a href="#4-开启时发生错误" class="headerlink" title="4.开启时发生错误"></a>4.开启时发生错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Neither the JAVA_HOME nor the JRE_HOME environment variable is defined</span><br><span class="line"></span><br><span class="line">cd &#x2F;use&#x2F;tomcat&#x2F;apache-tomcat-8.5.56&#x2F;bin</span><br><span class="line">vi setclasspath.sh</span><br><span class="line"></span><br><span class="line">cd &#x2F;use&#x2F;tomcat&#x2F;apache-tomcat-7.0.104&#x2F;bin</span><br><span class="line">vi setclasspath.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解决方法：</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_251</span><br><span class="line">export JRE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.8.0_251&#x2F;jre</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.7.0_80</span><br><span class="line">export JRE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.7.0_80&#x2F;jre</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">service tomcat start</span><br></pre></td></tr></table></figure><h3 id="5-改端口号"><a href="#5-改端口号" class="headerlink" title="5.改端口号"></a>5.改端口号</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cd /use/tomcat/apache-tomcat<span class="number">-7.0</span><span class="number">.104</span>/conf</span><br><span class="line">vi server.xml</span><br><span class="line"></span><br><span class="line"><span class="number">1.8005</span>端口是用来关闭Tomcat服务的端口，如果此端口被占用,可在配置文件中将<span class="number">8005</span>改成其他端口 </span><br><span class="line">&lt;<span class="built_in">Server</span> port=<span class="string">"8005"</span> <span class="built_in">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>此连接器是负责建立HTTP连接。再通过浏览器访问Tomcat服务器的web应用时使用的就是这个端口，如果此端口被占用可将其修改一个未被占用的端口,例如 将上面代码中的port=<span class="string">"8080"</span>修改为port=<span class="string">"8081"</span>，即可将Tomcat的默认端口设置为<span class="number">8081</span>。在修改端口时，应避免与公用端口冲突。建议采用默认的<span class="number">8080</span>端口，不要修改，除非<span class="number">8080</span>端口被其他程序所占用。 </span><br><span class="line">    &lt;Connector port=<span class="string">"8787"</span> protocol=<span class="string">"HTTP/1.1"</span></span><br><span class="line">               connectionTimeout=<span class="string">"20000"</span></span><br><span class="line">               redirectPort=<span class="string">"8443"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>此连接器负责和其他的HTTP服务器建立连接，再把Tomcat与其他的HTTP服务集成时需要使用此连接器。如果此端口被占用,可在配置文件中将<span class="number">8009</span>改成其他端口 </span><br><span class="line">        &lt;Connector protocol=<span class="string">"AJP/1.3"</span></span><br><span class="line">               address=<span class="string">"::1"</span></span><br><span class="line">               port=<span class="string">"8009"</span></span><br><span class="line">               redirectPort=<span class="string">"8443"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span></span><br><span class="line">&lt;<span class="built_in">Server</span> port=<span class="string">"8006"</span> <span class="built_in">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">    &lt;Connector port=<span class="string">"8888"</span> protocol=<span class="string">"HTTP/1.1"</span></span><br><span class="line">               connectionTimeout=<span class="string">"20000"</span></span><br><span class="line">               redirectPort=<span class="string">"8443"</span> /&gt;</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">        &lt;Connector protocol=<span class="string">"AJP/1.3"</span></span><br><span class="line">               address=<span class="string">"::1"</span></span><br><span class="line">               port=<span class="string">"8010"</span></span><br><span class="line">               redirectPort=<span class="string">"8443"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="6-tomcat7的脚本"><a href="#6-tomcat7的脚本" class="headerlink" title="6.tomcat7的脚本"></a>6.tomcat7的脚本</h3><p>开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">tomcatPath=/use/tomcat/apache-tomcat-7.0.104/</span><br><span class="line">binPath="$tomcatPath/bin"</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]正在监控tomcat，路径：$tomcatPath"</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]正在监控tomcat，路径：$tomcatPath bin路径：$binPath"</span><br><span class="line">pid=`ps aux | grep "/use/tomcat/apache-tomcat-7.0.104/bin" | grep -v grep | grep -v retomcat | awk '&#123;print $2&#125;'`</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">if [ -n "$pid" ]; then</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat已经启动，准备使用shutdown命令关闭..."</span><br><span class="line"><span class="meta">  $</span><span class="bash">binPath<span class="string">"/shutdown.sh"</span></span></span><br><span class="line">  sleep 2</span><br><span class="line">  pid=`ps aux | grep "/use/tomcat/apache-tomcat-7.0.104/bin" | grep -v grep | grep -v retomcat | awk '&#123;print $2&#125;'`</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">  if [ -n "$pid" ]; then</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]使用shutdown命令关闭失败，准备kill进程..."</span><br><span class="line">    kill -9 $pid</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]kill进程完毕！"</span><br><span class="line">    sleep 1</span><br><span class="line">  else</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]使用shutdown命令关闭成功！"</span><br><span class="line">  fi</span><br><span class="line">else</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat未启动！"</span><br><span class="line">fi</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]准备启动tomcat..."</span><br><span class="line"><span class="meta">$</span><span class="bash">binPath<span class="string">"/startup.sh"</span></span></span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">tomcatPath=/use/tomcat/apache-tomcat-7.0.104/</span><br><span class="line">binPath="$tomcatPath/bin"</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]正在监控tomcat，路径：$tomcatPath bin路径：$binPath"</span><br><span class="line">pid=`ps aux | grep "/use/tomcat/apache-tomcat-7.0.104/bin" | grep -v grep | grep -v retomcat | awk '&#123;print $2&#125;'`</span><br><span class="line">echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">if [ -n "$pid" ]; then</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat已经启动，准备使用shutdown命令关闭..."</span><br><span class="line"><span class="meta">  $</span><span class="bash">binPath<span class="string">"/shutdown.sh"</span></span></span><br><span class="line">  sleep 2</span><br><span class="line">  pid=`ps aux | grep "/use/tomcat/apache-tomcat-7.0.104/bin" | grep -v grep | grep -v retomcat | awk '&#123;print $2&#125;'`</span><br><span class="line">  echo "[info][$(date +'%F %H:%M:%S')]tomcat进程为：$pid"</span><br><span class="line">  if [ -n "$pid" ]; then</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]使用shutdown命令关闭失败，准备kill进程..."</span><br><span class="line">    kill -9 $pid</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]kill进程完毕！"</span><br><span class="line">    sleep 1</span><br><span class="line">  else</span><br><span class="line">    echo "[info][$(date +'%F %H:%M:%S')]使用shutdown命令关闭成功！"</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">chmod +x tdown.sh</span><br></pre></td></tr></table></figure><h2 id="6-tomcat日志查看实用日志"><a href="#6-tomcat日志查看实用日志" class="headerlink" title="6.tomcat日志查看实用日志"></a>6.tomcat日志查看实用日志</h2><table><thead><tr><th>查看tomcat运行日志</th><th>tail -f catalina.out</th></tr></thead><tbody><tr><td>通过关键字搜索查看日志</td><td>cat jeewx-2015-09-20.log</td></tr><tr><td>查看固定时间日志</td><td>cat jeewx-2015-09-20.log</td></tr><tr><td>查看最近50行日志</td><td>tail -n 50 -f catalina.out</td></tr></tbody></table><h2 id="tomcat输出的错误信息更为详细"><a href="#tomcat输出的错误信息更为详细" class="headerlink" title="tomcat输出的错误信息更为详细"></a>tomcat输出的错误信息更为详细</h2><p>在WEB-INF/classes目录下新建一个名为 logging.properties 文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">handlers</span> = <span class="string">org.apache.juli.FileHandler, java.util.logging.ConsoleHandler</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Handler specific properties.</span></span><br><span class="line"><span class="comment"># Describes specific configuration info for Handlers.</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.apache.juli.FileHandler.level</span> = <span class="string">FINE</span></span><br><span class="line"><span class="meta">org.apache.juli.FileHandler.directory</span> = <span class="string">$&#123;catalina.base&#125;/logs</span></span><br><span class="line"><span class="meta">org.apache.juli.FileHandler.prefix</span> = <span class="string">servlet-examples.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.level</span> = <span class="string">FINE</span></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.formatter</span> = <span class="string">java.util.logging.SimpleFormatter</span></span><br></pre></td></tr></table></figure><h2 id="8-监控tomcat"><a href="#8-监控tomcat" class="headerlink" title="8.监控tomcat"></a>8.监控tomcat</h2><p>github上下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;psi-probe&#x2F;psi-probe&#x2F;releases</span><br></pre></td></tr></table></figure><p>拷贝到这里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp probe.war &#x2F;use&#x2F;tomcat&#x2F;apache-tomcat-8.5.56&#x2F;webapps&#x2F;probe.war</span><br><span class="line">cp probe.war &#x2F;use&#x2F;tomcat&#x2F;apache-tomcat-7.0.104&#x2F;webapps&#x2F;probe.war</span><br></pre></td></tr></table></figure><p>配置conf/tomcat-users.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename&#x3D;&quot;probeuser&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;poweruser&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;poweruserplus&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;manager-gui&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;user username&#x3D;&quot;root&quot; password&#x3D;&quot;1234&quot; roles&#x3D;&quot;manager-gui&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;role rolename&#x3D;&quot;probeuser&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;poweruser&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;poweruserplus&quot;&#x2F;&gt;</span><br><span class="line">&lt;role rolename&#x3D;&quot;manager&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;user username&#x3D;&quot;root&quot; password&#x3D;&quot;1234&quot; roles&#x3D;&quot;manager&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">开始</span><br><span class="line">sh &#x2F;use&#x2F;tomcat&#x2F;apache-tomcat-8.5.56&#x2F;bin&#x2F;startup.sh</span><br><span class="line">结束</span><br><span class="line">sh &#x2F;use&#x2F;tomcat&#x2F;apache-tomcat-8.5.56&#x2F;bin&#x2F;shutdown.sh </span><br><span class="line">开始</span><br><span class="line">sh &#x2F;use&#x2F;tomcat&#x2F;apache-tomcat-7.0.104&#x2F;bin&#x2F;startup.sh</span><br><span class="line">结束</span><br><span class="line">sh &#x2F;use&#x2F;tomcat&#x2F;apache-tomcat-7.0.104&#x2F;bin&#x2F;shutdown.sh </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其中，admin&#x2F;123456是访问probe界面需要的用户名和密码</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.58.128:8888&#x2F;probe</span><br><span class="line"></span><br><span class="line">下面国旗设置中文</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Unsupported major.minor version 52.0</span><br><span class="line">配置jdk过低，tomcat7时jdk7的，52是jdk8</span><br><span class="line">换java环境</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDK版本和Java编译器内部的版本号</span><br><span class="line"></span><br><span class="line">J2SE 8 &#x3D; 52,</span><br><span class="line">J2SE 7 &#x3D; 51,</span><br><span class="line">J2SE 6.0 &#x3D; 50,</span><br><span class="line">J2SE 5.0 &#x3D; 49,</span><br><span class="line">JDK 1.4 &#x3D; 48,</span><br><span class="line">JDK 1.3 &#x3D; 47,</span><br><span class="line">JDK 1.2 &#x3D; 46,</span><br><span class="line">JDK 1.1 &#x3D; 45</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tomcat的使用和创建&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Linux" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/Linux/"/>
    
    
      <category term="Linux" scheme="https://linhuide.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Oracle</title>
    <link href="https://linhuide.github.io/post/f145fed6.html"/>
    <id>https://linhuide.github.io/post/f145fed6.html</id>
    <published>2020-05-30T11:56:30.000Z</published>
    <updated>2020-05-30T11:56:30.747Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SVN</title>
    <link href="https://linhuide.github.io/post/ec3edfbe.html"/>
    <id>https://linhuide.github.io/post/ec3edfbe.html</id>
    <published>2020-05-28T13:39:57.000Z</published>
    <updated>2020-05-30T11:52:03.442Z</updated>
    
    <content type="html"><![CDATA[<p>SVN</p><a id="more"></a><h2 id="VisualSVN"><a href="#VisualSVN" class="headerlink" title="VisualSVN"></a>VisualSVN</h2><h2 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h2><p>svnadmin create 文件夹路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnadmin create</span><br></pre></td></tr></table></figure><h2 id="2-开启"><a href="#2-开启" class="headerlink" title="2.开启"></a>2.开启</h2><p>svnserve  -d（后台运行）  -r（监管目录） 版本仓库目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r</span><br></pre></td></tr></table></figure><h2 id="TortoiseSVN"><a href="#TortoiseSVN" class="headerlink" title="TortoiseSVN"></a>TortoiseSVN</h2><p>svn://localhost</p><p>检出，更新，提交</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SVN&lt;/p&gt;
    
    </summary>
    
    
      <category term="版本控制" scheme="https://linhuide.github.io/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="SVN" scheme="https://linhuide.github.io/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>Linux部署</title>
    <link href="https://linhuide.github.io/post/a2ca3b62.html"/>
    <id>https://linhuide.github.io/post/a2ca3b62.html</id>
    <published>2020-05-06T15:11:25.000Z</published>
    <updated>2020-05-30T11:48:41.647Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot 项目部署到 Linux上</p><a id="more"></a><h2 id="1-改名字"><a href="#1-改名字" class="headerlink" title="1.改名字"></a>1.改名字</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>XXXX<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-启动"><a href="#2-启动" class="headerlink" title="2.启动"></a>2.启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar XXX.jar</span><br></pre></td></tr></table></figure><h2 id="3-改端口"><a href="#3-改端口" class="headerlink" title="3.改端口"></a>3.改端口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Dserver.port&#x3D;8090 XXX.jar</span><br></pre></td></tr></table></figure><h2 id="4-后台启动"><a href="#4-后台启动" class="headerlink" title="4.后台启动"></a>4.后台启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar XXX.jar &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">ps -ef | grep XXX.jar</span><br></pre></td></tr></table></figure><h2 id="5-sell启动"><a href="#5-sell启动" class="headerlink" title="5.sell启动"></a>5.sell启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim start .sh</span><br><span class="line"></span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">nohup java -jar XXX.jar &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash start.sh</span><br><span class="line"></span><br><span class="line">ps -ef | grep XXX.jar</span><br><span class="line">kill -9</span><br></pre></td></tr></table></figure><h2 id="6-sell启动2"><a href="#6-sell启动2" class="headerlink" title="6.sell启动2"></a>6.sell启动2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;systemf&#x2F;system&#x2F;</span><br><span class="line">pwd</span><br><span class="line">ll</span><br><span class="line">vim XXX.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;weixin-sell  # 描述</span><br><span class="line">After&#x3D;syslog.targer network.target  #要依赖的服务(在启动你的服务之前，需要先启动那个服务)</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple  # 服务启动的模式 </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;java -jar  &#x2F;opt&#x2F;javaapps&#x2F;xxx.jar  </span><br><span class="line"># 启动命令 (服务所在目录的全称，注：可以在-jar 后面添加其他命令 )</span><br><span class="line">ExecStop&#x3D;&#x2F;bin&#x2F;kill -15 $MAINPID  </span><br><span class="line"># 关闭命令</span><br><span class="line"> </span><br><span class="line">User&#x3D;root  # 文件拥有者</span><br><span class="line">Group&#x3D;root  # 文件所在组</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><h2 id="7-sell启动2的命令"><a href="#7-sell启动2的命令" class="headerlink" title="7.sell启动2的命令"></a>7.sell启动2的命令</h2><h3 id="重启-systemctl-deamon-reload"><a href="#重启-systemctl-deamon-reload" class="headerlink" title="重启     systemctl deamon-reload"></a>重启     systemctl deamon-reload</h3><h3 id="启动-systemctl-start-sell"><a href="#启动-systemctl-start-sell" class="headerlink" title="启动     systemctl start sell"></a>启动     systemctl start sell</h3><h3 id="关闭-systemctl-stop-sell"><a href="#关闭-systemctl-stop-sell" class="headerlink" title="关闭    systemctl stop sell"></a>关闭    systemctl stop sell</h3><h3 id="开机启动-systemctl-enable-sell"><a href="#开机启动-systemctl-enable-sell" class="headerlink" title="开机启动    systemctl enable sell"></a>开机启动    systemctl enable sell</h3><h3 id="关闭开机启动-systemctl-disable-sell"><a href="#关闭开机启动-systemctl-disable-sell" class="headerlink" title="关闭开机启动    systemctl disable sell"></a>关闭开机启动    systemctl disable sell</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringBoot 项目部署到 Linux上&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Linux" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/Linux/"/>
    
    
      <category term="Linux" scheme="https://linhuide.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装java</title>
    <link href="https://linhuide.github.io/post/4f0dbe0d.html"/>
    <id>https://linhuide.github.io/post/4f0dbe0d.html</id>
    <published>2020-05-05T15:12:36.000Z</published>
    <updated>2020-06-23T04:19:33.656Z</updated>
    
    <content type="html"><![CDATA[<p>Linux安装java</p><a id="more"></a><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1ykSB3dsaYR1ow1iaU3FScg&amp;shfl&#x3D;sharepset</span><br></pre></td></tr></table></figure><h2 id="2-查看"><a href="#2-查看" class="headerlink" title="2.查看"></a>2.查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lht</span><br></pre></td></tr></table></figure><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建安装目录</span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/java/</span><br><span class="line">    </span><br><span class="line">cd /usr/local/java/</span><br><span class="line">解压至安装目录</span><br><span class="line">tar -zxvf jdk<span class="number">-8u</span>144-linux-x64.tar.gz -C /usr/local/java/</span><br><span class="line">tar -zxvf jdk<span class="number">-7u</span>80-linux-x64.tar.gz -C /usr/local/java/</span><br><span class="line">tar -zxvf jdk<span class="number">-8u</span>251-linux-x64.tar.gz -C /usr/local/java/</span><br></pre></td></tr></table></figure><h2 id="4-配置"><a href="#4-配置" class="headerlink" title="4.配置"></a>4.配置</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">设置环境变量</span><br><span class="line">vim /etc/profile</span><br><span class="line">在末尾添加</span><br><span class="line"><span class="keyword">export</span> JAVA_HOME=/usr/local/java/jdk1<span class="number">.8</span><span class="number">.0</span>_144</span><br><span class="line"><span class="keyword">export</span> JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line"><span class="keyword">export</span> CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line"><span class="keyword">export</span> PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class="line"></span><br><span class="line">在末尾添加</span><br><span class="line"><span class="keyword">export</span> JAVA_HOME=/usr/local/java/jdk1<span class="number">.7</span><span class="number">.0</span>_80</span><br><span class="line"><span class="keyword">export</span> CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line"><span class="keyword">export</span> PATH=$&#123;JAVA_HOME&#125;/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使环境变量生效</span><br><span class="line">source /etc/profile</span><br><span class="line">检查</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="5-切换JDK7和JDK8"><a href="#5-切换JDK7和JDK8" class="headerlink" title="5.切换JDK7和JDK8"></a>5.切换JDK7和JDK8</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">设置环境变量</span><br><span class="line">vim /etc/profile</span><br><span class="line">在末尾添加</span><br><span class="line"><span class="keyword">export</span> CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line"><span class="keyword">export</span> PATH=$&#123;JAVA_HOME&#125;/bin</span><br><span class="line"></span><br><span class="line">使环境变量生效</span><br><span class="line">source /etc/profile</span><br><span class="line">检查</span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alternatives --install /usr/bin/java java /usr/local/java/jdk1<span class="number">.8</span><span class="number">.0</span>_251/bin/java <span class="number">1500</span></span><br><span class="line">alternatives --install /usr/bin/java java /usr/local/java/jdk1<span class="number">.8</span><span class="number">.0</span>_144/bin/java <span class="number">1500</span></span><br><span class="line">alternatives --install /usr/bin/java java /usr/local/java/jdk1<span class="number">.7</span><span class="number">.0</span>_80/bin/java <span class="number">1400</span></span><br><span class="line"></span><br><span class="line">alternatives --<span class="built_in">remove</span> java /usr/local/java/jdk1<span class="number">.8</span><span class="number">.0</span>_144/bin/java</span><br><span class="line">alternatives --<span class="built_in">remove</span> java /usr/local/java/jdk1<span class="number">.7</span><span class="number">.0</span>_80/bin/java</span><br><span class="line"></span><br><span class="line">alternatives --<span class="built_in">config</span> java</span><br><span class="line"></span><br><span class="line">选<span class="number">1</span>或选<span class="number">2</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux安装java&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Linux" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/Linux/"/>
    
    
      <category term="Linux" scheme="https://linhuide.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Rides再次学习5</title>
    <link href="https://linhuide.github.io/post/509c6801.html"/>
    <id>https://linhuide.github.io/post/509c6801.html</id>
    <published>2020-04-26T06:08:32.000Z</published>
    <updated>2020-04-27T11:41:24.021Z</updated>
    
    <content type="html"><![CDATA[<p>rides的学习与使用</p><a id="more"></a><h1 id="1-哨兵模式"><a href="#1-哨兵模式" class="headerlink" title="1.哨兵模式"></a>1.哨兵模式</h1><h2 id="1-1-哨兵简介"><a href="#1-1-哨兵简介" class="headerlink" title="1-1.哨兵简介"></a>1-1.哨兵简介</h2><h3 id="1-主机“宕机”"><a href="#1-主机“宕机”" class="headerlink" title="1.主机“宕机”"></a>1.主机“宕机”</h3><ul><li>关闭master和所有slave </li><li>找一个slave作为master</li><li>修改其他slave的配置，连接新的主</li><li>启动新的master与slave</li><li>全量复制<em>N+部分复制</em>N</li></ul><p><img src="../../images/rides/5/5-9.png" alt="5-9"></p><p><img src="../../images/rides/5/5-10.png" alt="5-10"></p><ul><li>关闭期间的数据服务谁来承接？ </li><li>找一个主？怎么找法？</li><li>修改配置后，原始的主恢复了怎么办？</li></ul><h3 id="2-哨兵"><a href="#2-哨兵" class="headerlink" title="2.哨兵"></a>2.哨兵</h3><p>哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master。</p><p><img src="../../images/rides/5/5-7.png" alt="5-7"></p><p><img src="../../images/rides/5/5-8.png" alt="5-8"></p><h3 id="3-哨兵的作用"><a href="#3-哨兵的作用" class="headerlink" title="3.哨兵的作用"></a>3.哨兵的作用</h3><ul><li>监控<ul><li>不断的检查master和slave是否正常运行。</li><li>master存活检测、master与slave运行情况检测</li></ul></li><li>通知（提醒）<ul><li>当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知。</li></ul></li><li>自动故障转移<ul><li>断开master与slave连接，选取一个slave作为master，将其他slave连接到新的master，并告知客户端新的服务器地址</li></ul></li><li>注意：<ul><li>哨兵也是一台redis服务器，只是不提供数据服务</li><li>通常哨兵配置数量为单数</li></ul></li></ul><h2 id="1-2-配置哨兵"><a href="#1-2-配置哨兵" class="headerlink" title="1-2.配置哨兵"></a>1-2.配置哨兵</h2><ul><li>配置一拖二的主从结构</li><li>配置三个哨兵（配置相同，端口不同）<ul><li>参看sentinel.conf</li></ul></li><li>启动哨兵</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel sentinel- 端口号 .conf</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/5/5-21.png" alt="5-21"></p><p><strong>配置：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">哨兵<span class="number">1</span>：</span><br><span class="line">cd redis<span class="number">-5.0</span><span class="number">.8</span></span><br><span class="line">cat sentinel.conf</span><br><span class="line">cat sentinel.conf | grep -v <span class="string">"#"</span> | grep -v <span class="string">"^$"</span></span><br><span class="line">cat sentinel.conf | grep -v <span class="string">"#"</span> | grep -v <span class="string">"^$"</span> &gt; ./conf/sentinel<span class="number">-26379.</span>conf</span><br><span class="line">cd conf </span><br><span class="line">ll</span><br><span class="line">vim sentinel<span class="number">-26379.</span>conf </span><br><span class="line"></span><br><span class="line">dir /redis/<span class="number">5.0</span><span class="number">.8</span>/data</span><br><span class="line">复制</span><br><span class="line">sed 's/26379/26380/g' sentinel-26379.conf &gt; sentinel-26380.conf</span><br><span class="line">sed 's/26379/26381/g' sentinel-26379.conf &gt; sentinel-26381.conf</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/5/5-1.png" alt="5-1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#39;s&#x2F;6380&#x2F;6381&#x2F;g&#39; redis-6380.conf &gt; redis-6381.conf</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/5/5-2.png" alt="5-2"></p><p>完成准备工作，启动</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">master:</span><br><span class="line">redis-server /conf/redis<span class="number">-6379.</span>conf</span><br><span class="line"></span><br><span class="line">slave1：</span><br><span class="line">redis-server /conf/redis<span class="number">-6380.</span>conf</span><br><span class="line"></span><br><span class="line">slave2：</span><br><span class="line">redis-server /conf/redis<span class="number">-6381.</span>conf</span><br><span class="line"></span><br><span class="line">哨兵<span class="number">1</span>：</span><br><span class="line">redis-sentinel sentinel<span class="number">-26379.</span>conf</span><br><span class="line">哨兵<span class="number">1</span>客户端：</span><br><span class="line">redis-cli -p <span class="number">26379</span></span><br><span class="line">查看配置，自动改</span><br><span class="line">cat /conf/sentinel<span class="number">-26379.</span>conf</span><br><span class="line"></span><br><span class="line">哨兵<span class="number">2</span>：</span><br><span class="line">redis-sentinel sentinel<span class="number">-26380.</span>conf</span><br><span class="line">哨兵<span class="number">2</span>客户端：</span><br><span class="line">redis-cli -p <span class="number">26380</span></span><br><span class="line"></span><br><span class="line">查看配置，自动改</span><br><span class="line">cat /conf/sentinel<span class="number">-26379.</span>conf</span><br><span class="line"></span><br><span class="line">哨兵<span class="number">3</span>：</span><br><span class="line">redis-sentinel sentinel<span class="number">-26381.</span>conf</span><br><span class="line">哨兵<span class="number">3</span>客户端：</span><br><span class="line">redis-cli -p <span class="number">26381</span></span><br><span class="line"></span><br><span class="line">master客户端:</span><br><span class="line">redis-cli -p <span class="number">6379</span></span><br><span class="line">slave1客户端:</span><br><span class="line">redis-cli -p <span class="number">6380</span></span><br><span class="line">master客户端:</span><br><span class="line"><span class="built_in">set</span> name name</span><br><span class="line">slave1客户端:</span><br><span class="line"><span class="built_in">get</span> name</span><br><span class="line"></span><br><span class="line">停掉master，ctrl+c</span><br><span class="line">在哨兵<span class="number">1</span>查看</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/5/5-3.png" alt="5-3"></p><h2 id="1-3-哨兵工作原理"><a href="#1-3-哨兵工作原理" class="headerlink" title="1-3.哨兵工作原理"></a>1-3.哨兵工作原理</h2><h3 id="1-主从切换"><a href="#1-主从切换" class="headerlink" title="1.主从切换"></a>1.主从切换</h3><ul><li>哨兵在进行主从切换过程中经历三个阶段<ul><li>监控</li><li>通知</li><li>故障转移</li></ul></li></ul><h3 id="2-阶段一：监控阶段"><a href="#2-阶段一：监控阶段" class="headerlink" title="2.阶段一：监控阶段"></a>2.阶段一：监控阶段</h3><ul><li>用于同步各个节点的状态信息</li><li>获取各个sentinel的状态（是否在线）</li><li>获取master的状态<ul><li>master属性</li><li>runid</li><li>role：master</li><li>各个slave的详细信息</li></ul></li><li>获取所有slave的状态（根据master中的slave信息）<ul><li>slave属性</li><li>runid</li><li>role：slave</li><li>master_host、master_port</li><li>offset</li></ul></li></ul><p><img src="../../images/rides/5/5-4.png" alt="5-4"></p><p><img src="../../images/rides/5/5-5.png" alt="5-5"></p><h3 id="3-阶段二：通知阶段"><a href="#3-阶段二：通知阶段" class="headerlink" title="3.阶段二：通知阶段"></a>3.阶段二：通知阶段</h3><p><img src="../../images/rides/5/5-6.png" alt="5-6"></p><h3 id="4-阶段三：故障转移阶段"><a href="#4-阶段三：故障转移阶段" class="headerlink" title="4.阶段三：故障转移阶段"></a>4.阶段三：故障转移阶段</h3><p><img src="../../images/rides/5/5-11.png" alt="5-11"></p><p>客观下线后</p><p>先选一个头，投票机制</p><p><img src="../../images/rides/5/5-12.png" alt="5-12"></p><p><img src="../../images/rides/5/5-13.png" alt="5-13"></p><p><img src="../../images/rides/5/5-14.png" alt="5-14"></p><ul><li>服务器列表中挑选备选master<ul><li>在线的</li><li>响应慢的</li><li>与原master断开时间久的</li><li>优先原则</li><li>优先级</li><li>offset</li><li>runid</li></ul></li><li>发送指令（ sentinel ）<ul><li>向新的master发送slaveof no one</li><li>向其他slave发送slaveof 新masterIP端口</li></ul></li></ul><p><strong>在线的</strong></p><p><img src="../../images/rides/5/5-15.png" alt="5-15"></p><p><strong>响应慢的</strong></p><p><img src="../../images/rides/5/5-16.png" alt="5-16"></p><p><img src="../../images/rides/5/5-17.png" alt="5-17"></p><p><strong>与原master断开时间久的</strong></p><p><img src="../../images/rides/5/5-18.png" alt="5-18"></p><p><img src="../../images/rides/5/5-19.png" alt="5-19"></p><p><strong>优先原则</strong></p><p><img src="../../images/rides/5/5-20.png" alt="5-20"></p><ul><li>监控<ul><li>同步信息</li></ul></li><li>通知<ul><li>保持联通</li></ul></li><li>故障转移<ul><li>发现问题</li><li>竞选负责人</li><li>优选新master</li><li>新master上任，其他slave切换master，原master作为slave故障回复后连接</li></ul></li></ul><h1 id="2-集群"><a href="#2-集群" class="headerlink" title="2.集群"></a>2.集群</h1><h2 id="2-1-集群简介"><a href="#2-1-集群简介" class="headerlink" title="2-1.集群简介"></a>2-1.集群简介</h2><h3 id="1-业务发展过程中遇到的峰值瓶颈？"><a href="#1-业务发展过程中遇到的峰值瓶颈？" class="headerlink" title="1.业务发展过程中遇到的峰值瓶颈？"></a>1.业务发展过程中遇到的峰值瓶颈？</h3><ul><li>redis提供的服务OPS可以达到10万/秒，当前业务OPS已经达到10万/秒</li><li>内存单机容量达到256G，当前业务需求内存容量1T</li><li>使用集群的方式可以快速解决上述问题</li></ul><h3 id="2-集群架构"><a href="#2-集群架构" class="headerlink" title="2.集群架构"></a>2.集群架构</h3><p>集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果</p><p><strong>集群作用：</strong></p><ul><li>分散单台服务器的访问压力，实现负载均衡</li><li>分散单台服务器的存储压力，实现可扩展性</li><li>降低单台服务器宕机带来的业务灾难</li></ul><p><img src="../../images/rides/5/5-22.png" alt="5-22"></p><p><img src="../../images/rides/5/5-23.png" alt="5-23"></p><h2 id="2-2Redis集群结构设计"><a href="#2-2Redis集群结构设计" class="headerlink" title="2.2Redis集群结构设计"></a>2.2Redis集群结构设计</h2><h3 id="1-数据存储设计"><a href="#1-数据存储设计" class="headerlink" title="1.数据存储设计"></a>1.数据存储设计</h3><ul><li>通过算法设计，计算出key应该保存的位置</li><li>将所有的存储空间计划切割成16384份，每台主机保存一部分</li><li>每份代表的是一个存储空间，不是一个key的保存空间</li><li>将key按照计算出的结果放到对应的存储空间</li></ul><p><img src="../../images/rides/5/5-24.png" alt="5-24"></p><ul><li>增强可扩展性</li></ul><p><img src="../../images/rides/5/5-25.png" alt="5-25"></p><h3 id="2-集群内部通讯设计"><a href="#2-集群内部通讯设计" class="headerlink" title="2.集群内部通讯设计"></a>2.集群内部通讯设计</h3><ul><li>各个数据库相互通信，保存各个库中槽的编号数据</li><li>一次命中，直接返回</li><li>一次未命中，告知具体位置</li></ul><p><img src="../../images/rides/5/5-26.png" alt="5-26"></p><h2 id="2-3-cluster集群结构搭建"><a href="#2-3-cluster集群结构搭建" class="headerlink" title="2.3.cluster集群结构搭建"></a>2.3.cluster集群结构搭建</h2><h3 id="1-搭建方式"><a href="#1-搭建方式" class="headerlink" title="1.搭建方式"></a>1.搭建方式</h3><ul><li>原生安装（单条命令）<ul><li>配置服务器（3主3从）</li><li>建立通信（Meet）</li><li>分槽（Slot）</li></ul></li><li>搭建主从（master-slave）<ul><li>工具安装（批处理）</li></ul></li></ul><h3 id="2-Cluster配置"><a href="#2-Cluster配置" class="headerlink" title="2.Cluster配置"></a>2.Cluster配置</h3><ul><li>添加节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-enabled yes|no</span><br></pre></td></tr></table></figure><ul><li>cluster配置文件名，该文件属于自动生成，仅用于快速查找文件并查询文件内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-config-file &lt;filename&gt;</span><br></pre></td></tr></table></figure><ul><li>节点服务响应超时时间，用于判定该节点是否下线或切换为从节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-node-timeout &lt;milliseconds&gt;</span><br></pre></td></tr></table></figure><ul><li>master连接的slave最小数量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-migration-barrier &lt;count&gt;</span><br></pre></td></tr></table></figure><h4 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd data</span><br><span class="line">清空</span><br><span class="line">cd conf</span><br><span class="line">vim redis.conf</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-<span class="built_in">config</span>-file nodes<span class="number">-6379.</span>conf</span><br><span class="line">#实验</span><br><span class="line">cluster-node-timeout <span class="number">10000</span></span><br></pre></td></tr></table></figure><p><img src="../../images/rides/5/5-27.png" alt="5-27"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">主客户端</span><br><span class="line">cat redis.conf &gt; redis<span class="number">-6379.</span>conf</span><br><span class="line">ll</span><br><span class="line">set 's/6379/6380/g' redis-6349.conf &gt; redis-6380.conf</span><br><span class="line">set 's/6379/6381/g' redis-6349.conf &gt; redis-6381.conf</span><br><span class="line">set 's/6379/6382/g' redis-6349.conf &gt; redis-6382.conf</span><br><span class="line">set 's/6379/6383/g' redis-6349.conf &gt; redis-6383.conf</span><br><span class="line">set 's/6379/6384/g' redis-6349.conf &gt; redis-6384.conf</span><br><span class="line">set 's/6379/6385/g' redis-6349.conf &gt; redis-6385.conf</span><br><span class="line"></span><br><span class="line">master1</span><br><span class="line">redis-server /conf/redis<span class="number">-6379.</span>conf</span><br><span class="line"></span><br><span class="line">master2</span><br><span class="line">redis-server /conf/redis<span class="number">-6380.</span>conf</span><br><span class="line"></span><br><span class="line">master3</span><br><span class="line">redis-server /conf/redis<span class="number">-6381.</span>conf</span><br><span class="line"></span><br><span class="line">slave1</span><br><span class="line">redis-server /conf/redis<span class="number">-6382.</span>conf</span><br><span class="line"></span><br><span class="line">slave2</span><br><span class="line">redis-server /conf/redis<span class="number">-6383.</span>conf</span><br><span class="line"></span><br><span class="line">slave3</span><br><span class="line">redis-server /conf/redis<span class="number">-6384.</span>conf</span><br><span class="line"></span><br><span class="line">主客户端</span><br><span class="line">ps -ef |grep redis</span><br><span class="line">cd ..</span><br><span class="line">cd src</span><br><span class="line">ll | grep redis-</span><br><span class="line">查看，没有需要安装</span><br><span class="line">ruby -v</span><br><span class="line">gem -v</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/5/5-28.png" alt="5-28"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主客户端</span><br><span class="line">cd src</span><br><span class="line">redis-trib.rb</span><br><span class="line">#写上的为master</span><br><span class="line">./redis-trib.rb create --replicas <span class="number">1</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6380</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6381</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6382</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6383</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6384</span></span><br></pre></td></tr></table></figure><p><img src="../../images/rides/5/5-29.png" alt="5-29"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">客户端</span><br><span class="line">cd data</span><br><span class="line">ll</span><br><span class="line">cat nodes<span class="number">-6379.</span>conf</span><br><span class="line"></span><br><span class="line">master客户端</span><br><span class="line">redis-cli</span><br><span class="line"><span class="built_in">set</span> name name</span><br><span class="line">(erroe)</span><br><span class="line">redis-cli -c</span><br><span class="line"><span class="built_in">set</span> name name</span><br><span class="line"></span><br><span class="line">slavel客户端</span><br><span class="line">redis-cli -c -p <span class="number">6382</span></span><br><span class="line"><span class="built_in">get</span> name</span><br></pre></td></tr></table></figure><h4 id="主从下线与主从切换"><a href="#主从下线与主从切换" class="headerlink" title="主从下线与主从切换"></a>主从下线与主从切换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">slave1    6382</span><br><span class="line">ctrl+c</span><br><span class="line"></span><br><span class="line">master1与其他客户端日志不同</span><br><span class="line"></span><br><span class="line">master1   6379</span><br><span class="line">ctrl+c</span><br><span class="line"></span><br><span class="line">slave1</span><br><span class="line">一秒连一次，10次（自己设置的）</span><br><span class="line"></span><br><span class="line">slavel客户端</span><br><span class="line">#查看情况</span><br><span class="line">cluster nodes</span><br><span class="line"></span><br><span class="line">master1</span><br><span class="line">redis-server &#x2F;conf&#x2F;redis-6379.conf</span><br><span class="line"></span><br><span class="line">slavel客户端</span><br><span class="line">#查看情况</span><br><span class="line">cluster nodes</span><br></pre></td></tr></table></figure><h3 id="2-Cluster节点操作命令"><a href="#2-Cluster节点操作命令" class="headerlink" title="2.Cluster节点操作命令"></a>2.Cluster节点操作命令</h3><ul><li>查看集群节点信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster nodes</span><br></pre></td></tr></table></figure><ul><li>进入一个从节点 redis，切换其主节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster replicate &lt;master-id&gt;</span><br></pre></td></tr></table></figure><ul><li>发现一个新节点，新增主节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster meet ip:port</span><br></pre></td></tr></table></figure><ul><li>忽略一个没有solt的节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster forget &lt;id&gt;</span><br></pre></td></tr></table></figure><ul><li>手动故障转移</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster failover</span><br></pre></td></tr></table></figure><h3 id="3-redis-trib命令"><a href="#3-redis-trib命令" class="headerlink" title="3.redis-trib命令"></a>3.redis-trib命令</h3><ul><li>添加节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb add-node</span><br></pre></td></tr></table></figure><ul><li>删除节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb del-node</span><br></pre></td></tr></table></figure><ul><li>重新分片</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb reshard</span><br></pre></td></tr></table></figure><h1 id="3-企业级解决方案"><a href="#3-企业级解决方案" class="headerlink" title="3.企业级解决方案"></a>3.企业级解决方案</h1><h2 id="1-缓存预热"><a href="#1-缓存预热" class="headerlink" title="1.缓存预热"></a>1.缓存预热</h2><h3 id="“宕机”：服务器启动后迅速宕机"><a href="#“宕机”：服务器启动后迅速宕机" class="headerlink" title="“宕机”：服务器启动后迅速宕机"></a>“宕机”：服务器启动后迅速宕机</h3><h3 id="问题排查："><a href="#问题排查：" class="headerlink" title="问题排查："></a>问题排查：</h3><ol><li><p>请求数量较高</p></li><li><p>主从之间数据吞吐量较大，数据同步操作频度较高</p></li></ol><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>前置准备工作：</p><ol><li>日常例行统计数据访问记录，统计访问频度较高的热点数据</li><li>利用LRU数据删除策略，构建数据留存队列<br>例如：storm与kafka配合</li></ol><p>准备工作：<br>3. 将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据<br>4. 利用分布式多服务器同时进行数据读取，提速数据加载过程<br>5. 热点数据主从同时预热</p><p>实施：<br>6. 使用脚本程序固定触发数据预热过程<br>7. 如果条件允许，使用了CDN（内容分发网络），效果会更好</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><h2 id="2-缓存雪崩"><a href="#2-缓存雪崩" class="headerlink" title="2.缓存雪崩"></a>2.缓存雪崩</h2><h3 id="数据库服务器崩溃"><a href="#数据库服务器崩溃" class="headerlink" title="数据库服务器崩溃"></a>数据库服务器崩溃</h3><ol><li>系统平稳运行过程中，忽然数据库连接量激增</li><li>应用服务器无法及时处理请求</li><li>大量408，500错误页面出现</li><li>客户反复刷新页面获取数据</li><li>数据库崩溃</li><li>应用服务器崩溃</li><li>重启应用服务器无效</li><li>Redis服务器崩溃</li><li>Redis集群崩溃</li><li>重启数据库后再次被瞬间流量放倒</li></ol><h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><ol><li>在一个<strong>较短</strong>的时间内，缓存中<strong>较多</strong>的key<strong>集中过期</strong></li><li>此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据</li><li>数据库同时接收到大量的请求无法及时处理</li><li>Redis大量请求被积压，开始出现超时现象</li><li>数据库流量激增，数据库崩溃</li><li>重启后仍然面对缓存中无数据可用</li><li>Redis服务器资源被严重占用，Redis服务器崩溃</li><li>Redis集群呈现崩塌，集群瓦解</li><li>应用服务器无法及时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃</li><li>应用服务器，redis，数据库全部重启，效果不理想</li></ol><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li>短时间范围内</li><li>大量key集中过期</li></ul><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案-1"></a>解决方案-1</h3><ol><li>更多的页面静态化处理</li><li>构建多级缓存架构<br>Nginx缓存+redis缓存+ehcache缓存</li><li>检测Mysql严重耗时业务进行优化<br>对数据库的瓶颈排查：例如超时查询、耗时较高事务等</li><li>灾难预警机制<br>监控redis服务器性能指标<ol><li>CPU占用、CPU使用率</li><li>内存容量</li><li>查询平均响应时间</li><li>线程数</li></ol></li><li>限流、降级<ol><li>短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问</li></ol></li></ol><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案-2"></a>解决方案-2</h3><ol><li>LRU与LFU切换</li><li>数据有效期策略调整<ol><li>根据业务数据有效期进行分类错峰，A类90分钟，B类80分钟，C类70分钟</li><li>过期时间使用固定时间+随机值的形式，稀释集中到期的key的数量</li></ol></li><li>超热数据使用永久key</li><li>定期维护（自动+人工）<ol><li>对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时</li></ol></li><li>加锁</li></ol><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​    缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的出现（约40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。</p><p><img src="../../images/rides/5/5-30.png" alt="5-30"></p><h2 id="3-缓存击穿"><a href="#3-缓存击穿" class="headerlink" title="3.缓存击穿"></a>3.缓存击穿</h2><h3 id="数据库服务器崩溃-1"><a href="#数据库服务器崩溃-1" class="headerlink" title="数据库服务器崩溃"></a>数据库服务器崩溃</h3><ol><li>系统平稳运行过程中</li><li>数据库连接量瞬间激增</li><li>Redis服务器无大量key过期</li><li>Redis内存平稳，无波动</li><li>Redis服务器CPU正常</li><li>数据库崩溃</li></ol><h3 id="问题排查-1"><a href="#问题排查-1" class="headerlink" title="问题排查"></a>问题排查</h3><ol><li>Redis中某个key过期，该key访问量巨大</li><li>多个数据请求从服务器直接压到Redis后，均未命中</li><li>Redis在短时间内发起了大量对数据库中同一数据的访问</li></ol><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li>单个key高热数据</li><li>key过期</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>预先设定<ol><li>以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时长</li><li>注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势</li></ol></li><li>现场调整<ol><li>监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key</li></ol></li><li>后台刷新数据<ol><li>启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失</li></ol></li><li>二级缓存<ol><li>设置不同的失效时间，保障不会被同时淘汰就行</li></ol></li><li>加锁<ol><li>分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！</li></ol></li></ol><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>​    缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过期监控难度较高，配合雪崩处理策略即可。</p><h2 id="4-缓存穿透"><a href="#4-缓存穿透" class="headerlink" title="4.缓存穿透"></a>4.缓存穿透</h2><h3 id="数据库服务器崩溃-2"><a href="#数据库服务器崩溃-2" class="headerlink" title="数据库服务器崩溃"></a>数据库服务器崩溃</h3><ol><li>系统平稳运行过程中</li><li>应用服务器流量随时间增量较大</li><li>Redis服务器命中率随时间逐步降低</li><li>Redis内存平稳，内存无压力</li><li>Redis服务器CPU占用激增</li><li>数据库服务器压力激增</li><li>数据库崩溃</li></ol><h3 id="问题排查-2"><a href="#问题排查-2" class="headerlink" title="问题排查"></a>问题排查</h3><ol><li>Redis中大面积出现未命中</li><li>出现非正常URL访问</li></ol><h3 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li>获取的数据在数据库中也不存在，数据库查询未得到对应数据</li><li>Redis获取到null数据未进行持久化，直接返回</li><li>下次此类数据到达重复上述过程</li><li>出现黑客攻击服务器</li></ul><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>缓存null<ol><li>对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30-60秒，最高5分钟</li></ol></li><li>白名单策略<ol><li>提前预热各种分类数据id对应的bitmaps，id作为bitmaps的offset，相当于设置了数据白名单。当加载正常数据时，放行，加载异常数据时直接拦截（效率偏低）</li><li>使用布隆过滤器（有关布隆过滤器的命中问题对当前状况可以忽略）</li></ol></li><li>实施监控<ol><li>实时监控redis命中率（业务正常范围时，通常会有一个波动值）与null数据的占比<ol><li>非活动时段波动：通常检测3-5倍，超过5倍纳入重点排查对象</li><li>活动时段波动：通常检测10-50倍，超过50倍纳入重点排查对象</li></ol></li><li>根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控（运营）</li></ol></li><li>key加密<ol><li>问题出现后，临时启动防灾业务key，对key进行业务层传输加密服务，设定校验程序，过来的key校验</li><li>例如每天随机分配60个加密串，挑选2到3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问</li></ol></li></ol><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul><li>缓存击穿访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时报警。应对策略应该在临时预案防范方面多做文章。</li><li>无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除。</li></ul><h2 id="5-性能指标监控"><a href="#5-性能指标监控" class="headerlink" title="5.性能指标监控"></a>5.性能指标监控</h2><h3 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a>监控指标</h3><ul><li>性能指标：Performance</li></ul><p><img src="../../images/rides/5/5-31.png" alt="5-31"></p><ul><li>内存指标：Memory</li></ul><p><img src="../../images/rides/5/5-32.png" alt="5-32"></p><ul><li>基本活动指标：Basic activity</li></ul><p><img src="../../images/rides/5/5-33.png" alt="5-33"></p><ul><li>持久性指标：Persistence</li></ul><p><img src="../../images/rides/5/5-34.png" alt="5-34"></p><ul><li>错误指标：Error</li></ul><p><img src="../../images/rides/5/5-35.png" alt="5-35"></p><h3 id="监控方式"><a href="#监控方式" class="headerlink" title="监控方式"></a>监控方式</h3><ul><li>工具<ul><li>Cloud Insight Redis</li><li>Prometheus</li><li>Redis-stat</li><li>Redis-faina</li><li>RedisLive</li><li>zabbix</li></ul></li><li>命令<ul><li>benchmark</li><li>redis cli</li><li>monitor</li><li>showlog</li></ul></li></ul><h3 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h3><ul><li>命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark [-h ] [-p ] [-c ] [-n &lt;requests]&gt; [-k ]</span><br></pre></td></tr></table></figure><ul><li>范例1：说明：50个连接，10000次请求对应的性能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark</span><br></pre></td></tr></table></figure><ul><li>范例2：说明：100个连接，5000次请求对应的性能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -c 100 -n 5000</span><br></pre></td></tr></table></figure><p>性能监控命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">直接在&#x2F;目录下</span><br><span class="line">&#x2F;]# redis-benchmark</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/5/5-36.png" alt="5-36"></p><h3 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h3><ul><li>命令：打印服务器调试信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">monitor</span><br></pre></td></tr></table></figure><h3 id="showlong"><a href="#showlong" class="headerlink" title="showlong"></a>showlong</h3><ul><li>命令<ul><li>get ：获取慢查询日志</li><li>len ：获取慢查询日志条目数</li><li>reset ：重置慢查询日志</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showlong [operator]</span><br></pre></td></tr></table></figure><ul><li>相关配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slowlog-log-slower-than 1000 #设置慢查询的时间下线，单位：微妙</span><br><span class="line">slowlog-max-len 100 #设置慢查询命令对应的日志显示长度，单位：命令数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rides的学习与使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="rides" scheme="https://linhuide.github.io/tags/rides/"/>
    
      <category term="JAVA" scheme="https://linhuide.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Rides再次学习4</title>
    <link href="https://linhuide.github.io/post/279b5897.html"/>
    <id>https://linhuide.github.io/post/279b5897.html</id>
    <published>2020-04-21T11:48:29.000Z</published>
    <updated>2020-04-27T11:41:23.673Z</updated>
    
    <content type="html"><![CDATA[<p>rides的学习与使用</p><a id="more"></a><h1 id="1-Redis-删除策略"><a href="#1-Redis-删除策略" class="headerlink" title="1.Redis 删除策略"></a>1.Redis 删除策略</h1><h2 id="1-1-过期数据"><a href="#1-1-过期数据" class="headerlink" title="1-1.过期数据"></a>1-1.过期数据</h2><h3 id="Redis中的数据特征"><a href="#Redis中的数据特征" class="headerlink" title="Redis中的数据特征"></a>Redis中的数据特征</h3><ul><li>Redis是一种内存级数据库，所有数据均存放在内存中，内存中的数据可以通过TTL指令获取其状态<ul><li>XX ：具有时效性的数据</li><li>-1 ：永久有效的数据</li><li>-2 ：已经过期的数据 或 被删除的数据 或 未定义的数据</li></ul></li></ul><p><img src="../../images/rides/4/4-1.png" alt="4-1"></p><p><img src="../../images/rides/4/4-2.png" alt="4-2"></p><h3 id="数据删除策略"><a href="#数据删除策略" class="headerlink" title="数据删除策略"></a>数据删除策略</h3><ol><li>定时删除</li><li>惰性删除</li><li>定期删除</li></ol><h2 id="1-2-数据删除策略"><a href="#1-2-数据删除策略" class="headerlink" title="1-2.数据删除策略"></a>1-2.数据删除策略</h2><h3 id="1-时效性数据的存储结构"><a href="#1-时效性数据的存储结构" class="headerlink" title="1.时效性数据的存储结构"></a>1.时效性数据的存储结构</h3><p><img src="../../images/rides/4/4-3.png" alt="4-3"></p><h3 id="2-数据删除策略的目标"><a href="#2-数据删除策略的目标" class="headerlink" title="2.数据删除策略的目标"></a>2.数据删除策略的目标</h3><p>在内存占用与CPU占用之间寻找一种平衡，顾此失彼都会造成整体redis性能的下降，甚至引发服务器宕机或内存泄露</p><h4 id="2-1-定时删除"><a href="#2-1-定时删除" class="headerlink" title="2-1.定时删除"></a>2-1.定时删除</h4><ul><li>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作</li><li>优点：节约内存，到时就删除，快速释放掉不必要的内存占用</li><li>缺点：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</li><li>总结：用处理器性能换取存储空间 （拿时间换空间）</li></ul><p><img src="../../images/rides/4/4-4.png" alt="4-4"></p><h4 id="2-2-惰性删除"><a href="#2-2-惰性删除" class="headerlink" title="2-2.惰性删除"></a>2-2.惰性删除</h4><ul><li>数据到达过期时间，不做处理。等下次访问该数据时<ul><li>如果未过期，返回数据</li><li>发现已过期，删除，返回不存在</li></ul></li><li>优点：节约CPU性能，发现必须删除的时候才删除</li><li>缺点：内存压力很大，出现长期占用内存的数据</li><li>总结：用存储空间换取处理器性能（拿时间换空间）</li></ul><p><img src="../../images/rides/4/4-5.png" alt="4-5"></p><h4 id="2-3-定期删除"><a href="#2-3-定期删除" class="headerlink" title="2-3.定期删除"></a>2-3.定期删除</h4><h5 id="两种方案都走极端，有没有折中方案？"><a href="#两种方案都走极端，有没有折中方案？" class="headerlink" title="两种方案都走极端，有没有折中方案？"></a>两种方案都走极端，有没有折中方案？</h5><ul><li>Redis启动服务器初始化时，读取配置server.hz的值，默认为10</li><li>每秒钟执行server.hz次<strong>serverCron()–&gt;databasesCron()–&gt;activeExpireCycle()</strong></li><li>activeExpireCycle()对每个expires[ * ] 逐一进行检测，每次执行250ms/server.hz</li><li>对某个expires[ * ] 检测时，随机挑选W个key检测<ul><li>如果key超时，删除key</li><li>如果一轮中删除的key的数量&gt;W*25%，循环该过程</li><li>如果一轮中删除的key的数量≤W<em>25%，检查下一个expires[</em>]，0-15循环</li><li>W取值=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值</li></ul></li><li>参数current_db用于记录activeExpireCycle() 进入哪个expires[*] 执行</li><li>如果activeExpireCycle()执行时间到期，下次从current_db继续向下执行</li></ul><p><img src="../../images/rides/4/4-6.png" alt="4-6"></p><ul><li>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</li><li>特点1：CPU性能占用设置有峰值，检测频度可自定义设置</li><li>特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理</li><li>总结：周期性抽查存储空间（随机抽查，重点抽查）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info server</span><br><span class="line">...</span><br><span class="line">hz:10</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="2-4-删除策略比对"><a href="#2-4-删除策略比对" class="headerlink" title="2.4.删除策略比对"></a>2.4.删除策略比对</h4><ol><li><p>定时删除</p><ol><li>节约内存，无占用</li><li>不分时段占用CPU资源，频度高</li><li>拿时间换空间</li></ol></li><li><p>惰性删除</p><ol><li>内存占用严重</li><li>延时执行，CPU利用率高</li><li>拿空间换时间</li></ol></li><li><p>定期删除</p><ol><li>内存定期随机清理</li><li>每秒花费固定的CPU资源维护内存</li><li>随机抽查，重点抽查</li></ol></li></ol><h2 id="1-3-逐出算法"><a href="#1-3-逐出算法" class="headerlink" title="1-3.逐出算法"></a>1-3.逐出算法</h2><h3 id="1-当新数据进入redis时，如果内存不足怎么办？"><a href="#1-当新数据进入redis时，如果内存不足怎么办？" class="headerlink" title="1.当新数据进入redis时，如果内存不足怎么办？"></a>1.当新数据进入redis时，如果内存不足怎么办？</h3><ul><li>Redis使用内存存储数据，在执行每一个命令前，会调用freeMemoryIfNeeded()检测内存是否充足。</li><li>如果内存不满足新加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。清理数据的策略称为逐出算法。</li><li>注意：逐出数据的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。当对所有数据尝试完毕后，如果不能达到内存清理的要求，将出现错误信息。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(error) OOM command not allowed when used memory &gt;'maxmemory'</span><br></pre></td></tr></table></figure><h3 id="2-影响数据逐出的相关配置"><a href="#2-影响数据逐出的相关配置" class="headerlink" title="2.影响数据逐出的相关配置"></a>2.影响数据逐出的相关配置</h3><ul><li>最大可使用内存：占用物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory</span><br></pre></td></tr></table></figure><ul><li>每次选取待删除数据的个数：选取数据时并不会全库扫描，导致严重的性能消耗，降低读写性能。因此采用随机获取数据的方式作为待检测删除数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-samples</span><br></pre></td></tr></table></figure><ul><li>删除策略：达到最大内存后的，对被挑选出来的数据进行删除的策略</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy</span><br></pre></td></tr></table></figure><h3 id="3-影响数据逐出的相关配置"><a href="#3-影响数据逐出的相关配置" class="headerlink" title="3.影响数据逐出的相关配置"></a>3.影响数据逐出的相关配置</h3><ul><li>检测易失数据（可能会过期的数据集server.db[i].expires ）<ul><li>volatile-lru：挑选最近最少使用的数据淘汰</li><li>volatile-lfu：挑选最近使用次数最少的数据淘汰</li><li>volatile-ttl：挑选将要过期的数据淘汰</li><li>volatile-random：任意选择数据淘汰</li></ul></li><li>检测全库数据（所有数据集server.db[i].dict ）<ul><li>allkeys-lru：挑选最近最少使用的数据淘汰</li><li>allkeys-lfu：挑选最近使用次数最少的数据淘汰</li><li>allkeys-random：任意选择数据淘汰</li></ul></li><li>放弃数据驱逐<ul><li>no-enviction（驱逐）：禁止驱逐数据（redis4.0中默认策略），会引发错误OOM（Out Of Memory）</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy volatile-lru</span><br></pre></td></tr></table></figure><h3 id="4-数据逐出策略配置依据"><a href="#4-数据逐出策略配置依据" class="headerlink" title="4.数据逐出策略配置依据"></a>4.数据逐出策略配置依据</h3><p>使用INFO命令输出监控信息，查询缓存 hit 和 miss 的次数，根据业务需求调优Redis配置</p><h1 id="2-高级数据结构"><a href="#2-高级数据结构" class="headerlink" title="2.高级数据结构"></a>2.高级数据结构</h1><h2 id="2-1-bitmaps"><a href="#2-1-bitmaps" class="headerlink" title="2-1.bitmaps"></a>2-1.bitmaps</h2><p><img src="../../images/rides/4/4-8.png" alt="4-8"></p><h3 id="2-Bitmaps类型的基础操作"><a href="#2-Bitmaps类型的基础操作" class="headerlink" title="2.Bitmaps类型的基础操作"></a>2.Bitmaps类型的基础操作</h3><ul><li>获取指定key对应偏移量上的bit值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getbit key offset</span><br></pre></td></tr></table></figure><ul><li>设置指定key对应偏移量上的bit值，value只能是1或0</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setbit bits 0 1</span><br><span class="line">getbit bits 0</span><br><span class="line">getbit bits 10</span><br><span class="line">默认不存在，为0</span><br><span class="line">setbit bits 100000000 1</span><br></pre></td></tr></table></figure><h3 id="3-Bitmaps类型的扩展操作"><a href="#3-Bitmaps类型的扩展操作" class="headerlink" title="3.Bitmaps类型的扩展操作"></a>3.Bitmaps类型的扩展操作</h3><p>业务场景：电影网站</p><ul><li>统计每天某一部电影是否被点播</li><li>统计每天有多少部电影被点播</li><li>统计每周/月/年有多少部电影被点播</li><li>统计年度哪部电影没有被点播</li></ul><p><img src="../../images/rides/4/4-9.png" alt="4-9"></p><ul><li>对指定key按位进行交、并、非、异或操作，并将结果保存到destKey中<ul><li>and：交</li><li>or：并</li><li>not：非</li><li>xor：异或</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitop op destKey key1 [key2...]</span><br></pre></td></tr></table></figure><ul><li>统计指定key中1的数量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcount key [start end]</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">flushdb</span><br><span class="line">setbit <span class="number">20880808</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">setbit <span class="number">20880808</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line">setbit <span class="number">20880808</span> <span class="number">8</span> <span class="number">1</span></span><br><span class="line">setbit <span class="number">20880809</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">setbit <span class="number">20880808</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line">setbit <span class="number">20880808</span> <span class="number">8</span> <span class="number">1</span></span><br><span class="line">bitcount <span class="number">20880808</span></span><br><span class="line"></span><br><span class="line">bitcount <span class="number">20880809</span></span><br><span class="line"></span><br><span class="line">setbit <span class="number">20880808</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line">bitcount <span class="number">20880808</span></span><br><span class="line"></span><br><span class="line">bitop <span class="keyword">or</span> <span class="number">08</span><span class="number">-09</span> <span class="number">20880808</span> <span class="number">20880809</span></span><br><span class="line">bitcount <span class="number">08</span><span class="number">-09</span></span><br><span class="line"><span class="number">7</span>个，但有两个重合，减<span class="number">2</span>个</span><br></pre></td></tr></table></figure><h3 id="4-redis-应用于信息状态统计"><a href="#4-redis-应用于信息状态统计" class="headerlink" title="4.redis 应用于信息状态统计"></a>4.redis 应用于信息状态统计</h3><h2 id="2-2-HyperLogLog"><a href="#2-2-HyperLogLog" class="headerlink" title="2-2.HyperLogLog"></a>2-2.HyperLogLog</h2><h3 id="1-统计独立UV"><a href="#1-统计独立UV" class="headerlink" title="1.统计独立UV"></a>1.统计独立UV</h3><ul><li>原始方案：set<ul><li>存储每个用户的id（字符串）</li></ul></li><li>改进方案：Bitmaps<ul><li>存储每个用户状态（bit）</li></ul></li><li>全新的方案：Hyperloglog</li></ul><h3 id="2-基数"><a href="#2-基数" class="headerlink" title="2.基数"></a>2.基数</h3><ul><li>基数是数据集去重后元素个数</li><li>HyperLogLog 是用来做基数统计的，运用了LogLog的算法</li></ul><p><img src="../../images/rides/4/4-10.png" alt="4-10"></p><h3 id="3-LogLog算法"><a href="#3-LogLog算法" class="headerlink" title="3.LogLog算法"></a>3.LogLog算法</h3><p><img src="../../images/rides/4/4-11.png" alt="4-11"></p><p><img src="../../images/rides/4/4-12.png" alt="4-12"></p><h3 id="4-HyperLogLog类型的基本操作"><a href="#4-HyperLogLog类型的基本操作" class="headerlink" title="4.HyperLogLog类型的基本操作"></a>4.HyperLogLog类型的基本操作</h3><ul><li>添加数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pfadd key element [element ...]</span><br></pre></td></tr></table></figure><ul><li>统计数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pfcount key [key ...]</span><br></pre></td></tr></table></figure><ul><li>合并数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pfmerge destkey sourcekey [sourcekey...]</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flushdb</span><br><span class="line">pfadd hll 001</span><br><span class="line">pfadd hll 001</span><br><span class="line">pfadd hll 001</span><br><span class="line">pfadd hll 001</span><br><span class="line">pfadd hll 001</span><br><span class="line">pfadd hll 002</span><br><span class="line">pfadd hll 002</span><br><span class="line">pfcount h11</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="5-redis-应用于独立信息统计"><a href="#5-redis-应用于独立信息统计" class="headerlink" title="5.redis 应用于独立信息统计"></a>5.redis 应用于独立信息统计</h3><h3 id="6-相关说明"><a href="#6-相关说明" class="headerlink" title="6.相关说明"></a>6.相关说明</h3><ul><li>用于进行基数统计，不是集合，不保存数据，只记录数量而不是具体数据</li><li>核心是基数估算算法，最终数值存在一定误差</li><li>误差范围：基数估计的结果是一个带有 0.81% 标准错误的近似值</li><li>耗空间极小，每个hyperloglog key占用了12K的内存用于标记基数</li><li>pfadd命令不是一次性分配12K内存使用，会随着基数的增加内存逐渐增大</li><li>Pfmerge命令合并后占用的存储空间为12K，无论合并之前数据量多少</li></ul><h2 id="2-3-GEO"><a href="#2-3-GEO" class="headerlink" title="2-3.GEO"></a>2-3.GEO</h2><h3 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1.应用场景"></a>1.应用场景</h3><p>火热的生活服务类软件</p><ul><li>微信 / 陌陌</li><li>美团 / 饿了么</li><li>携程 / 马蜂窝</li><li>高德 / 百度</li></ul><h3 id="2-GEO类型的基本操作"><a href="#2-GEO类型的基本操作" class="headerlink" title="2.GEO类型的基本操作"></a>2.GEO类型的基本操作</h3><ul><li>添加坐标点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geoadd key longitude latitude member [longitude latitude member ...]</span><br></pre></td></tr></table></figure><ul><li>获取坐标点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geopos key member [member ...]</span><br></pre></td></tr></table></figure><ul><li>计算坐标点距离</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geodist key member1 member2 [unit]</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flushdb</span><br><span class="line">geoadd geos 1 1 a</span><br><span class="line">geoadd geos 2 2 b</span><br><span class="line">geopos geos a</span><br><span class="line">geodist geos a b</span><br><span class="line">geodist geos a b m</span><br><span class="line">geodist geos a b km</span><br></pre></td></tr></table></figure><h3 id="3-基本操作2"><a href="#3-基本操作2" class="headerlink" title="3.基本操作2"></a>3.基本操作2</h3><ul><li>添加坐标点</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">georadius key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</span><br></pre></td></tr></table></figure><ul><li>获取坐标点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">georadiusbymember key member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</span><br></pre></td></tr></table></figure><ul><li>计算经纬度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geohash key member [member ...]</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">flushdb</span><br><span class="line">geoadd geos <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">geoadd geos <span class="number">1</span> <span class="number">2</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">geoadd geos <span class="number">1</span> <span class="number">3</span> <span class="number">1</span>,<span class="number">3</span></span><br><span class="line">geoadd geos <span class="number">2</span> <span class="number">1</span> <span class="number">2</span>,<span class="number">1</span></span><br><span class="line">geoadd geos <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>,<span class="number">2</span></span><br><span class="line">geoadd geos <span class="number">2</span> <span class="number">3</span> <span class="number">2</span>,<span class="number">3</span></span><br><span class="line">geoadd geos <span class="number">3</span> <span class="number">1</span> <span class="number">3</span>,<span class="number">1</span></span><br><span class="line">geoadd geos <span class="number">3</span> <span class="number">2</span> <span class="number">3</span>,<span class="number">2</span></span><br><span class="line">geoadd geos <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>,<span class="number">3</span></span><br><span class="line">geoadd geos <span class="number">5</span> <span class="number">5</span> <span class="number">5</span>,<span class="number">5</span></span><br><span class="line">求范围</span><br><span class="line">georadiusbymember geos <span class="number">2</span>,<span class="number">2</span> <span class="number">180</span> km</span><br><span class="line"></span><br><span class="line">georadiusbymember geos <span class="number">2</span>,<span class="number">2</span> <span class="number">120</span> km</span><br><span class="line"></span><br><span class="line">georadius geos <span class="number">1.5</span>,<span class="number">1.5</span> <span class="number">90</span> km</span><br><span class="line"></span><br><span class="line">geohash geos <span class="number">2</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="4-redis-应用于地理位置计算"><a href="#4-redis-应用于地理位置计算" class="headerlink" title="4.redis 应用于地理位置计算"></a>4.redis 应用于地理位置计算</h3><h1 id="3-主从复制"><a href="#3-主从复制" class="headerlink" title="3.主从复制"></a>3.主从复制</h1><h2 id="3-1-主从复制简介"><a href="#3-1-主从复制简介" class="headerlink" title="3-1.主从复制简介"></a>3-1.主从复制简介</h2><p>互联网“三高”架构：</p><ul><li>高并发</li><li>高性能</li><li>高可用</li></ul><p><img src="../../images/rides/4/4-13.png" alt="4-13"></p><p><img src="../../images/rides/4/4-14.png" alt="4-14"></p><h3 id="1-你的“Redis”是否高可用？"><a href="#1-你的“Redis”是否高可用？" class="headerlink" title="1.你的“Redis”是否高可用？"></a>1.你的“Redis”是否高可用？</h3><p>单机redis的风险与问题</p><ul><li>问题1.机器故障<ul><li>现象：硬盘故障、系统崩溃</li><li>本质：数据丢失，很可能对业务造成灾难性打击</li><li>结论：基本上会放弃使用redis.</li></ul></li><li>问题2.容量瓶颈<ul><li>现象：内存不足，从16G升级到64G，从64G升级到128G，无限升级内存</li><li>本质：穷，硬件条件跟不上</li><li>结论：放弃使用redis</li></ul></li><li>结论：<ul><li>为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服务器上，连接在一起，并保证数据是同步的。</li><li>即使有其中一台服务器宕机，其他服务器依然可以继续提供服务，实现Redis的高可用，同时实现数据冗余备份。</li></ul></li></ul><h3 id="2-多台服务器连接方案"><a href="#2-多台服务器连接方案" class="headerlink" title="2.多台服务器连接方案"></a>2.多台服务器连接方案</h3><ul><li>提供数据方：master<ul><li>主服务器，主节点，主库</li><li>主客户端</li></ul></li><li>接收数据方：slave<ul><li>从服务器，从节点，从库</li><li>从客户端</li></ul></li><li>需要解决的问题：<ul><li>数据同步</li></ul></li><li>核心工作：<ul><li>master的数据复制到slave中</li></ul></li></ul><p><img src="../../images/rides/4/4-15.png" alt="4-15"></p><h3 id="3-主从复制-1"><a href="#3-主从复制-1" class="headerlink" title="3.主从复制"></a>3.主从复制</h3><ul><li>主从复制即将master中的数据即时、有效的复制到slave中</li><li>特征：一个master可以拥有多个slave，一个slave只对应一个master</li><li>职责：</li><li>master:<ul><li>写数据</li><li>执行写操作时，将出现变化的数据自动同步到slave</li><li>读数据（可忽略）</li></ul></li><li>slave:<ul><li>读数据</li><li>写数据（禁止）</li></ul></li></ul><h3 id="4-高可用集群"><a href="#4-高可用集群" class="headerlink" title="4.高可用集群"></a>4.高可用集群</h3><p><img src="../../images/rides/4/4-15.png" alt="4-15"></p><p><img src="../../images/rides/4/4-16.png" alt="4-16"></p><p><img src="../../images/rides/4/4-17.png" alt="4-17"></p><p><img src="../../images/rides/4/4-18.png" alt="4-18"></p><h3 id="5-主从复制的作用"><a href="#5-主从复制的作用" class="headerlink" title="5.主从复制的作用"></a>5.主从复制的作用</h3><ul><li>读写分离：master写、slave读，提高服务器的读写负载能力</li><li>负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</li><li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式</li><li>高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</li></ul><h2 id="3-2-主从复制工作流程"><a href="#3-2-主从复制工作流程" class="headerlink" title="3-2.主从复制工作流程"></a>3-2.主从复制工作流程</h2><h3 id="1-主从复制过程大体可以分为3个阶段"><a href="#1-主从复制过程大体可以分为3个阶段" class="headerlink" title="1.主从复制过程大体可以分为3个阶段"></a>1.主从复制过程大体可以分为3个阶段</h3><ul><li>建立连接阶段（即准备阶段）</li><li>数据同步阶段</li><li>命令传播阶段</li></ul><p><img src="../../images/rides/4/4-19.png" alt="4-19"></p><h3 id="2-阶段一：建立连接阶段"><a href="#2-阶段一：建立连接阶段" class="headerlink" title="2.阶段一：建立连接阶段"></a>2.阶段一：建立连接阶段</h3><p> 建立slave到master的连接，使master能够识别slave，并保存slave端口号</p><p><strong>建立连接阶段工作流程：</strong></p><ul><li>步骤1：设置master的地址和端口，保存master信息</li><li>步骤2：建立socket连接</li><li>步骤3：发送ping命令（定时器任务）</li><li>步骤4：身份验证</li><li>步骤5：发送slave端口信息</li><li>至此，主从连接成功！</li></ul><p><strong>状态：</strong></p><ul><li><p>slave：</p><ul><li>保存master的地址与端口</li></ul></li><li><p>master：</p><ul><li>保存slave的端口</li></ul></li><li><p>总体：之间创建了连接的socket</p></li></ul><p><img src="../../images/rides/4/4-20.png" alt="4-20"></p><h3 id="3-主从连接（slave连接master）"><a href="#3-主从连接（slave连接master）" class="headerlink" title="3.主从连接（slave连接master）"></a>3.主从连接（slave连接master）</h3><ul><li>方式一：客户端发送命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><ul><li>方式二：启动服务器参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><ul><li>方式三：服务器配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/4/4-21.png" alt="4-21"></p><p>配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">vim redis<span class="number">-6379.</span>conf</span><br><span class="line">daemonize no</span><br><span class="line"><span class="meta">#logfile <span class="meta-string">"6379.conf"</span></span></span><br><span class="line"></span><br><span class="line">vim redis<span class="number">-6379.</span>conf</span><br><span class="line">daemonize no</span><br><span class="line"><span class="meta">#logfile <span class="meta-string">"6379.conf"</span></span></span><br><span class="line"></span><br><span class="line">客户端<span class="number">1</span>：redis-server /conf/redis<span class="number">-6379.</span>conf</span><br><span class="line">客户端<span class="number">2</span>：redis-server /conf/redis<span class="number">-6380.</span>conf</span><br><span class="line"></span><br><span class="line">客户端<span class="number">4</span>：</span><br><span class="line">redis-cli -p <span class="number">6380</span></span><br><span class="line">slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line">客户端<span class="number">3</span>：</span><br><span class="line">redis-cli</span><br><span class="line"><span class="built_in">set</span> name name</span><br><span class="line">客户端<span class="number">4</span>：</span><br><span class="line"><span class="built_in">get</span> name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">客户端<span class="number">1</span>：redis-server /conf/redis<span class="number">-6379.</span>conf</span><br><span class="line">客户端<span class="number">2</span>：redis-server /conf/redis<span class="number">-6380.</span>conf --slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line">客户端<span class="number">4</span>：</span><br><span class="line">redis-cli -p <span class="number">6380</span></span><br><span class="line">客户端<span class="number">3</span>：</span><br><span class="line">redis-cli</span><br><span class="line"><span class="built_in">set</span> name name</span><br><span class="line">客户端<span class="number">4</span>：</span><br><span class="line"><span class="built_in">get</span> name</span><br><span class="line"></span><br><span class="line">方式三：</span><br><span class="line">客户端<span class="number">2</span>：</span><br><span class="line">vim redis<span class="number">-6379.</span>conf</span><br><span class="line">slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line">redis-server /conf/redis<span class="number">-6380.</span>conf</span><br><span class="line">...一样测试步骤</span><br><span class="line">客户端<span class="number">3</span>：看配置</span><br><span class="line">info</span><br><span class="line">connected_slaves:..</span><br><span class="line">客户端<span class="number">4</span>：看配置</span><br><span class="line">info</span><br></pre></td></tr></table></figure><p><strong>主从断开连接</strong></p><ul><li>客户端发送命令：slaveof no one</li><li>说明：<ul><li>slave断开连接后，不会删除已有数据，只是不再接受master发送的数据</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端4：slaveof no one</span><br></pre></td></tr></table></figure><h3 id="4-授权访问"><a href="#4-授权访问" class="headerlink" title="4.授权访问"></a>4.授权访问</h3><ul><li>master客户端发送命令设置密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass &lt;password&gt;</span><br></pre></td></tr></table></figure><ul><li>master配置文件设置密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config set requirepass &lt;password&gt;</span><br><span class="line">config get requirepass</span><br></pre></td></tr></table></figure><ul><li>slave客户端发送命令设置密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth &lt;password&gt;</span><br></pre></td></tr></table></figure><ul><li>slave配置文件设置密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterauth &lt;password&gt;</span><br></pre></td></tr></table></figure><ul><li>slave启动服务器设置密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server –a &lt;password&gt;</span><br></pre></td></tr></table></figure><h3 id="5-阶段二：数据同步阶段工作流程"><a href="#5-阶段二：数据同步阶段工作流程" class="headerlink" title="5.阶段二：数据同步阶段工作流程"></a>5.阶段二：数据同步阶段工作流程</h3><ul><li>在slave初次连接master后，复制master中的所有数据到slave</li><li>将slave的数据库状态更新成master当前的数据库状态</li></ul><p><strong>数据同步阶段工作流程：</strong></p><ul><li>步骤1：请求同步数据</li><li>步骤2：创建RDB同步数据</li><li>步骤3：恢复RDB同步数据</li><li>步骤4：请求部分同步数据</li><li>步骤5：恢复部分同步数据</li><li>至此，数据同步工作完成！</li></ul><p><strong>状态：</strong></p><ul><li>slave：<ul><li>具有master端全部数据，包含RDB过程接收的数据</li></ul></li><li>master：<ul><li>保存slave当前数据同步的位置</li></ul></li><li>总体：之间完成了数据克隆</li></ul><p><img src="../../images/rides/4/4-22.png" alt="4-22"></p><p>数据同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">客户端1：redis-server &#x2F;conf&#x2F;redis-6379.conf</span><br><span class="line">客户端2：redis-server &#x2F;conf&#x2F;redis-6380.conf</span><br><span class="line">客户端4：</span><br><span class="line">redis-cli -p 6380</span><br><span class="line">slaveof 127.0.0.1 6379</span><br><span class="line">客户端3：</span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><h3 id="6-数据同步阶段master说明"><a href="#6-数据同步阶段master说明" class="headerlink" title="6.数据同步阶段master说明"></a>6.数据同步阶段master说明</h3><ol><li>如果master数据量巨大，数据同步阶段应避开流量高峰期，避免造成master阻塞，影响业务正常执行</li><li>复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态。</li><li>master单机内存占用主机内存的比例不应过大，建议使用50%-70%的内存，留下30%-50%的内存用于执行bgsave命令和创建复制缓冲区</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-backlog-<span class="built_in">size</span> <span class="number">1</span>mb</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/4/4-23.png" alt="4-23"></p><h3 id="7-数据同步阶段slave说明"><a href="#7-数据同步阶段slave说明" class="headerlink" title="7.数据同步阶段slave说明"></a>7.数据同步阶段slave说明</h3><ol><li>为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务</li><li>数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送命令</li><li>多个slave同时对master请求数据同步，master发送的RDB文件增多，会对带宽造成巨大冲击，如果master带宽不足，因此数据同步需要根据业务需求，适量错峰</li><li>slave过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是master，也是slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与最顶层master间数据同步延迟较大，数据一致性变差，应谨慎选择</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave-serve-stale-data yes|no</span><br></pre></td></tr></table></figure><h3 id="8-阶段三：命令传播阶段"><a href="#8-阶段三：命令传播阶段" class="headerlink" title="8.阶段三：命令传播阶段"></a>8.阶段三：命令传播阶段</h3><ul><li>当master数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的状态，同步的动作称为命令传播</li><li>master将接收到的数据变更命令发送给slave，slave接收命令后执行命令</li></ul><h3 id="9-命令传播阶段的部分复制"><a href="#9-命令传播阶段的部分复制" class="headerlink" title="9.命令传播阶段的部分复制"></a>9.命令传播阶段的部分复制</h3><ul><li>命令传播阶段出现了断网现象<ul><li>网络闪断闪连        忽略</li><li>短时间网络中断        部分复制</li><li>长时间网络中断        全量复制</li></ul></li><li>部分复制的三个核心要素<ul><li>服务器的运行 id（run id）</li><li>主服务器的复制积压缓冲区</li><li>主从服务器的复制偏移量</li></ul></li></ul><h3 id="10-服务器运行ID（runid）"><a href="#10-服务器运行ID（runid）" class="headerlink" title="10.服务器运行ID（runid）"></a>10.服务器运行ID（runid）</h3><ul><li>概念：服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id</li><li>组成：运行id由40位字符组成，是一个随机的十六进制字符<ul><li>例如：fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce</li></ul></li><li>作用：运行id被用于在服务器间进行传输，识别身份<ul><li>如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别</li></ul></li><li>实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID，通过info Server命令，可以查看节点的runid</li></ul><h3 id="11-复制缓冲区"><a href="#11-复制缓冲区" class="headerlink" title="11.复制缓冲区"></a>11.复制缓冲区</h3><ul><li>概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区</li></ul><p><img src="../../images/rides/4/4-24.png" alt="4-24"></p><p><img src="../../images/rides/4/4-25.png" alt="4-25"></p><h3 id="12-复制缓冲区内部工作原理"><a href="#12-复制缓冲区内部工作原理" class="headerlink" title="12.复制缓冲区内部工作原理"></a>12.复制缓冲区内部工作原理</h3><ul><li>组成<ul><li>偏移量</li><li>字节值</li></ul></li><li>工作原理<ul><li>通过offset区分不同的slave当前数据传播的差异</li><li>master记录已发送的信息对应的offset</li><li>slave记录已接收的信息对应的offset</li></ul></li></ul><p><img src="../../images/rides/4/4-26.png" alt="4-26"></p><h3 id="13-复制缓冲区"><a href="#13-复制缓冲区" class="headerlink" title="13.复制缓冲区"></a>13.复制缓冲区</h3><ul><li>概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区</li><li>复制缓冲区默认数据存储空间大小是1M，由于存储空间大小是固定的，当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列</li><li>由来：每台服务器启动时，如果开启有AOF或被连接成为master节点，即创建复制缓冲区</li><li>作用：用于保存master收到的所有指令（仅影响数据变更的指令，例如set，select）</li><li>数据来源：当master接收到主客户端的指令时，除了将指令执行，会将该指令存储到缓冲区中</li></ul><h3 id="14-主从服务器复制偏移量（offset）"><a href="#14-主从服务器复制偏移量（offset）" class="headerlink" title="14.主从服务器复制偏移量（offset）"></a>14.主从服务器复制偏移量（offset）</h3><ul><li>概念：一个数字，描述复制缓冲区中的指令字节位置</li><li>分类：<ul><li>master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）</li><li>slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）</li></ul></li><li>数据来源：<ul><li>master端：发送一次记录一次</li><li>slave端：接收一次记录一次</li></ul></li><li>作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</li></ul><h3 id="15-数据同步-命令传播阶段工作流程"><a href="#15-数据同步-命令传播阶段工作流程" class="headerlink" title="15.数据同步+命令传播阶段工作流程"></a>15.数据同步+命令传播阶段工作流程</h3><p><img src="../../images/rides/4/4-27.png" alt="4-27"></p><h3 id="16-心跳机制"><a href="#16-心跳机制" class="headerlink" title="16.心跳机制"></a>16.心跳机制</h3><ul><li>进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线</li><li>master心跳：<ul><li>指令：PING</li><li>周期：由repl-ping-slave-period决定，默认10秒</li><li>作用：判断slave是否在线</li><li>查询：INFO replication  获取slave最后一次连接时间间隔，lag项维持在0或1视为正常</li></ul></li><li>slave心跳任务<ul><li>指令：REPLCONF ACK {offset}</li><li>周期：1秒</li><li>作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令</li><li>作用2：判断master是否在线</li></ul></li></ul><h3 id="17-心跳阶段注意事项"><a href="#17-心跳阶段注意事项" class="headerlink" title="17.心跳阶段注意事项"></a>17.心跳阶段注意事项</h3><ul><li>当slave多数掉线，或延迟过高时，master为保障数据稳定性，将拒绝所有信息同步操作</li><li>slave数量少于2个，或者所有slave的延迟都大于等于10秒时，强制关闭master写功能，停止数据同步</li><li>slave数量由slave发送REPLCONF ACK命令做确认</li><li>slave延迟由slave发送REPLCONF ACK命令做确认</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">min</span>-slaves-to-<span class="built_in">write</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">min</span>-slaves-<span class="built_in">max</span>-lag <span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="18-主从复制工作流程（完整）"><a href="#18-主从复制工作流程（完整）" class="headerlink" title="18.主从复制工作流程（完整）"></a>18.主从复制工作流程（完整）</h3><p><img src="../../images/rides/4/4-28.png" alt="4-28"></p><h2 id="3-3-主从复制常见问题"><a href="#3-3-主从复制常见问题" class="headerlink" title="3-3.主从复制常见问题"></a>3-3.主从复制常见问题</h2><h3 id="1-频繁的全量复制"><a href="#1-频繁的全量复制" class="headerlink" title="1.频繁的全量复制"></a>1.频繁的全量复制</h3><ul><li>伴随着系统的运行，master的数据量会越来越大，一旦master重启，runid将发生变化，会导致全部slave的全量复制操作</li><li>内部优化调整方案：</li></ul><ol><li>master内部创建master_replid变量，使用runid相同的策略生成，长度41位，并发送给所有slave</li><li>在master关闭时执行命令 shutdown save，进行RDB持久化,将runid与offset保存到RDB文件中<ol><li>repl-id repl-offset</li><li>通过redis-check-rdb命令可以查看该信息</li></ol></li><li>master重启后加载RDB文件，恢复数据<ol><li>重启后，将RDB文件中保存的repl-id与repl-offset加载到内存中</li><li>master_repl_id = repl master_repl_offset = repl-offset</li><li>通过info命令可以查看该信息</li></ol></li><li>作用：<ol start="5"><li>本机保存上次runid，重启后恢复该值，使所有slave认为还是之前的master</li></ol></li></ol><ul><li>问题现象<ul><li>网络环境不佳，出现网络中断，slave不提供服务</li></ul></li><li>问题原因<ul><li>复制缓冲区过小，断网后slave的offset越界，触发全量复制</li></ul></li><li>最终结果<ul><li>slave反复进行全量复制</li></ul></li><li>解决方案<ul><li>修改复制缓冲区大小</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-backlog-size</span><br></pre></td></tr></table></figure><ul><li>设置如下：<ol><li>测算从master到slave的重连平均时长second</li><li>获取master平均每秒产生写命令数据总量write_size_per_second</li><li>最优复制缓冲区空间 = 2 * second * write_size_per_second</li></ol></li></ul><h3 id="2-频繁的网络中断1"><a href="#2-频繁的网络中断1" class="headerlink" title="2.频繁的网络中断1"></a>2.频繁的网络中断1</h3><ul><li>问题现象<ul><li>master的CPU占用过高 或 slave频繁断开连接</li></ul></li><li>问题原因<ul><li>slave每1秒发送REPLCONF ACK命令到master</li><li>当slave接到了慢查询时（keys * ，hgetall等），会大量占用CPU性能</li><li>master每1秒调用复制定时函数replicationCron()，比对slave发现长时间没有进行响应</li></ul></li><li>最终结果<ul><li>master各种资源（输出缓冲区、带宽、连接等）被严重占用</li></ul></li><li>解决方案<ul><li>通过设置合理的超时时间，确认是否释放slave</li><li>该参数定义了超时时间的阈值（默认60秒），超过该值，释放slave</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-timeout</span><br></pre></td></tr></table></figure><h3 id="3-频繁的网络中断2"><a href="#3-频繁的网络中断2" class="headerlink" title="3.频繁的网络中断2"></a>3.频繁的网络中断2</h3><ul><li>问题现象<ul><li>slave与master连接断开</li></ul></li><li>问题原因<ul><li>master发送ping指令频度较低</li><li>master设定超时时间较短</li><li>ping指令在网络中存在丢包</li></ul></li><li>解决方案<ul><li>提高ping指令发送的频度</li><li>超时时间repl-time的时间至少是ping指令频度的5到10倍，否则slave很容易判定超时</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-ping-slave-period</span><br></pre></td></tr></table></figure><h3 id="4-数据不一致"><a href="#4-数据不一致" class="headerlink" title="4.数据不一致"></a>4.数据不一致</h3><ul><li>问题现象<ul><li>多个slave获取相同数据不同步</li></ul></li><li>问题原因<ul><li>网络信息不同步，数据发送有延迟</li></ul></li><li>解决方案<ul><li>优化主从间的网络环境，通常放置在同一个机房部署，如使用阿里云等云服务器时要注意此现象</li><li>监控主从节点延迟（通过offset）判断，如果slave延迟过大，暂时屏蔽程序对该slave的数据访问</li><li>开启后仅响应info、slaveof等少数命令（慎用，除非对数据一致性要求很高）</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave-serve-stale-data yes|no</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rides的学习与使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="rides" scheme="https://linhuide.github.io/tags/rides/"/>
    
      <category term="JAVA" scheme="https://linhuide.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>nginx学习与使用-1</title>
    <link href="https://linhuide.github.io/post/fc64138.html"/>
    <id>https://linhuide.github.io/post/fc64138.html</id>
    <published>2020-04-20T14:38:13.000Z</published>
    <updated>2020-04-27T11:41:23.657Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="1-什么是-nginx"><a href="#1-什么是-nginx" class="headerlink" title="1.什么是 nginx"></a>1.什么是 nginx</h1><ul><li>Nginx (“engine x”) 是一个高性能的 HTTP 和反向代理服务器,特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等</li><li>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。</li><li>Nginx 是高性能的 HTTP 和反向代理的服务器，处理高并发能力是十分强大的，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。</li></ul><h1 id="2-正向代理"><a href="#2-正向代理" class="headerlink" title="2 .正向代理"></a>2 .正向代理</h1><ul><li>Nginx 不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。</li><li>正向代理：如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</li><li>正向代理：需要在客户端配置代理服务器进行指定网站访问</li></ul><p><img src="../images/nginx/1.png" alt="1"></p><p><img src="../images/nginx/2.png" alt="2"></p><h1 id="3-反向代理"><a href="#3-反向代理" class="headerlink" title="3.反向代理"></a>3.反向代理</h1><ul><li>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。</li><li>反向代理，暴露的是代理服务器地址，隐藏了真实服务器 IP </li></ul><p><img src="../images/nginx/3.png" alt="3"></p><p><img src="../images/nginx/5.png" alt="5"></p><p><img src="../images/nginx/4.png" alt="4"></p><h1 id="4-负载均衡"><a href="#4-负载均衡" class="headerlink" title="4.负载均衡"></a>4.负载均衡</h1><ul><li>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。</li><li>这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成本也低。但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易造成服务器直接崩溃。</li><li>很明显这是由于服务器性能的瓶颈造成的问题，那么如何解决这种情况呢？</li><li>我们首先想到的可能是升级服务器的配置，比如提高 CPU 执行频率，加大内存等提高机器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的性能提升已经不能满足日益提升的需求了。</li><li>最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能够满足需求的。那么怎么办呢？</li><li>上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题的办法行不通了，那么横向增加服务器的数量呢？</li><li>这时候集群的概念产生了，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡</li><li>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的<strong>负载均衡</strong></li></ul><p><img src="../images/nginx/7.png" alt="7"></p><p><img src="../images/nginx/8.png" alt="8"></p><h1 id="5-动静分离"><a href="#5-动静分离" class="headerlink" title="5.动静分离"></a>5.动静分离</h1><ul><li>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</li><li>动静分离前</li></ul><p><img src="../images/nginx/6.png" alt="6"></p><ul><li>分离后<img src="../images/nginx/10.png" alt="10"></li></ul><p><img src="../images/nginx/9.png" alt="9"></p><h1 id="6-在linux上的安装"><a href="#6-在linux上的安装" class="headerlink" title="6.在linux上的安装"></a>6.在linux上的安装</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;1-什么是-nginx&quot;&gt;&lt;a href=&quot;#1-什么是-nginx&quot; class=&quot;headerlink&quot; title=&quot;1.什么是 nginx&quot;&gt;&lt;/a&gt;1.什么是 nginx&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Nginx (“e
      
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Nginx" scheme="https://linhuide.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令使用</title>
    <link href="https://linhuide.github.io/post/69e68e84.html"/>
    <id>https://linhuide.github.io/post/69e68e84.html</id>
    <published>2020-04-20T03:21:53.000Z</published>
    <updated>2020-04-26T06:25:10.268Z</updated>
    
    <content type="html"><![CDATA[<p>Linux命令使用</p><a id="more"></a><h1 id="1-切换目录命令cd"><a href="#1-切换目录命令cd" class="headerlink" title="1.切换目录命令cd"></a>1.切换目录命令cd</h1><ul><li>cd app    ：    切换到app目录 </li><li>cd ..    ：    切换到上一层目录 </li><li>cd /    ：    切换到系统根目录 </li><li>cd ~    ：    切换到用户主目录 </li><li>cd -    ：    切换到上一个所在目录</li></ul><h1 id="2-列出文件列表：ls-ll-dir"><a href="#2-列出文件列表：ls-ll-dir" class="headerlink" title="2.列出文件列表：ls ll dir"></a>2.列出文件列表：ls ll dir</h1><p>ls (list) 是一个非常有用的命令，用来显示当前目录下的内容。配合参数的使用，能以不同的方式显示目录内容。</p><ul><li>格式：ls[参数] [路径或文件名]</li></ul><p>常用：</p><ul><li>ls</li><li>ls -a：    显示所有文件或目录（包含隐藏的文件）</li><li>ls -l：    缩写成ll</li><li>在linux中以 . 开头的文件都是隐藏的文件</li></ul><h1 id="3-创建目录和移除目录：mkdir、rmdir"><a href="#3-创建目录和移除目录：mkdir、rmdir" class="headerlink" title="3.创建目录和移除目录：mkdir、rmdir"></a>3.创建目录和移除目录：mkdir、rmdir</h1><ol><li>mkdir(make directory)命令可用来创建子目录。</li></ol><ul><li>mkdir app    ：    在当前目录下创建app目录</li><li>mkdir –p app2/test    ：    级联创建aap2以及test目</li></ul><ol start="2"><li>rmdir(remove directory)命令可用来删除“空”的子目录：</li></ol><ul><li>rmdir app    ：    删除app目录</li></ul><h1 id="4-浏览文件：cat、more、less"><a href="#4-浏览文件：cat、more、less" class="headerlink" title="4.浏览文件：cat、more、less"></a>4.浏览文件：cat、more、less</h1><ol><li>cat：用于显示文件的内容。格式：cat[参数]&lt;文件名&gt;</li></ol><ul><li>cat yum.conf</li></ul><ol start="2"><li>more：一般用于要显示的内容会超过一个画面长度的情况。<ol><li>按空格键显示下一个画面。</li><li>回车显示下一行内容。</li><li>按 q 键退出查看。</li></ol></li></ol><ul><li>more yum.conf    ：    空格显示下一页数据  回车显示下一行的数据</li></ul><ol start="3"><li>less：用法和more类似，不同的是less可以通过PgUp、PgDn键来控制。</li></ol><ul><li>less yum.conf    ：    PgUp 和 PgDn 进行上下翻页.</li></ul><h1 id="5-用于显示文件后几行的内容：tail"><a href="#5-用于显示文件后几行的内容：tail" class="headerlink" title="5.用于显示文件后几行的内容：tail"></a>5.用于显示文件后几行的内容：tail</h1><p>tail命令是在实际使用过程中使用非常多的一个命令，它的功能是：用于显示文件后几行的内容。</p><p>用法:</p><ul><li>tail -10 /etc/passwd    ：    查看后10行数据</li><li>tail -f catalina.log     ：    动态查看日志(*****)</li><li>ctrl+c 结束查看</li></ul><h1 id="6-文件操作-删除，复制，剪切，打包，查找"><a href="#6-文件操作-删除，复制，剪切，打包，查找" class="headerlink" title="6.文件操作-删除，复制，剪切，打包，查找"></a>6.文件操作-删除，复制，剪切，打包，查找</h1><h2 id="1-rm（删除）"><a href="#1-rm（删除）" class="headerlink" title="1.rm（删除）"></a>1.rm（删除）</h2><ol><li>rm  删除文件。用法：rm [选项]… 文件…</li></ol><ul><li>rm a.txt     ：    删除a.txt文件<ul><li>删除需要用户确认，y/n</li></ul></li></ul><ol start="2"><li>rm 删除不询问</li></ol><ul><li>rm -f a.txt      ：    不询问，直接删除</li></ul><ol start="3"><li>rm 删除目录</li></ol><ul><li><p>rm -r a     ：    递归删除</p><ul><li>删除需要用户确认，y/n</li></ul></li><li><p>不询问递归删除（慎用）</p><ul><li>rm -rf  a     ：    不询问递归删除</li><li>rm -rf *     ：    删除所有文件</li><li>rm -rf /*     ：    自杀</li></ul></li></ul><h2 id="2-cp、mv（复制，剪切或移动）"><a href="#2-cp、mv（复制，剪切或移动）" class="headerlink" title="2.cp、mv（复制，剪切或移动）"></a>2.cp、mv（复制，剪切或移动）</h2><ul><li><p>cp(copy)命令可以将文件从一处复制到另一处。</p></li><li><p>一般在使用cp命令时将一个文件复制成另一个文件或复制到某目录时，需要指定源文件名与目标文件名或目录。</p></li><li><p>cp a.txt b.txt     ：    将a.txt复制为b.txt文件</p></li><li><p>cp a.txt a/b.txt      ：    将a.txt复制为a路径下的b.txt文件</p></li><li><p>cp a.txt ../      ：    将a.txt文件复制到上一层目录中</p></li></ul><ol start="2"><li>mv 移动或者重命名</li></ol><ul><li>mv a.txt ../      ：    将a.txt文件移动到上一层目录中</li><li>mv a.txt aaa/     ：    将a.txt文件移动到aaa目录中，没有aaa目录，创建一个</li><li>mv a.txt b.txt     ：    将a.txt文件重命名为b.txt</li></ul><h2 id="3-tar，打包或解压"><a href="#3-tar，打包或解压" class="headerlink" title="3.tar，打包或解压"></a>3.tar，打包或解压</h2><ul><li>tar命令位于/bin目录下，它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。</li><li>一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成xxx.tar.gz(或称为xxx.tgz)的文件。</li></ul><p>常用参数：</p><ul><li>-c：创建一个新tar文件</li><li>-v：显示运行过程的信息</li><li>-f：指定文件名</li><li>-z：调用gzip压缩命令进行压缩</li><li>-t：查看压缩文件的内容</li><li>-x：解开tar文件</li></ul><ol><li>打包：</li></ol><ul><li>tar –cvf xxx.tar ./*     ：    当前路径所有文件</li></ul><ol start="2"><li>打包并且压缩：</li></ol><ul><li>tar –zcvf xxx.tar.gz ./* </li><li>ll –h     ：    显示当前大小（k）</li></ul><ol start="3"><li>解压 </li></ol><ul><li>tar –xvf xxx.tar     ：     解压</li><li>tar -xvf xxx.tar.gz -C /usr/aaa      ：     解压，同时将文件移到/usr/aaa   。大写C</li></ul><h2 id="4-grep、查找符合条件的字符串"><a href="#4-grep、查找符合条件的字符串" class="headerlink" title="4.grep、查找符合条件的字符串"></a>4.grep、查找符合条件的字符串</h2><ul><li>grep：找符合条件的字符串。用法：grep [选项]… PATTERN [FILE]…</li></ul><p>示例：</p><ul><li>grep lang anaconda-ks.cfg     ：     在文件中查找lang</li><li>grep lang anaconda-ks.cfg –color     ：     高亮显示</li><li>grep lang anaconda-ks.cfg –color -A5     ：     往后5行都显示出来</li><li>grep lang anaconda-ks.cfg –color  -A5 -B5    ：     往后5行，往前3行都显示出来</li></ul><h1 id="7-其他常用命令"><a href="#7-其他常用命令" class="headerlink" title="7.其他常用命令"></a>7.其他常用命令</h1><h2 id="1-显示当前所在目录：pwd"><a href="#1-显示当前所在目录：pwd" class="headerlink" title="1.显示当前所在目录：pwd"></a>1.显示当前所在目录：pwd</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><h2 id="2-创建一个空文件：touch"><a href="#2-创建一个空文件：touch" class="headerlink" title="2.创建一个空文件：touch"></a>2.创建一个空文件：touch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch a.txt</span><br></pre></td></tr></table></figure><h2 id="3-友好显示文件大小"><a href="#3-友好显示文件大小" class="headerlink" title="3.友好显示文件大小"></a>3.友好显示文件大小</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll -h</span><br></pre></td></tr></table></figure><h2 id="4-下载资料：wget"><a href="#4-下载资料：wget" class="headerlink" title="4.下载资料：wget"></a>4.下载资料：wget</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.9.12.tar.gz</span><br></pre></td></tr></table></figure><h1 id="8-Vi和Vim编辑器"><a href="#8-Vi和Vim编辑器" class="headerlink" title="8.Vi和Vim编辑器"></a>8.Vi和Vim编辑器</h1><ul><li>在Linux下一般使用vi编辑器来编辑文件：vi既可以查看文件也可以编辑文件。</li><li>三种模式：命令行、插入、底行模式。</li><li>切换到命令行模式：按Esc键；</li><li>切换到插入模式：按 i 、o、a键；<ul><li>i 在当前位置生前插入</li><li>I 在当前行首插入</li><li>a 在当前位置后插入</li><li>A 在当前行尾插入</li><li>o 在当前行之后插入一行</li><li>O 在当前行之前插入一行</li></ul></li><li>切换到底行模式：按 :（冒号）；</li></ul><ol><li>打开文件     ：    vim file</li><li>退出     ：    esc à :q</li><li>修改文件     ：    输入i进入插入模式<ol><li>i：在当前的光标所在处插入</li><li>o：在当前光标所在的行的下一行插入</li><li>a：在光标所在的下一个字符插入</li></ol></li><li>保存并退出     ：    escà:wq</li><li>不保存退出     ：    escà:q!</li><li>dd – 快速删除一行</li><li>R – 替换</li></ol><h1 id="9-重定向输出-gt-和-gt-gt"><a href="#9-重定向输出-gt-和-gt-gt" class="headerlink" title="9.重定向输出&gt;和&gt;&gt;"></a>9.重定向输出&gt;和&gt;&gt;</h1><ul><li><p>&gt; 重定向输出，覆盖原有内容；</p></li><li><p>&gt;&gt; 重定向输出，又追加功能；</p></li></ul><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将输出定向到a.txt中</span><br><span class="line">cat /etc/passwd &gt; a.txt  </span><br><span class="line">输出并且追加</span><br><span class="line">cat /etc/passwd &gt;&gt; a.txt  </span><br><span class="line"></span><br><span class="line">cat ifconfig &gt; ifconfig.txt</span><br></pre></td></tr></table></figure><h1 id="10-管道"><a href="#10-管道" class="headerlink" title="10.管道 |"></a>10.管道 |</h1><p>管道是Linux命令中重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入。</p><p>ps -ef  | grep XXX</p><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">分页查询帮助信息</span><br><span class="line">ls --help | more  </span><br><span class="line"></span><br><span class="line">查询名称中包含java的进程</span><br><span class="line">ps –ef | grep java  </span><br><span class="line"></span><br><span class="line">ifconfig | more</span><br><span class="line"></span><br><span class="line">cat index.html | more</span><br><span class="line"></span><br><span class="line">ps –ef | grep aio</span><br></pre></td></tr></table></figure><h1 id="11-amp-amp-命令执行控制"><a href="#11-amp-amp-命令执行控制" class="headerlink" title="11&amp;&amp;命令执行控制"></a>11&amp;&amp;命令执行控制</h1><ul><li>命令之间使用 &amp;&amp; 连接，实现逻辑与的功能。 </li><li>只有在 &amp;&amp; 左边的命令返回真（命令返回值 $? == 0），&amp;&amp; 右边的命令才会被执行。 </li><li>只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> test &amp;&amp; cd test</span><br></pre></td></tr></table></figure><p>mkdir test &amp;&amp; cd test</p><h1 id="12-网络通讯命令-ifconfig-、ping-、netstat"><a href="#12-网络通讯命令-ifconfig-、ping-、netstat" class="headerlink" title="12.网络通讯命令:ifconfig  、ping   、netstat"></a>12.网络通讯命令:ifconfig  、ping   、netstat</h1><ul><li><p>ifconfig  显示或设置网络设备。</p><ul><li>ifconfig：显示网络设备</li><li>ifconfig eth0 up：启用eth0网卡</li><li>ifconfig eth0 down ：停用eth0网卡</li></ul></li><li><p>ping   探测网络是否通畅。</p><ul><li>ping 192.168.0.1</li></ul></li><li><p>netstat 查看网络端口。</p><ul><li>netstat -an | grep 3306 ：查询3306端口占用情况</li></ul></li></ul><h1 id="13-系统管理命令"><a href="#13-系统管理命令" class="headerlink" title="13.系统管理命令"></a>13.系统管理命令</h1><ul><li><p>date 显示或设置系统时间</p><ul><li>date  ：显示当前系统时间</li><li>date -s “2014-01-01 10:10:10“  ：设置系统时间</li></ul></li><li><p>df 显示磁盘信息</p><ul><li>df –h  友好显示大小</li></ul></li><li><p>free 显示内存状态</p><ul><li>free –m 以mb单位显示内存组昂头</li></ul></li><li><p>top   ：显示，管理执行中的程序</p></li><li><p>clear ：清屏幕</p></li><li><p>ps    正在运行的某个进程的状态</p><ul><li>ps –ef  ：查看所有进程</li><li>ps –ef | grep ssh 查找某一进程</li></ul></li><li><p>kill  杀掉某一进程</p><ul><li>kill 2868 ：杀掉2868编号的进程</li><li>kill -9 2868  ：强制杀死进程</li></ul></li><li><p>du 显示目录或文件的大小。</p><ul><li>du –h ：显示当前目录的大小</li></ul></li><li><p>who 显示目前登入系统的用户信息。</p></li><li><p>hostname 查看当前主机名</p><ul><li>修改：vi /etc/sysconfig/network</li></ul></li><li><p>uname 显示系统信息。</p><ul><li>uname -a：显示本机详细信息。</li><li>依次为：内核名称(类别)，主机名，内核版本号，内核版本，内核编译日期，硬件名，处理器类型，硬件平台类型，操作系统名称</li></ul></li></ul><h1 id="14-用户的管理：useradd、passwd、su、userdel"><a href="#14-用户的管理：useradd、passwd、su、userdel" class="headerlink" title="14.用户的管理：useradd、passwd、su、userdel"></a>14.用户的管理：useradd、passwd、su、userdel</h1><ul><li><p>useradd 添加一个用户</p><ul><li>useradd test ：添加test用户</li><li>useradd test -d /home/t1  ：指定用户home目录</li></ul></li><li><p>passwd  设置、修改密码</p><ul><li>passwd test  ：为test用户设置密码，下一行输入密码</li></ul></li><li><p>切换登录：    ssh -l test -p 22 192.168.19.128</p></li><li><p>切换：    su – 用户名</p></li><li><p>退出：     exit</p></li><li><p>userdel    删除一个用户</p><ul><li>userdel test   ：  删除test用户(不会删除home目录)</li><li>userdel –r test   ：  删除用户以及home目录</li></ul></li></ul><h1 id="15-组管理"><a href="#15-组管理" class="headerlink" title="15.组管理"></a>15.组管理</h1><ul><li><p>当在创建一个新用户user时，若没有指定他所属于的组，就建立一个和该用户同名的私有组</p></li><li><p>创建用户时也可以指定所在组</p></li><li><p>groupadd  创建组</p><ul><li>groupadd public  ： 创建一个名为public的组</li><li>useradd u1 –g public  创建用户指定组</li></ul></li><li><p>groupdel      删除组，如果该组有用户成员，必须先删除用户才能删除组。</p><ul><li>groupdel public</li></ul></li></ul><h1 id="16-id，su命令"><a href="#16-id，su命令" class="headerlink" title="16.id，su命令"></a>16.id，su命令</h1><h2 id="1-id命令"><a href="#1-id命令" class="headerlink" title="1.id命令"></a>1.id命令</h2><ul><li>功能：查看一个用户的UID和GID</li><li>用法：id [选项]… [用户名]</li><li>直接使用：   id</li><li>直接使用：   id  root</li></ul><h2 id="2-su命令"><a href="#2-su命令" class="headerlink" title="2.su命令"></a>2.su命令</h2><ul><li>功能：切换用户。</li><li>用法：su [选项]… [-] [用户 [参数]… ]</li></ul><p>示例：</p><ul><li>su u1  ：切换到u1用户</li><li>su - u1 ：切换到u1用户，并且将环境也切换到u1用户的环境（推荐使用）</li></ul><h2 id="3-账户文件"><a href="#3-账户文件" class="headerlink" title="3.账户文件"></a>3.账户文件</h2><ul><li>/etc/passwd  用户文件</li><li>/etc/shadow  密码文件</li><li>/etc/group  组信息文件</li></ul><h3 id="3-1-用户文件"><a href="#3-1-用户文件" class="headerlink" title="3-1.用户文件"></a>3-1.用户文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br></pre></td></tr></table></figure><ul><li>账号名称：       在系统中是唯一的</li><li>用户密码：       此字段存放加密口令</li><li>用户标识码(User ID)：  系统内部用它来标示用户</li><li>组标识码(Group ID)：   系统内部用它来标识用户属性</li><li>用户相关信息：        例如用户全名等</li><li>用户目录：       用户登录系统后所进入的目录</li><li>用户环境:        用户工作的环境</li></ul><h3 id="3-2-密码文件"><a href="#3-2-密码文件" class="headerlink" title="3-2.密码文件"></a>3-2.密码文件</h3><ul><li>shadow文件中每条记录用冒号间隔的9个字段组成.</li><li>用户名：用户登录到系统时使用的名字，而且是惟一的</li><li>口令：  存放加密的口令</li><li>最后一次修改时间:  标识从某一时刻起到用户最后一次修改时间</li><li>最大时间间隔:  口令保持有效的最大天数，即多少天后必须修改口令</li><li>最小时间间隔：    再次修改口令之间的最小天数</li><li>警告时间：从系统开始警告到口令正式失效的天数</li><li>不活动时间：  口令过期少天后，该账号被禁用</li><li>失效时间：指示口令失效的绝对天数(从1970年1月1日开始计算)</li><li>标志：未使用</li></ul><h3 id="3-3-组文件"><a href="#3-3-组文件" class="headerlink" title="3-3.组文件"></a>3-3.组文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:x:<span class="number">0</span>:</span><br></pre></td></tr></table></figure><ul><li>组名：用户所属组</li><li>组口令：一般不用</li><li>GID：组ID</li><li>用户列表：属于该组的所有用户</li></ul><h1 id="17-文件权限"><a href="#17-文件权限" class="headerlink" title="17.文件权限"></a>17.文件权限</h1><p><img src="../../images/linux/%E5%91%BD%E4%BB%A4/1.png" alt="1"></p><p><img src="../../images/linux/%E5%91%BD%E4%BB%A4/2.png" alt="2"></p><h2 id="1-Linux三种文件类型"><a href="#1-Linux三种文件类型" class="headerlink" title="1.Linux三种文件类型"></a>1.Linux三种文件类型</h2><ul><li>普通文件： 包括文本文件、数据文件、可执行的二进制程序文件等。 </li><li>目录文件： Linux系统把目录看成是一种特殊的文件，利用它构成文件系统的树型结构。  </li><li>设备文件： Linux系统把每一个设备都看成是一个文件</li></ul><h2 id="2-文件类型标识"><a href="#2-文件类型标识" class="headerlink" title="2.文件类型标识"></a>2.文件类型标识</h2><ul><li>普通文件（-）</li><li>目录（d）</li><li>符号链接（l）</li></ul><p>进入etc可以查看，相当于快捷方式</p><ul><li>字符设备文件（c）</li><li>块设备文件（s）</li><li>套接字（s） </li><li>命名管道（p）</li></ul><h2 id="3-文件权限管理"><a href="#3-文件权限管理" class="headerlink" title="3.文件权限管理"></a>3.文件权限管理</h2><ul><li><p>chmod 变更文件或目录的权限。</p><ul><li>chmod 755 a.txt  : 755–&gt;rwxr-xr-x</li><li>chmod u=rwx,g=rx,o=rx a.txt</li><li>chmod 000 a.txt  / chmod 777 a.txt  :  极限情况</li></ul></li><li><p>chown 变更文件或目录改文件所属用户和组</p><ul><li>chown u1:public a.txt  ：变更当前的目录或文件的所属用户和组</li><li>chown -R u1:public dir ：变更目录中的所有的子目录及文件的所属用户和组</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux命令使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://linhuide.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://linhuide.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>mysql高级使用4</title>
    <link href="https://linhuide.github.io/post/47ec6b58.html"/>
    <id>https://linhuide.github.io/post/47ec6b58.html</id>
    <published>2020-04-18T11:49:15.000Z</published>
    <updated>2020-04-19T17:23:55.241Z</updated>
    
    <content type="html"><![CDATA[<p>mysql-</p><a id="more"></a><h1 id="1-MySql中常用工具"><a href="#1-MySql中常用工具" class="headerlink" title="1. MySql中常用工具"></a>1. MySql中常用工具</h1><h2 id="1-1-mysql"><a href="#1-1-mysql" class="headerlink" title="1.1 mysql"></a>1.1 mysql</h2><p>该mysql不是指mysql服务，而是指mysql的客户端工具。</p><p>语法 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql [options] [database]</span><br></pre></td></tr></table></figure><h3 id="1-1-1-连接选项"><a href="#1-1-1-连接选项" class="headerlink" title="1.1.1 连接选项"></a>1.1.1 连接选项</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">-u, <span class="comment">--user=name指定用户名</span></span><br><span class="line">-p, <span class="comment">--password[=name]指定密码</span></span><br><span class="line">-h, <span class="comment">--host=name指定服务器IP或域名</span></span><br><span class="line">-P, <span class="comment">--port=#指定连接端口</span></span><br><span class="line"></span><br><span class="line">示例 ：</span><br><span class="line">mysql -h 127.0.0.1 -P 3306 -u root -p</span><br><span class="line"></span><br><span class="line">mysql -h127.0.0.1 -P3306 -uroot -p2143</span><br></pre></td></tr></table></figure><h3 id="1-1-2-执行选项"><a href="#1-1-2-执行选项" class="headerlink" title="1.1.2 执行选项"></a>1.1.2 执行选项</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-e, <span class="comment">--execute=name执行SQL语句并退出</span></span><br></pre></td></tr></table></figure><p>此选项可以在Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行，对于一些批处理脚本，这种方式尤其方便。</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p2143 db01 -e "<span class="keyword">select</span> * <span class="keyword">from</span> tb_book<span class="string">";</span></span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-1.png" alt="4-1"></p><h2 id="1-2-mysqladmin"><a href="#1-2-mysqladmin" class="headerlink" title="1.2 mysqladmin"></a>1.2 mysqladmin</h2><ul><li>mysqladmin 是一个执行管理操作的客户端程序。</li><li>可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</li><li>可以通过 ： mysqladmin –help  指令查看帮助文档</li></ul><p><img src="../../images/mysql/4/4-2.png" alt="4-2"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例 ：</span><br><span class="line">mysqladmin -uroot -p2143 <span class="keyword">create</span> <span class="string">'test01'</span>;  </span><br><span class="line">mysqladmin -uroot -p2143 <span class="keyword">drop</span> <span class="string">'test01'</span>;</span><br><span class="line">mysqladmin -uroot -p2143 version;</span><br></pre></td></tr></table></figure><h2 id="1-3-mysqlbinlog"><a href="#1-3-mysqlbinlog" class="headerlink" title="1.3 mysqlbinlog"></a>1.3 mysqlbinlog</h2><p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具。</p><p>语法 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog [options]  log-files1 log-files2 ...</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line"></span><br><span class="line">-d, <span class="comment">--database=name : 指定数据库名称，只列出指定的数据库相关操作。</span></span><br><span class="line"></span><br><span class="line">-o, <span class="comment">--offset=# : 忽略掉日志中的前n行命令。</span></span><br><span class="line"></span><br><span class="line">-r,<span class="comment">--result-file=name : 将输出的文本格式日志输出到指定文件。</span></span><br><span class="line"></span><br><span class="line">-s, <span class="comment">--short-form : 显示简单格式， 省略掉一些信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--start-datatime=date1  --stop-datetime=date2 : 指定日期间隔内的所有日志。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--start-position=pos1 --stop-position=pos2 : 指定位置间隔内的所有日志。</span></span><br></pre></td></tr></table></figure><h2 id="1-4-mysqldump"><a href="#1-4-mysqldump" class="headerlink" title="1.4 mysqldump"></a>1.4 mysqldump</h2><ul><li>mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。</li><li>备份内容包含创建表，及插入表的SQL语句。</li></ul><p>语法 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line"></span><br><span class="line">mysqldump [options] <span class="comment">--database/-B db1 [db2 db3...]</span></span><br><span class="line"></span><br><span class="line">mysqldump [options] <span class="comment">--all-databases/-A</span></span><br></pre></td></tr></table></figure><h3 id="1-4-1-连接选项"><a href="#1-4-1-连接选项" class="headerlink" title="1.4.1 连接选项"></a>1.4.1 连接选项</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">-u, <span class="comment">--user=name指定用户名</span></span><br><span class="line">-p, <span class="comment">--password[=name]指定密码</span></span><br><span class="line">-h, <span class="comment">--host=name指定服务器IP或域名</span></span><br><span class="line">-P, <span class="comment">--port=#指定连接端口</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-输出内容选项"><a href="#1-4-2-输出内容选项" class="headerlink" title="1.4.2 输出内容选项"></a>1.4.2 输出内容选项</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">参数：</span><br><span class="line"><span class="comment">--add-drop-database在每个数据库创建语句前加上 Drop database 语句</span></span><br><span class="line"><span class="comment">--add-drop-table在每个表创建语句前加上 Drop table 语句 , 默认开启 ; 不开启 (--skip-add-drop-table)</span></span><br><span class="line"></span><br><span class="line">-n, <span class="comment">--no-create-db不包含数据库的创建语句</span></span><br><span class="line">-t, <span class="comment">--no-create-info不包含数据表的创建语句</span></span><br><span class="line">-d <span class="comment">--no-data不包含数据</span></span><br><span class="line"></span><br><span class="line"> -T, <span class="comment">--tab=name自动生成两个文件：一个.sql文件，创建表结构的语句；</span></span><br><span class="line"> 一个.txt文件，数据文件，相当于<span class="keyword">select</span> <span class="keyword">into</span> <span class="keyword">outfile</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 ： </span><br><span class="line">备份表：</span><br><span class="line">mysqkdump -uroot -pXXXX demo_03 tn_book &gt; tb_book.sql</span><br><span class="line">备份表，删除之前表</span><br><span class="line">mysqldump -uroot -p2143 demo_03 tb_book --add-drop-table &gt; demo_03.sql</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p2143 db01 tb_book --add-drop-database --add-drop-table &gt; a</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p2143 -T &#x2F;tmp demo_03 tb_book</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-3.png" alt="4-3"> </p><h2 id="1-5-mysqlimport-source"><a href="#1-5-mysqlimport-source" class="headerlink" title="1.5 mysqlimport/source"></a>1.5 mysqlimport/source</h2><h3 id="1-txt"><a href="#1-txt" class="headerlink" title="1.txt"></a>1.txt</h3><p>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlimport [options]  db_name  textfile1  [textfile2...]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlimport -uroot -p2143 demo_03 /tmp/tb_book.txt</span><br></pre></td></tr></table></figure><h3 id="2-sql"><a href="#2-sql" class="headerlink" title="2.sql"></a>2.sql</h3><p>如果需要导入sql文件,可以使用mysql中的source 指令 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /root/tb_book.sql</span><br></pre></td></tr></table></figure><h2 id="1-6-mysqlshow"><a href="#1-6-mysqlshow" class="headerlink" title="1.6 mysqlshow"></a>1.6 mysqlshow</h2><p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlshow [options] [db_name [table_name [col_name]]]</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--count显示数据库及表的统计信息（数据库，表 均可以不指定）</span></span><br><span class="line">-i显示指定数据库或者指定表的状态信息</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询每个数据库的表的数量及表中记录的数量</span></span><br><span class="line">mysqlshow -uroot -p2143 <span class="comment">--count</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询test库中每个表中的字段书，及行数</span></span><br><span class="line">mysqlshow -uroot -p2143 test <span class="comment">--count</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询test库中book表的详细情况</span></span><br><span class="line">mysqlshow -uroot -p2143 test book <span class="comment">--count</span></span><br></pre></td></tr></table></figure><h1 id="2-Mysql-日志"><a href="#2-Mysql-日志" class="headerlink" title="2. Mysql 日志"></a>2. Mysql 日志</h1><ul><li>在任何一种数据库中，都会有各种各样的日志，记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件。</li><li>MySQL 也不例外，在 MySQL 中，有 4 种不同的日志，分别是错误日志、二进制日志（BINLOG 日志）、查询日志和慢查询日志，这些日志记录着数据库在不同方面的踪迹。</li></ul><h2 id="2-1-错误日志"><a href="#2-1-错误日志" class="headerlink" title="2.1 错误日志"></a>2.1 错误日志</h2><ul><li>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。</li><li>当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。</li><li>该日志是默认开启的 ， 默认存放目录为 mysql 的数据目录（var/lib/mysql）, 默认的日志文件名为  hostname.err（hostname是主机名）。</li></ul><p>查看日志位置指令 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'log_error%'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-8.png" alt="4-8"></p><p>查看日志内容 ： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/lib/mysql/xaxh-server.err</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-9.png" alt="4-9"></p><h2 id="2-2-二进制日志"><a href="#2-2-二进制日志" class="headerlink" title="2.2 二进制日志"></a>2.2 二进制日志</h2><h3 id="2-2-1概述"><a href="#2-2-1概述" class="headerlink" title="2.2.1概述"></a>2.2.1概述</h3><ul><li>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但是不包括数据查询语句。</li><li>此日志对于灾难时的数据恢复起着极其重要的作用，MySQL的主从复制， 就是通过该binlog实现的。</li><li>二进制日志，默认情况下是没有开启的，需要到MySQL的配置文件中开启，并配置MySQL日志的格式。 </li><li>配置文件位置 : /usr/my.cnf</li><li>日志存放位置 : 配置时，给定了文件名但是没有指定路径，日志默认写入Mysql的数据目录。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/my.cnf</span><br><span class="line"><span class="comment">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001 , mysqlbin.000002</span></span><br><span class="line">log_bin=mysqlbin</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置二进制日志的格式</span></span><br><span class="line">binlog_format=STATEMENT</span><br><span class="line"></span><br><span class="line">配置完后</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h3 id="2-2-2-日志格式"><a href="#2-2-2-日志格式" class="headerlink" title="2.2.2 日志格式"></a>2.2.2 日志格式</h3><h4 id="1-STATEMENT"><a href="#1-STATEMENT" class="headerlink" title="1.STATEMENT"></a>1.STATEMENT</h4><ul><li>该日志格式在日志文件中记录的都是SQL语句（statement），每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰的查看到每条语句的文本。</li><li>主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。</li></ul><h4 id="2-ROW"><a href="#2-ROW" class="headerlink" title="2.ROW"></a>2.ROW</h4><ul><li>该日志格式在日志文件中记录的是每一行的数据变更，而不是记录SQL语句。</li><li>比如，执行SQL语句 ： update tb_book set status=’1’ </li><li>如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； </li><li>如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更。</li></ul><h4 id="3-MIXED"><a href="#3-MIXED" class="headerlink" title="3.MIXED"></a>3.MIXED</h4><ul><li>这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。</li><li>默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。</li><li>MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点。</li></ul><h3 id="2-2-3-日志读取"><a href="#2-2-3-日志读取" class="headerlink" title="2.2.3 日志读取"></a>2.2.3 日志读取</h3><p>由于日志以二进制方式存储，不能直接读取，需要用mysqlbinlog工具来查看，语法如下 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog log-file；</span><br></pre></td></tr></table></figure><h4 id="1-查看STATEMENT格式日志"><a href="#1-查看STATEMENT格式日志" class="headerlink" title="1.查看STATEMENT格式日志"></a>1.查看STATEMENT格式日志</h4><p>执行插入语句 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Lucene'</span>,<span class="string">'2088-05-01'</span>,<span class="string">'0'</span>);</span><br></pre></td></tr></table></figure><p> 查看日志文件 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd mysql</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-10.png" alt="4-10"></p><ul><li>mysqlbin.index : 该文件是日志索引文件 ， 记录日志的文件名；</li><li>mysqlbing.000001 ：日志文件</li></ul><p>查看日志内容 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog mysqlbing.000001；</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-11.png" alt="4-11"></p><h4 id="2-查看ROW格式日志"><a href="#2-查看ROW格式日志" class="headerlink" title="2.查看ROW格式日志"></a>2.查看ROW格式日志</h4><p>配置 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001, mysqlbin.000002</span></span><br><span class="line">log_bin=mysqlbin</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置二进制日志的格式</span></span><br><span class="line">binlog_format=ROW</span><br></pre></td></tr></table></figure><p>插入数据 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'SpringCloud实战'</span>,<span class="string">'2088-05-05'</span>,<span class="string">'0'</span>);</span><br></pre></td></tr></table></figure><p>如果日志格式是 ROW , 直接查看数据 , 是查看不懂的 ; 可以在mysqlbinlog 后面加上参数 -vv  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog -vv mysqlbin.000002</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-12.png" alt="4-12"></p><h3 id="2-2-4-日志删除"><a href="#2-2-4-日志删除" class="headerlink" title="2.2.4 日志删除"></a>2.2.4 日志删除</h3><p>对于比较繁忙的系统，由于每天生成日志量大 ，这些日志如果长时间不清楚，将会占用大量的磁盘空间。下面我们将会讲解几种删除日志的常见方法 ：</p><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><ul><li>通过 Reset Master 指令删除全部 binlog 日志，删除之后，日志编号，将从 xxxx.000001重新开始 。</li></ul><ol><li>查询之前 ，先查询下日志文件 ： </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd mysql </span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-13.png" alt="4-13"></p><ol start="2"><li>执行删除日志指令： </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reset Master;</span><br></pre></td></tr></table></figure><ol start="3"><li>执行之后， 查看日志文件 ：</li></ol><p>mysqlbin.00001里面也是空的，里面是基本日志信息</p><p><img src="../../images/mysql/4/4-14.png" alt="4-14"></p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>执行指令 <code>purge  master logs to &#39;mysqlbin.******&#39;</code> ，该命令将删除  <code>******</code> 编号之前的所有日志。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">purge</span>  <span class="keyword">master</span> <span class="keyword">logs</span> <span class="keyword">to</span> <span class="string">'mysqlbin.******'</span></span><br></pre></td></tr></table></figure><h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><p>执行指令 <code>purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39;</code> ，该命令将删除日志为 “yyyy-mm-dd hh24:mi:ss” 之前产生的所有日志 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">purge</span> <span class="keyword">master</span> <span class="keyword">logs</span> <span class="keyword">before</span> <span class="string">'yyyy-mm-dd hh24:mi:ss'</span></span><br></pre></td></tr></table></figure><h4 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h4><p>设置参数 –expire_logs_days=# ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将有利于减少DBA 管理日志的工作量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--expire_logs_days=3</span></span><br></pre></td></tr></table></figure><p>配置如下 ： </p><p><img src="../../images/mysql/4/4-15.png" alt="4-15"></p><h2 id="2-3-查询日志"><a href="#2-3-查询日志" class="headerlink" title="2.3 查询日志"></a>2.3 查询日志</h2><ul><li>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。</li><li>默认情况下， 查询日志是未开启的。如果需要开启查询日志，可以设置以下配置 ：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该选项用来开启查询日志 ， 可选值 ： 0 或者 1 ； 0 代表关闭， 1 代表开启 </span></span><br><span class="line">general_log=1</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置日志的文件名 ， 如果没有指定， 默认的文件名为 host_name.log </span></span><br><span class="line">general_log_file=file_name</span><br></pre></td></tr></table></figure><ol><li>在 mysql 的配置文件 /usr/my.cnf 中配置如下内容 ： </li></ol><p><img src="../../images/mysql/4/4-16.png" alt="4-16"></p><ol start="2"><li>配置完毕之后，在数据库执行以下操作 ：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> tb_book <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'lucene入门指南'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">8</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>执行完毕之后， 再次来查询日志文件 ： </li></ol><p><img src="../../images/mysql/4/4-17.png" alt="4-17"></p><h2 id="2-4-慢查询日志"><a href="#2-4-慢查询日志" class="headerlink" title="2.4 慢查询日志"></a>2.4 慢查询日志</h2><ul><li>慢查询日志记录了所有执行时间超过参数 long_query_time 设置值并且扫描记录数不小于 min_examined_row_limit 的所有的SQL语句的日志。</li><li>long_query_time 默认为 10 秒，最小为 0， 精度可以到微秒。</li></ul><h3 id="2-4-1-文件位置和格式"><a href="#2-4-1-文件位置和格式" class="headerlink" title="2.4.1 文件位置和格式"></a>2.4.1 文件位置和格式</h3><p>慢查询日志默认是关闭的 。可以通过两个参数来控制慢查询日志 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该参数用来控制慢查询日志是否开启， 可取值： 1 和 0 ， 1 代表开启， 0 代表关闭</span></span><br><span class="line">slow_query_log=1 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 该参数用来指定慢查询日志的文件名</span></span><br><span class="line">slow_query_log_file=slow_query.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该选项用来配置查询的时间限制， 超过这个时间将认为值慢查询， 将需要进行日志记录， 默认10s</span></span><br><span class="line">long_query_time=10</span><br></pre></td></tr></table></figure><h3 id="2-4-2-日志的读取"><a href="#2-4-2-日志的读取" class="headerlink" title="2.4.2 日志的读取"></a>2.4.2 日志的读取</h3><p>和错误日志、查询日志一样，慢查询日志记录的格式也是纯文本，可以被直接读取。</p><ol><li>查询long_query_time 的值。</li></ol><p><img src="../../images/mysql/4/4-18.png" alt="4-18"></p><ol start="2"><li>执行查询操作</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, title,price,<span class="keyword">num</span> ,<span class="keyword">status</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-19.png" alt="4-19"></p><ul><li><p>由于该语句执行时间很短，为0s ， 所以不会记录在慢查询日志中。</p><p>3.超过时间的查询</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title <span class="keyword">like</span> <span class="string">'%阿尔卡特 (OT-927) 炭黑 联通3G手机 双卡双待165454%'</span> ;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-20.png" alt="4-20"></p><p>该SQL语句 ， 执行时长为 26.77s ，超过10s ， 所以会记录在慢查询日志文件中。</p><ol start="4"><li>查看慢查询日志文件</li></ol><p>直接通过cat 指令查询该日志文件 ： </p><ul><li>cat slow_query.log</li></ul><p><img src="../../images/mysql/4/4-21.png" alt="4-21"></p><ul><li>tail-f slow_query.log</li></ul><p><img src="../../images/mysql/4/4-4.png" alt="4-4"></p><ul><li>如果慢查询日志内容很多， 直接查看文件，比较麻烦， 这个时候可以借助于mysql自带的 mysqldumpslow 工具， 来对慢查询日志进行分类汇总。 </li></ul><p><img src="../../images/mysql/4/4-5.png" alt="4-5"></p><h1 id="3-Mysql复制"><a href="#3-Mysql复制" class="headerlink" title="3. Mysql复制"></a>3. Mysql复制</h1><h2 id="3-1-复制概述"><a href="#3-1-复制概述" class="headerlink" title="3.1 复制概述"></a>3.1 复制概述</h2><ul><li>复制是指将主数据库的DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。</li><li>MySQL支持一台主库同时向多台从库进行复制， 从库同时也可以作为其他从服务器的主库，实现链状复制。</li></ul><h2 id="3-2-复制原理"><a href="#3-2-复制原理" class="headerlink" title="3.2 复制原理"></a>3.2 复制原理</h2><p>MySQL 的主从复制原理如下：</p><p> <img src="../../images/mysql/4/4-22.jpg" alt="4-22"></p><p>从上层来看，复制分成三步：</p><ul><li>Master 主库在事务提交时，会把数据变更作为时间 Events 记录在二进制日志文件 Binlog 中。</li><li>主库推送二进制日志文件 Binlog 中的日志事件到从库的中继日志 Relay Log 。</li><li>slave重做中继日志中的事件，将改变反映它自己的数据。</li></ul><h2 id="3-3-复制优势"><a href="#3-3-复制优势" class="headerlink" title="3.3 复制优势"></a>3.3 复制优势</h2><p>MySQL 复制的有点主要包含以下三个方面：</p><ul><li>主库出现问题，可以快速切换到从库提供服务。</li><li>可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。</li><li>可以在从库中执行备份，以避免备份期间影响主库的服务。</li></ul><h2 id="3-4-搭建步骤"><a href="#3-4-搭建步骤" class="headerlink" title="3.4 搭建步骤"></a>3.4 搭建步骤</h2><p>关闭防火墙：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service IPtables <span class="built_in">stop</span></span><br></pre></td></tr></table></figure><h3 id="3-4-1-主节点：master"><a href="#3-4-1-主节点：master" class="headerlink" title="3.4.1 主节点：master"></a>3.4.1 主节点：master</h3><ol><li>在master 的配置文件（/usr/my.cnf）中，配置如下内容：</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vi</span> <span class="string">/usr/my.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql 服务ID,保证整个集群环境中唯一</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql binlog 日志的存储路径和文件名</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#错误日志,默认已经开启</span></span><br><span class="line"><span class="comment">#log-err</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql的安装目录</span></span><br><span class="line"><span class="comment">#basedir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql的临时目录</span></span><br><span class="line"><span class="comment">#tmpdir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql的数据存放目录</span></span><br><span class="line"><span class="comment">#datadir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否只读,1 代表只读, 0 代表读写</span></span><br><span class="line"><span class="meta">read-only</span>=<span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#忽略的数据, 指不需要同步的数据库</span></span><br><span class="line"><span class="meta">binlog-ignore-db</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定同步的数据库</span></span><br><span class="line"><span class="comment">#binlog-do-db=db01</span></span><br></pre></td></tr></table></figure><ol start="2"><li>执行完毕之后，需要重启Mysql：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart ；</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-6.png" alt="4-6"></p><ol start="3"><li>创建同步数据的账户，并且进行授权操作：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;grant replication slave on *.* to 'itcast'@'192.168.192.131' identified by 'itcast';</span><br><span class="line"></span><br><span class="line"><span class="comment"># identified by 'itcast'(密码)</span></span><br><span class="line"></span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure><ol start="4"><li>查看master状态：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;show master status;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-23.png" alt="4-23"></p><p>字段含义：</p><ul><li>File : 从哪个日志文件开始推送日志文件 </li><li>Position ： 从哪个位置开始推送日志</li><li>Binlog_Ignore_DB : 指定不需要同步的数据库</li></ul><h3 id="3-4-2-从节点：slave"><a href="#3-4-2-从节点：slave" class="headerlink" title="3.4.2 从节点：slave"></a>3.4.2 从节点：slave</h3><ol><li>在 slave 端配置文件中，配置如下内容：</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql服务端ID,唯一</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定binlog日志</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br></pre></td></tr></table></figure><ol start="2"><li>执行完毕之后，需要重启Mysql：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart；</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-7.png" alt="4-7"></p><ol start="3"><li>执行如下指令 ：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;change master to master_host= '192.168.192.130', master_user='itcast', master_password='itcast', master_log_file='mysqlbin.000001', master_log_pos=413;</span><br><span class="line"></span><br><span class="line"><span class="comment"># master_log_file='mysqlbin.000001', master_log_pos=413。不是固定的，要看主节点配置的信息：show master status，里面获取（file，Position ）</span></span><br></pre></td></tr></table></figure><p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。</p><ol start="4"><li>开启同步操作，看两个状态：yes</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-33.png" alt="4-33"></p><ol start="5"><li>停止同步操作</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">stop</span> <span class="keyword">slave</span>;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-验证同步操作"><a href="#3-4-3-验证同步操作" class="headerlink" title="3.4.3 验证同步操作"></a>3.4.3 验证同步操作</h3><ol><li>在主库中创建数据库，创建表，并插入数据 ：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> db01;</span><br><span class="line"></span><br><span class="line">user db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">1</span>),</span><br><span class="line">primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">id</span>,<span class="keyword">name</span>,sex) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Tom'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">id</span>,<span class="keyword">name</span>,sex) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Trigger'</span>,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">id</span>,<span class="keyword">name</span>,sex) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Dawn'</span>,<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>在从库中查询数据，进行验证 ：</li></ol><p>在从库中，可以查看到刚才创建的数据库：</p><p><img src="../../images/mysql/4/4-24.png" alt="4-24"></p><p>在该数据库中，查询user表中的数据：</p><p><img src="../../images/mysql/4/4-25.png" alt="4-25"></p><h1 id="4-综合案例"><a href="#4-综合案例" class="headerlink" title="4. 综合案例"></a>4. 综合案例</h1><h2 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h2><ul><li>在业务系统中，需要记录当前业务系统的访问日志，该访问日志包含：操作人，操作时间，访问类，访问方法，请求参数，请求结果，请求结果类型，请求时长 等信息。</li><li>记录详细的系统访问日志，主要便于对系统中的用户请求进行追踪，并且在系统 的管理后台可以查看到用户的访问记录。</li><li>记录系统中的日志信息，可以通过Spring 框架的AOP来实现。具体的请求处理流程，如下：</li></ul><p><img src="../../images/mysql/4/4-26.png" alt="4-26"></p><h2 id="4-2-搭建案例环境"><a href="#4-2-搭建案例环境" class="headerlink" title="4.2 搭建案例环境"></a>4.2 搭建案例环境</h2><h3 id="4-2-1-数据库表"><a href="#4-2-1-数据库表" class="headerlink" title="4.2.1 数据库表"></a>4.2.1 数据库表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mysql_demo <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 ；</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`brand`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'品牌名称'</span>,</span><br><span class="line">  <span class="string">`first_char`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'品牌首字母'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`item`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'商品id'</span>,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品标题'</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品价格，单位为：元'</span>,</span><br><span class="line">  <span class="string">`num`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'库存数量'</span>,</span><br><span class="line">  <span class="string">`categoryid`</span> <span class="built_in">bigint</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'所属类目，叶子类目'</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品状态，1-正常，2-下架，3-删除'</span>,</span><br><span class="line">  <span class="string">`sellerid`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商家ID'</span>,</span><br><span class="line">  <span class="string">`createtime`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`updatetime`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'商品表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`qq`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`operation_log`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'ID'</span>,</span><br><span class="line">  <span class="string">`operate_class`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'操作类'</span>,</span><br><span class="line">  <span class="string">`operate_method`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'操作方法'</span>,</span><br><span class="line">  <span class="string">`return_class`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'返回值类型'</span>,</span><br><span class="line">  <span class="string">`operate_user`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'操作用户'</span>,</span><br><span class="line">  <span class="string">`operate_time`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'操作时间'</span>,</span><br><span class="line">  <span class="string">`param_and_value`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'请求参数名及参数值'</span>,</span><br><span class="line">  <span class="string">`cost_time`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'执行方法耗时, 单位 ms'</span>,</span><br><span class="line">  <span class="string">`return_value`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'返回值'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-pom-xml"><a href="#4-2-2-pom-xml" class="headerlink" title="4.2.2 pom.xml"></a>4.2.2 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-web-xml"><a href="#4-2-3-web-xml" class="headerlink" title="4.2.3 web.xml"></a>4.2.3 web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解决post乱码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>log-datalist.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-4-db-properties"><a href="#4-2-4-db-properties" class="headerlink" title="4.2.4 db.properties"></a>4.2.4 db.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://192.168.142.128:3306/mysql_demo</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">itcast</span></span><br></pre></td></tr></table></figure><h3 id="4-2-5-applicationContext-xml"><a href="#4-2-5-applicationContext-xml" class="headerlink" title="4.2.5 applicationContext.xml"></a>4.2.5 applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 spring 创建容器时要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:exclude-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 MyBatis 的 Session 工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"cn.itcast.pojo"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 Mapper 扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.itcast.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务的注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-6-springmvc-xml"><a href="#4-2-6-springmvc-xml" class="headerlink" title="4.2.6 springmvc.xml"></a>4.2.6 springmvc.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-通过AOP记录操作日志"><a href="#4-3-通过AOP记录操作日志" class="headerlink" title="4.3 通过AOP记录操作日志"></a>4.3 通过AOP记录操作日志</h2><h3 id="4-3-1-自定义注解"><a href="#4-3-1-自定义注解" class="headerlink" title="4.3.1 自定义注解"></a>4.3.1 自定义注解</h3><p>通过自定义注解，来标示方法需不需要进行记录日志，如果该方法在访问时需要记录日志，则在该方法上标示该注解既可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OperateLog &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-定义通知类"><a href="#4-3-2-定义通知类" class="headerlink" title="4.3.2 定义通知类"></a>4.3.2 定义通知类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateAdvice</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Logger log = Logger.getLogger(OperateAdvice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> OperationLogService operationLogService;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   <span class="meta">@Around</span>(<span class="string">"execution(* cn.itcast.controller.*.*(..)) &amp;&amp; @annotation(operateLog)"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">insertLogAround</span><span class="params">(ProceedingJoinPoint pjp , OperateLog operateLog)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">" ************************ 记录日志 [start]  ****************************** "</span>);</span><br><span class="line">      OperationLog op = <span class="keyword">new</span> OperationLog();</span><br><span class="line">      DateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">      op.setOperateTime(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">      op.setOperateUser(DataUtils.getRandStr(<span class="number">8</span>));</span><br><span class="line">      op.setOperateClass(pjp.getTarget().getClass().getName());</span><br><span class="line">      op.setOperateMethod(pjp.getSignature().getName());</span><br><span class="line">      <span class="comment">//获取方法调用时传递的参数</span></span><br><span class="line">      Object[] args = pjp.getArgs();</span><br><span class="line">      op.setParamAndValue(Arrays.toString(args));</span><br><span class="line">       <span class="comment">//计算时间</span></span><br><span class="line">      <span class="keyword">long</span> start_time = System.currentTimeMillis();</span><br><span class="line">      <span class="comment">//放行</span></span><br><span class="line">      Object object = pjp.proceed();</span><br><span class="line">      <span class="keyword">long</span> end_time = System.currentTimeMillis();</span><br><span class="line">      op.setCostTime(end_time - start_time);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(object != <span class="keyword">null</span>)&#123;</span><br><span class="line">         op.setReturnClass(object.getClass().getName());</span><br><span class="line">         op.setReturnValue(object.toString());</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         op.setReturnClass(<span class="string">"java.lang.Object"</span>);</span><br><span class="line">         op.setParamAndValue(<span class="string">"void"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      log.error(JsonUtils.obj2JsonString(op));</span><br><span class="line">      operationLogService.insert(op);</span><br><span class="line">      System.out.println(<span class="string">" ************************** 记录日志 [end]  *************************** "</span>);</span><br><span class="line">      <span class="keyword">return</span> object;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-方法上加注解"><a href="#4-3-3-方法上加注解" class="headerlink" title="4.3.3 方法上加注解"></a>4.3.3 方法上加注解</h3><p>在需要记录日志的方法上加上注解@OperateLog。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OperateLog</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(@RequestBody Brand brand)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        brandService.insert(brand);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,<span class="string">"操作成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>,<span class="string">"操作失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-日志查询后端代码实现"><a href="#4-4-日志查询后端代码实现" class="headerlink" title="4.4 日志查询后端代码实现"></a>4.4 日志查询后端代码实现</h2><h3 id="4-4-1-Mapper接口"><a href="#4-4-1-Mapper接口" class="headerlink" title="4.4.1 Mapper接口"></a>4.4.1 Mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OperationLogMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(OperationLog operationLog)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OperationLog&gt; <span class="title">selectListByCondition</span><span class="params">(Map dataMap)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">countByCondition</span><span class="params">(Map dataMap)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-Mapper-xml-映射配置文件"><a href="#4-4-2-Mapper-xml-映射配置文件" class="headerlink" title="4.4.2 Mapper.xml 映射配置文件"></a>4.4.2 Mapper.xml 映射配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.itcast.mapper.OperationLogMapper"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"operationLog"</span>&gt;</span></span><br><span class="line">        INSERT INTO operation_log(id,return_value,return_class,operate_user,operate_time,param_and_value,</span><br><span class="line">        operate_class,operate_method,cost_time)</span><br><span class="line">      VALUES(NULL,#&#123;returnValue&#125;,#&#123;returnClass&#125;,#&#123;operateUser&#125;,#&#123;operateTime&#125;,#&#123;paramAndValue&#125;,</span><br><span class="line">        #&#123;operateClass&#125;,#&#123;operateMethod&#125;,#&#123;costTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectListByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"operationLog"</span>&gt;</span></span><br><span class="line">      select</span><br><span class="line">        id ,</span><br><span class="line">        operate_class as operateClass ,</span><br><span class="line">        operate_method as operateMethod,</span><br><span class="line">        return_class as returnClass,</span><br><span class="line">        operate_user as operateUser,</span><br><span class="line">        operate_time as operateTime,</span><br><span class="line">        param_and_value as paramAndValue,</span><br><span class="line">        cost_time as costTime,</span><br><span class="line">        return_value as returnValue</span><br><span class="line">      from operation_log</span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"oplog_where"</span>/&gt;</span></span><br><span class="line">      limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"countByCondition"</span> <span class="attr">resultType</span>=<span class="string">"long"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        select count(*) from operation_log</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"oplog_where"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"oplog_where"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"operateClass != null and operateClass != '' "</span>&gt;</span></span><br><span class="line">                and operate_class = #&#123;operateClass&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"operateMethod != null and operateMethod != '' "</span>&gt;</span></span><br><span class="line">                and operate_method = #&#123;operateMethod&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"returnClass != null and returnClass != '' "</span>&gt;</span></span><br><span class="line">                and return_class = #&#123;returnClass&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"costTime != null"</span>&gt;</span></span><br><span class="line">                and cost_time =  #&#123;costTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-3-Service"><a href="#4-4-3-Service" class="headerlink" title="4.4.3 Service"></a>4.4.3 Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationLogService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private static Logger logger = Logger.getLogger(OperationLogService.class);</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperationLogMapper operationLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(OperationLog operationLog)</span></span>&#123;</span><br><span class="line">        operationLogMapper.insert(operationLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据条件查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult <span class="title">selectListByCondition</span><span class="params">(Map dataMap, Integer pageNum , Integer pageSize)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(paramMap ==<span class="keyword">null</span>)&#123;</span><br><span class="line">            paramMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        &#125;</span><br><span class="line">        paramMap.put(<span class="string">"start"</span> , (pageNum-<span class="number">1</span>)*rows);</span><br><span class="line">        paramMap.put(<span class="string">"rows"</span>,rows);</span><br><span class="line"></span><br><span class="line">        Object costTime = paramMap.get(<span class="string">"costTime"</span>);</span><br><span class="line">        <span class="keyword">if</span>(costTime != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">""</span>.equals(costTime.toString()))&#123;</span><br><span class="line">                paramMap.put(<span class="string">"costTime"</span>,<span class="keyword">null</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                paramMap.put(<span class="string">"costTime"</span>,<span class="keyword">new</span> Long(paramMap.get(<span class="string">"costTime"</span>).toString()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dataMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> countStart = System.currentTimeMillis();</span><br><span class="line">        Long count = operationLogMapper.countByCondition(dataMap);</span><br><span class="line">        <span class="keyword">long</span> countEnd = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Count Cost Time : "</span> + (countEnd-countStart)+<span class="string">" ms"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;OperationLog&gt; list = operationLogMapper.selectListByCondition(dataMap);</span><br><span class="line">        <span class="keyword">long</span> queryEnd = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Query Cost Time : "</span> + (queryEnd-countEnd)+<span class="string">" ms"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageResult(count,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-4-Controller"><a href="#4-4-4-Controller" class="headerlink" title="4.4.4 Controller"></a>4.4.4 Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/operationLog"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationLogController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperationLogService operationLogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findList"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult <span class="title">findList</span><span class="params">(@RequestBody Map dataMap, Integer pageNum , Integer pageSize)</span></span>&#123;</span><br><span class="line">        PageResult page = operationLogService.selectListByCondition(dataMap, pageNum, pageSize);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-日志查询前端代码实现"><a href="#4-5-日志查询前端代码实现" class="headerlink" title="4.5 日志查询前端代码实现"></a>4.5 日志查询前端代码实现</h2><p>前端代码使用 BootStrap + AdminLTE 进行布局， 使用Vuejs 进行视图层展示。</p><h3 id="4-5-1-js"><a href="#4-5-1-js" class="headerlink" title="4.5.1 js"></a>4.5.1 js</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">       el: <span class="string">'#app'</span>,</span></span><br><span class="line">       data: &#123;</span><br><span class="line">           dataList:[],</span><br><span class="line">           searchEntity:&#123;</span><br><span class="line"><span class="actionscript">               operateClass:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">               operateMethod:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">               returnClass:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">               costTime:<span class="string">''</span></span></span><br><span class="line">           &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">           page: <span class="number">1</span>,  <span class="comment">//显示的是哪一页</span></span></span><br><span class="line"><span class="actionscript">           pageSize: <span class="number">10</span>, <span class="comment">//每一页显示的数据条数</span></span></span><br><span class="line"><span class="actionscript">           total: <span class="number">150</span>, <span class="comment">//记录总数</span></span></span><br><span class="line"><span class="actionscript">           maxPage:<span class="number">8</span>  <span class="comment">//最大页数</span></span></span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line"><span class="actionscript">           pageHandler: <span class="function"><span class="keyword">function</span> <span class="params">(page)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">               <span class="keyword">this</span>.page = page;</span></span><br><span class="line"><span class="actionscript">               <span class="keyword">this</span>.search();</span></span><br><span class="line">           &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">           search: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">               <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="actionscript">               <span class="keyword">this</span>.showLoading();</span></span><br><span class="line"><span class="actionscript">               axios.post(<span class="string">'/operationLog/findList.do?pageNum='</span> + _this.page + <span class="string">"&amp;pageSize="</span> + _this.pageSize, _this.searchEntity).then(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> </span>&#123;</span></span><br><span class="line">                   if (response) &#123;</span><br><span class="line">                       _this.dataList = response.data.dataList;</span><br><span class="line">                       _this.total = response.data.total;</span><br><span class="line">                       _this.hideLoading();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">           showLoading: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">               $(<span class="string">'#loadingModal'</span>).modal(&#123;<span class="attr">backdrop</span>: <span class="string">'static'</span>, <span class="attr">keyboard</span>: <span class="literal">false</span>&#125;);</span></span><br><span class="line">           &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">           hideLoading: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">               $(<span class="string">'#loadingModal'</span>).modal(<span class="string">'hide'</span>);</span></span><br><span class="line">           &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">       created:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">           <span class="keyword">this</span>.pageHandler(<span class="number">1</span>);</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-2-列表数据展示"><a href="#4-5-2-列表数据展示" class="headerlink" title="4.5.2 列表数据展示"></a>4.5.2 列表数据展示</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in dataList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"ids"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.operateClass&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.operateMethod&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.returnClass&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.returnValue&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.operateUser&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.operateTime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.costTime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn bg-olive btn-xs"</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn bg-olive btn-xs"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-3-分页插件"><a href="#4-5-3-分页插件" class="headerlink" title="4.5.3 分页插件"></a>4.5.3 分页插件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zpagenav</span> <span class="attr">v-bind:page</span>=<span class="string">"page"</span> <span class="attr">v-bind:page-size</span>=<span class="string">"pageSize"</span> <span class="attr">v-bind:total</span>=<span class="string">"total"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-bind:max-page</span>=<span class="string">"maxPage"</span>  <span class="attr">v-on:pagehandler</span>=<span class="string">"pageHandler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">zpagenav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-6-联调测试"><a href="#4-6-联调测试" class="headerlink" title="4.6 联调测试"></a>4.6 联调测试</h2><p>可以通过postman来访问业务系统，再查看数据库中的日志信息，验证能不能将用户的访问日志记录下来。</p><p><img src="../../images/mysql/4/4-27.png" alt="4-27"></p><h2 id="4-7-分析性能问题"><a href="#4-7-分析性能问题" class="headerlink" title="4.7 分析性能问题"></a>4.7 分析性能问题</h2><p>系统中用户访问日志的数据量，随着时间的推移，这张表的数据量会越来越大，因此我们需要根据业务需求，来对日志查询模块的性能进行优化。</p><h3 id="1-分页查询优化"><a href="#1-分页查询优化" class="headerlink" title="1.分页查询优化"></a>1.分页查询优化</h3><p>由于在进行日志查询时，是进行分页查询，那也就意味着，在查看时，至少需要查询两次：</p><p>A. 查询符合条件的总记录数。–&gt; count 操作</p><p>B. 查询符合条件的列表数据。–&gt; 分页查询 limit 操作</p><ul><li>通常来说，count() 都需要扫描大量的行（意味着需要访问大量的数据）才能获得精确的结果，因此是很难对该SQL进行优化操作的。</li><li>如果需要对count进行优化，可以采用另外一种思路，可以增加汇总表，或者redis缓存来专门记录该表对应的记录数，这样的话，就可以很轻松的实现汇总数据的查询，而且效率很高</li><li>但是这种统计并不能保证百分之百的准确 。对于数据库的操作，“快速、精确、实现简单”，三者永远只能满足其二，必须舍掉其中一个。</li></ul><h3 id="2-条件查询优化"><a href="#2-条件查询优化" class="headerlink" title="2.条件查询优化"></a>2.条件查询优化</h3><p>针对于条件查询,需要对查询条件,及排序字段建立索引。</p><h3 id="3-读写分离"><a href="#3-读写分离" class="headerlink" title="3.读写分离"></a>3.读写分离</h3><p>通过主从复制集群，来完成读写分离，使写操作走主节点， 而读操作，走从节点。</p><h3 id="4-MySQL服务器优化"><a href="#4-MySQL服务器优化" class="headerlink" title="4.MySQL服务器优化"></a>4.MySQL服务器优化</h3><h3 id="5-应用优化"><a href="#5-应用优化" class="headerlink" title="5.应用优化"></a>5.应用优化</h3><h2 id="4-8-性能优化-分页"><a href="#4-8-性能优化-分页" class="headerlink" title="4.8 性能优化 - 分页"></a>4.8 性能优化 - 分页</h2><h3 id="4-8-1-优化count"><a href="#4-8-1-优化count" class="headerlink" title="4.8.1 优化count"></a>4.8.1 优化count</h3><p>创建一张表用来记录日志表的总数据量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> log_counter(</span><br><span class="line">logcount <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">)<span class="keyword">engine</span> = <span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">CHARSET</span> = utf8;</span><br></pre></td></tr></table></figure><p>在每次插入数据之后，更新该表 ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateLogCounter"</span> &gt;</span></span><br><span class="line">    update log_counter set logcount = logcount + 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在进行分页查询时, 获取总记录数，从该表中查询既可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"countLogFromCounter"</span> <span class="attr">resultType</span>=<span class="string">"long"</span>&gt;</span></span><br><span class="line">    select logcount from log_counter limit 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-8-2-优化-limit"><a href="#4-8-2-优化-limit" class="headerlink" title="4.8.2 优化 limit"></a>4.8.2 优化 limit</h3><ul><li><p>在进行分页时，一般通过创建覆盖索引，能够比较好的提高性能。</p></li><li><p>一个非常常见，而又非常头疼的分页场景就是 “limit 1000000,10” ，此时MySQL需要搜索出前1000010 条记录后，仅仅需要返回第 1000001 到 1000010 条记录，前1000000 记录会被抛弃，查询代价非常大。 </p><p><img src="../../images/mysql/4/4-28.png" alt="4-28"></p></li></ul><p>当点击比较靠后的页码时，就会出现这个问题，查询效率非常慢。</p><p>优化SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> operation_log <span class="keyword">limit</span> <span class="number">3000000</span> , <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>将上述SQL优化为 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> operation_log t , (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> operation_log <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">limit</span> <span class="number">3000000</span>,<span class="number">10</span>) b <span class="keyword">where</span> t.id = b.id ;</span><br></pre></td></tr></table></figure><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectListByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"operationLog"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    id ,</span><br><span class="line">    operate_class as operateClass ,</span><br><span class="line">    operate_method as operateMethod,</span><br><span class="line">    return_class as returnClass,</span><br><span class="line">    operate_user as operateUser,</span><br><span class="line">    operate_time as operateTime,</span><br><span class="line">    param_and_value as paramAndValue,</span><br><span class="line">    cost_time as costTime,</span><br><span class="line">    return_value as returnValue</span><br><span class="line">  from operation_log t,</span><br><span class="line">    </span><br><span class="line">  (select id from operation_log </span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"oplog_where"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  order by id limit #&#123;start&#125;,#&#123;rows&#125;) b  where t.id = b.id  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-9-性能优化-索引"><a href="#4-9-性能优化-索引" class="headerlink" title="4.9 性能优化 - 索引"></a>4.9 性能优化 - 索引</h2><p><img src="../../images/mysql/4/4-29.png" alt="4-29"></p><p>当根据操作人进行查询时， 查询的效率很低，耗时比较长。原因就是因为在创建数据库表结构时，并没有针对于 操作人 字段建立索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_user_method_return_cost <span class="keyword">ON</span> operation_log(operate_user,operate_method,return_class,cost_time);</span><br></pre></td></tr></table></figure><p>同上 ， 为了查询效率高，我们也需要对 操作方法、返回值类型、操作耗时 等字段进行创建索引，以提高查询效率。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_optlog_method_return_cost <span class="keyword">ON</span> operation_log(operate_method,return_class,cost_time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_optlog_return_cost <span class="keyword">ON</span> operation_log(return_class,cost_time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_optlog_cost <span class="keyword">ON</span> operation_log(cost_time);</span><br></pre></td></tr></table></figure><h2 id="4-10-性能优化-排序"><a href="#4-10-性能优化-排序" class="headerlink" title="4.10 性能优化 - 排序"></a>4.10 性能优化 - 排序</h2><p>在查询数据时，如果业务需求中需要我们对结果内容进行了排序处理 , 这个时候,我们还需要对排序的字段建立适当的索引, 来提高排序的效率 。</p><h2 id="4-11-性能优化-读写分离"><a href="#4-11-性能优化-读写分离" class="headerlink" title="4.11 性能优化 - 读写分离"></a>4.11 性能优化 - 读写分离</h2><h3 id="4-11-1-概述"><a href="#4-11-1-概述" class="headerlink" title="4.11.1 概述"></a>4.11.1 概述</h3><p>在Mysql主从复制的基础上，可以使用读写分离来降低单台Mysql节点的压力，从而来提高访问效率，读写分离的架构如下：</p><p> <img src="../../images/mysql/4/4-30.png" alt="4-30"></p><p>对于读写分离的实现，可以通过Spring AOP 来进行动态的切换数据源，进行操作 ：</p><h3 id="4-11-2-实现方式"><a href="#4-11-2-实现方式" class="headerlink" title="4.11.2 实现方式"></a>4.11.2 实现方式</h3><h4 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.write.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.write.url</span>=<span class="string">jdbc:mysql://192.168.142.128:3306/mysql_demo</span></span><br><span class="line"><span class="meta">jdbc.write.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.write.password</span>=<span class="string">itcast</span></span><br><span class="line"></span><br><span class="line"><span class="meta">jdbc.read.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.read.url</span>=<span class="string">jdbc:mysql://192.168.142.129:3306/mysql_demo</span></span><br><span class="line"><span class="meta">jdbc.read.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.read.password</span>=<span class="string">itcast</span></span><br></pre></td></tr></table></figure><h4 id="applicationContext-datasource-xml"><a href="#applicationContext-datasource-xml" class="headerlink" title="applicationContext-datasource.xml"></a>applicationContext-datasource.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 - Read --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"readDataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>  <span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.read.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.read.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.read.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.read.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 - Write --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"writeDataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>  <span class="attr">destroy-method</span>=<span class="string">"close"</span>  <span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.write.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.write.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.write.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.write.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置动态分配的读写 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.aop.datasource.ChooseDataSource"</span> <span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value-type</span>=<span class="string">"javax.sql.DataSource"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"write"</span> <span class="attr">value-ref</span>=<span class="string">"writeDataSource"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"read"</span> <span class="attr">value-ref</span>=<span class="string">"readDataSource"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTargetDataSource"</span> <span class="attr">ref</span>=<span class="string">"writeDataSource"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"methodType"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"read"</span> <span class="attr">value</span>=<span class="string">",get,select,count,list,query,find"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"write"</span> <span class="attr">value</span>=<span class="string">",add,create,update,delete,remove,insert"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ChooseDataSource"><a href="#ChooseDataSource" class="headerlink" title="ChooseDataSource"></a>ChooseDataSource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChooseDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; METHOD_TYPE_MAP = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现父类中的抽象方法，获取数据源名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceHandler.getDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置方法名前缀对应的数据源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethodType</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            List&lt;String&gt; v = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            String[] types = map.get(key).split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">for</span> (String type : types) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(type)) &#123;</span><br><span class="line">                    v.add(type);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            METHOD_TYPE_MAP.put(key, v);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"METHOD_TYPE_MAP : "</span>+METHOD_TYPE_MAP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DataSourceHandler"><a href="#DataSourceHandler" class="headerlink" title="DataSourceHandler"></a>DataSourceHandler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据源名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; holder = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在项目启动的时候将配置的读、写数据源加到holder中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putDataSource</span><span class="params">(String datasource)</span> </span>&#123;</span><br><span class="line">        holder.set(datasource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从holer中获取数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> holder.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DataSourceAspect"><a href="#DataSourceAspect" class="headerlink" title="DataSourceAspect"></a>DataSourceAspect</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(-<span class="number">9999</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置前置通知,使用在方法aspect()上注册的切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* cn.itcast.service.*.*(..))"</span>)</span><br><span class="line">    <span class="meta">@Order</span>(-<span class="number">9999</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint point)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String className = point.getTarget().getClass().getName();</span><br><span class="line">        String method = point.getSignature().getName();</span><br><span class="line">        logger.info(className + <span class="string">"."</span> + method + <span class="string">"("</span> + Arrays.asList(point.getArgs())+ <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String key : ChooseDataSource.METHOD_TYPE_MAP.keySet()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String type : ChooseDataSource.METHOD_TYPE_MAP.get(key)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (method.startsWith(type)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"key : "</span> + key);</span><br><span class="line">                        DataSourceHandler.putDataSource(key);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 @Order(-9999) 注解来控制事务管理器, 与该通知类的加载顺序 , 需要让通知类 , 先加载 , 来判定使用哪个数据源 .</p><h3 id="4-11-3-验证"><a href="#4-11-3-验证" class="headerlink" title="4.11.3 验证"></a>4.11.3 验证</h3><p>在主库和从库中，执行如下SQL语句，来查看是否读的时候， 从从库中读取 ； 写入操作的时候，是否写入到主库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Innodb_rows_%'</span> ;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Innodb_rows_%'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/4/4-31.png" alt="4-31"></p><h3 id="4-11-4-原理"><a href="#4-11-4-原理" class="headerlink" title="4.11.4 原理"></a>4.11.4 原理</h3><p><img src="../../images/mysql/4/4-32.png" alt="4-32"></p><h2 id="4-12-性能优化-应用优化"><a href="#4-12-性能优化-应用优化" class="headerlink" title="4.12 性能优化 - 应用优化"></a>4.12 性能优化 - 应用优化</h2><h3 id="4-12-1-缓存"><a href="#4-12-1-缓存" class="headerlink" title="4.12.1 缓存"></a>4.12.1 缓存</h3><p>可以在业务系统中使用redis来做缓存，缓存一些基础性的数据，来降低关系型数据库的压力，提高访问效率。</p><h3 id="4-12-2-全文检索"><a href="#4-12-2-全文检索" class="headerlink" title="4.12.2 全文检索"></a>4.12.2 全文检索</h3><p>如果业务系统中的数据量比较大（达到千万级别），这个时候，如果再对数据库进行查询，特别是进行分页查询，速度将变得很慢（因为在分页时首先需要count求合计数），为了提高访问效率，这个时候，可以考虑加入Solr 或者 ElasticSearch全文检索服务，来提高访问效率。</p><h3 id="4-13-3-非关系数据库"><a href="#4-13-3-非关系数据库" class="headerlink" title="4.13.3 非关系数据库"></a>4.13.3 非关系数据库</h3><p>可以考虑将非核心（重要）数据，存在 MongoDB 中，这样可以提高插入以及查询的效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql-&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://linhuide.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://linhuide.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装mysql 8.0.13</title>
    <link href="https://linhuide.github.io/post/ad1c179.html"/>
    <id>https://linhuide.github.io/post/ad1c179.html</id>
    <published>2020-04-18T10:28:59.000Z</published>
    <updated>2020-06-23T04:19:28.181Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云Linux下安装mysql 8.0.13</p><a id="more"></a><h2 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//downloads.mysql.com/archives/get/p/23/file/mysql-8.0.13-linux-glibc2.12-x86_64.tar.xz</span></span><br></pre></td></tr></table></figure><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf mysql<span class="number">-8.0</span><span class="number">.13</span>-linux-glibc2<span class="number">.12</span>-x86_64.tar.xz</span><br></pre></td></tr></table></figure><h2 id="3-改名字"><a href="#3-改名字" class="headerlink" title="3.改名字"></a>3.改名字</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mysql<span class="number">-8.0</span><span class="number">.13</span>-linux-glibc2<span class="number">.12</span>-x86_64 mysql</span><br></pre></td></tr></table></figure><h2 id="4-移动位置-创建用户和用户组并授权"><a href="#4-移动位置-创建用户和用户组并授权" class="headerlink" title="4.移动位置,创建用户和用户组并授权"></a>4.移动位置,创建用户和用户组并授权</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mv mysql /usr/local/</span><br><span class="line">cd /usr/local/</span><br><span class="line">ll</span><br><span class="line">[root@linux local]<span class="meta"># groupadd mysql</span></span><br><span class="line">[root@linux local]<span class="meta"># useradd -r -g mysql mysql</span></span><br><span class="line">[root@linux local]<span class="meta"># cd mysql/</span></span><br><span class="line">#注意：进入mysql文件下授权所有的文件</span><br><span class="line">[root@linux mysql]<span class="meta"># ll</span></span><br><span class="line">[root@linux mysql]<span class="meta"># chown -R mysql:mysql ./</span></span><br><span class="line">[root@linux mysql]<span class="meta"># ll</span></span><br></pre></td></tr></table></figure><h2 id="5-创建data文件夹"><a href="#5-创建data文件夹" class="headerlink" title="5.创建data文件夹"></a>5.创建data文件夹</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linux mysql]<span class="meta"># mkdir data</span></span><br><span class="line">[root@linux mysql]<span class="meta"># ll</span></span><br></pre></td></tr></table></figure><h2 id="6-初始化数据库，-随机密码"><a href="#6-初始化数据库，-随机密码" class="headerlink" title="6.初始化数据库，(随机密码)"></a>6.初始化数据库，(随机密码)</h2><p>安装：<strong>yum -y install libaio</strong>、<strong>yum -y install numactl</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux mysql]<span class="meta"># bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span></span><br><span class="line"></span><br><span class="line">2020-04-17T08:47:38.623880Z 0 [Warning] [MY-011070] [Server] 'Disabling symbolic links using --skip-symbolic-links (or equivalent) is the default. Consider not using this option as it' is deprecated and will be removed in a future release.</span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-17</span>T08:<span class="number">47</span>:<span class="number">38.624038</span>Z <span class="number">0</span> [System] [MY<span class="number">-013169</span>] [<span class="built_in">Server</span>] /usr/local/mysql/bin/mysqld (mysqld <span class="number">8.0</span><span class="number">.13</span>) initializing of server in progress as <span class="built_in">process</span> <span class="number">10415</span></span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-17</span>T08:<span class="number">47</span>:<span class="number">42.359922</span>Z <span class="number">5</span> [Note] [MY<span class="number">-010454</span>] [<span class="built_in">Server</span>] A temporary password is generated <span class="keyword">for</span> root@localhost: dTMu)mewW06=</span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-17</span>T08:<span class="number">47</span>:<span class="number">44.048720</span>Z <span class="number">0</span> [System] [MY<span class="number">-013170</span>] [<span class="built_in">Server</span>] /usr/local/mysql/bin/mysqld (mysqld <span class="number">8.0</span><span class="number">.13</span>) initializing of server has completed</span><br><span class="line"></span><br><span class="line">随机密码：dTMu)mewW06=</span><br><span class="line">    </span><br><span class="line">    VCRsjwh,q0-I</span><br></pre></td></tr></table></figure><h2 id="7-修改-usr-local-mysql当前目录得用户"><a href="#7-修改-usr-local-mysql当前目录得用户" class="headerlink" title="7.修改/usr/local/mysql当前目录得用户"></a>7.修改/usr/local/mysql当前目录得用户</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@linux mysql]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">468</span></span><br><span class="line">drwxr-xr-x  <span class="number">2</span> mysql mysql   <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">41</span> bin</span><br><span class="line">drwxr-xr-x  <span class="number">6</span> mysql mysql   <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">47</span> data</span><br><span class="line">drwxr-xr-x  <span class="number">2</span> mysql mysql   <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">41</span> docs</span><br><span class="line">drwxr-xr-x  <span class="number">3</span> mysql mysql   <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">40</span> include</span><br><span class="line">drwxr-xr-x  <span class="number">6</span> mysql mysql   <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">41</span> lib</span><br><span class="line">-rw-r--r--  <span class="number">1</span> mysql mysql <span class="number">335809</span> Oct  <span class="number">7</span>  <span class="number">2018</span> LICENSE</span><br><span class="line">-rw-r--r--  <span class="number">1</span> mysql mysql <span class="number">101807</span> Oct  <span class="number">7</span>  <span class="number">2018</span> LICENSE.router</span><br><span class="line">drwxr-xr-x  <span class="number">4</span> mysql mysql   <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">40</span> man</span><br><span class="line">-rw-r--r--  <span class="number">1</span> mysql mysql    <span class="number">687</span> Oct  <span class="number">7</span>  <span class="number">2018</span> README</span><br><span class="line">-rw-r--r--  <span class="number">1</span> mysql mysql    <span class="number">700</span> Oct  <span class="number">7</span>  <span class="number">2018</span> README.router</span><br><span class="line">drwxr-xr-x <span class="number">28</span> mysql mysql   <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">41</span> share</span><br><span class="line">drwxr-xr-x  <span class="number">2</span> mysql mysql   <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">41</span> support-files</span><br><span class="line"></span><br><span class="line">[root@linux mysql]<span class="meta"># chown -R root:root ./</span></span><br><span class="line">[root@linux mysql]<span class="meta"># chown -R mysql:mysql data</span></span><br><span class="line"></span><br><span class="line">[root@linux mysql]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">468</span></span><br><span class="line">drwxr-xr-x  <span class="number">2</span> root  root    <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">41</span> bin</span><br><span class="line">drwxr-xr-x  <span class="number">6</span> mysql mysql   <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">47</span> data</span><br><span class="line">drwxr-xr-x  <span class="number">2</span> root  root    <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">41</span> docs</span><br><span class="line">drwxr-xr-x  <span class="number">3</span> root  root    <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">40</span> include</span><br><span class="line">drwxr-xr-x  <span class="number">6</span> root  root    <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">41</span> lib</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root  root  <span class="number">335809</span> Oct  <span class="number">7</span>  <span class="number">2018</span> LICENSE</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root  root  <span class="number">101807</span> Oct  <span class="number">7</span>  <span class="number">2018</span> LICENSE.router</span><br><span class="line">drwxr-xr-x  <span class="number">4</span> root  root    <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">40</span> man</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root  root     <span class="number">687</span> Oct  <span class="number">7</span>  <span class="number">2018</span> README</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root  root     <span class="number">700</span> Oct  <span class="number">7</span>  <span class="number">2018</span> README.router</span><br><span class="line">drwxr-xr-x <span class="number">28</span> root  root    <span class="number">4096</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">41</span> share</span><br></pre></td></tr></table></figure><h2 id="8-配置权限-chmod-777-my-default-cnf"><a href="#8-配置权限-chmod-777-my-default-cnf" class="headerlink" title="8.配置权限 # chmod 777 ./my-default.cnf"></a>8.配置权限 # chmod 777 ./my-default.cnf</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@linux mysql]<span class="meta"># cd support-files/</span></span><br><span class="line">[root@linux support-files]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">24</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">773</span> Oct  <span class="number">7</span>  <span class="number">2018</span> magic</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root  <span class="number">1061</span> Oct  <span class="number">7</span>  <span class="number">2018</span> mysqld_multi.server</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root  <span class="number">2048</span> Oct  <span class="number">7</span>  <span class="number">2018</span> mysql-<span class="built_in">log</span>-rotate</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">10576</span> Oct  <span class="number">7</span>  <span class="number">2018</span> mysql.server</span><br><span class="line"></span><br><span class="line">[root@linux support-files]<span class="meta"># touch my-default.cnf</span></span><br><span class="line">[root@linux support-files]<span class="meta"># chmod 777 ./my-default.cnf</span></span><br><span class="line"></span><br><span class="line">[root@linux support-files]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">24</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">773</span> Oct  <span class="number">7</span>  <span class="number">2018</span> magic</span><br><span class="line">-rwxrwxrwx <span class="number">1</span> root root     <span class="number">0</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">53</span> my-<span class="keyword">default</span>.cnf</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root  <span class="number">1061</span> Oct  <span class="number">7</span>  <span class="number">2018</span> mysqld_multi.server</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root  <span class="number">2048</span> Oct  <span class="number">7</span>  <span class="number">2018</span> mysql-<span class="built_in">log</span>-rotate</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">10576</span> Oct  <span class="number">7</span>  <span class="number">2018</span> mysql.server</span><br><span class="line"></span><br><span class="line">[root@linux support-files]<span class="meta"># cd ../</span></span><br><span class="line">[root@linux mysql]<span class="meta"># cp support-files/my-default.cnf /etc/my.cnf</span></span><br><span class="line">cp: overwrite ‘/etc/my.cnf’? </span><br><span class="line">[root@linux mysql]<span class="meta"># cp support-files/my-default.cnf /etc/my.cnf</span></span><br><span class="line">cp: overwrite ‘/etc/my.cnf’? y</span><br></pre></td></tr></table></figure><h3 id="出现错误，加"><a href="#出现错误，加" class="headerlink" title="出现错误，加/"></a>出现错误，加/</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linux mysql]# \cp support-files/my-<span class="keyword">default</span>.cnf /etc/my.cnf</span><br><span class="line">[root@linux mysql]# </span><br><span class="line">[root@linux mysql]<span class="meta"># vim /etc/my.cnf</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">  </span><br><span class="line"># Remove leading <span class="meta"># and set to the amount of RAM for the most important data</span></span><br><span class="line"><span class="meta"># cache in MySQL. Start at 70% of total RAM for dedicated server, <span class="meta-keyword">else</span> 10%.</span></span><br><span class="line"># innodb_buffer_pool_size = <span class="number">128</span>M</span><br><span class="line">  </span><br><span class="line"># Remove leading # to <span class="built_in">turn</span> on a very important data integrity option: logging</span><br><span class="line"># changes to the binary <span class="built_in">log</span> between backups.</span><br><span class="line"># log_bin</span><br><span class="line">  </span><br><span class="line"># These are commonly <span class="built_in">set</span>, <span class="built_in">remove</span> the # <span class="keyword">and</span> <span class="built_in">set</span> as required.</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line"><span class="built_in">log</span>-error = /usr/local/mysql/data/error.<span class="built_in">log</span></span><br><span class="line">pid-file = /usr/local/mysql/data/mysql.pid</span><br><span class="line">tmpdir = /tmp</span><br><span class="line">port = <span class="number">3306</span></span><br><span class="line">#lower_case_table_names = <span class="number">1</span></span><br><span class="line"># server_id = .....</span><br><span class="line"># socket = .....</span><br><span class="line">#lower_case_table_names = <span class="number">1</span></span><br><span class="line">max_allowed_packet=<span class="number">32</span>M</span><br><span class="line"><span class="keyword">default</span>-authentication-plugin = mysql_native_password</span><br><span class="line">#lower_case_file_system = on</span><br><span class="line">#lower_case_table_names = <span class="number">1</span></span><br><span class="line">log_bin_trust_function_creators = ON</span><br><span class="line"># Remove leading # to <span class="built_in">set</span> options mainly useful <span class="keyword">for</span> reporting servers.</span><br><span class="line"># The server defaults are faster <span class="keyword">for</span> transactions <span class="keyword">and</span> fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to <span class="built_in">find</span> the optimal values.</span><br><span class="line"># join_buffer_size = <span class="number">128</span>M</span><br><span class="line"># sort_buffer_size = <span class="number">2</span>M</span><br><span class="line"># read_rnd_buffer_size = <span class="number">2</span>M</span><br><span class="line">  </span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure><h2 id="9-开机自启，进入-usr-local-mysql-support-files进行设置"><a href="#9-开机自启，进入-usr-local-mysql-support-files进行设置" class="headerlink" title="9.开机自启，进入/usr/local/mysql/support-files进行设置"></a>9.开机自启，进入/usr/local/mysql/support-files进行设置</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@linux mysql]<span class="meta"># cd support-files/</span></span><br><span class="line">[root@linux support-files]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">24</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">773</span> Oct  <span class="number">7</span>  <span class="number">2018</span> magic</span><br><span class="line">-rwxrwxrwx <span class="number">1</span> root root     <span class="number">0</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">53</span> my-<span class="keyword">default</span>.cnf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cp mysql.server /etc/init.d/mysql</span><br><span class="line"></span><br><span class="line">[root@linux support-files]<span class="meta"># chmod +x /etc/init.d/mysql</span></span><br><span class="line">[root@linux support-files]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">24</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">773</span> Oct  <span class="number">7</span>  <span class="number">2018</span> magic</span><br><span class="line">-rwxrwxrwx <span class="number">1</span> root root     <span class="number">0</span> Apr <span class="number">17</span> <span class="number">16</span>:<span class="number">53</span> my-<span class="keyword">default</span>.cnf</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root  <span class="number">1061</span> Oct  <span class="number">7</span>  <span class="number">2018</span> mysqld_multi.server</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root  <span class="number">2048</span> Oct  <span class="number">7</span>  <span class="number">2018</span> mysql-<span class="built_in">log</span>-rotate</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">10576</span> Oct  <span class="number">7</span>  <span class="number">2018</span> mysql.server</span><br></pre></td></tr></table></figure><h2 id="10-注册服务-查看"><a href="#10-注册服务-查看" class="headerlink" title="10.注册服务,查看"></a>10.注册服务,查看</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@linux support-files]<span class="meta"># cd ..</span></span><br><span class="line">[root@linux mysql]<span class="meta"># chkconfig --add mysql</span></span><br><span class="line">[root@linux mysql]<span class="meta"># chkconfig --list mysql</span></span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only <span class="keyword">and</span> does <span class="keyword">not</span> include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use 'systemctl list-unit-files'.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      'systemctl list-dependencies [target]'.</span><br><span class="line"></span><br><span class="line">mysql           <span class="number">0</span>:off   <span class="number">1</span>:off   <span class="number">2</span>:on    <span class="number">3</span>:on    <span class="number">4</span>:on    <span class="number">5</span>:on    <span class="number">6</span>:off</span><br></pre></td></tr></table></figure><h2 id="11-etc-ld-so-conf要配置路径，不然报错"><a href="#11-etc-ld-so-conf要配置路径，不然报错" class="headerlink" title="11.etc/ld.so.conf要配置路径，不然报错"></a>11.etc/ld.so.conf要配置路径，不然报错</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linux mysql]<span class="meta"># vim /etc/ld.so.conf</span></span><br><span class="line"></span><br><span class="line">include ld.so.conf.d<span class="comment">/*.conf</span></span><br><span class="line"><span class="comment">/usr/local/mysql/lib</span></span><br><span class="line"><span class="comment">~                                                                                                       </span></span><br><span class="line"><span class="comment">~</span></span><br></pre></td></tr></table></figure><h2 id="12-配置环境变量"><a href="#12-配置环境变量" class="headerlink" title="12.配置环境变量"></a>12.配置环境变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linux mysql]<span class="meta"># vim /etc/profile</span></span><br><span class="line"></span><br><span class="line"># /etc/profile</span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:/usr/local/mysql/bin:/usr/local/mysql/lib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@linux mysql]# source /etc/profile</span><br><span class="line">[root@linux mysql]# service mysql start</span><br><span class="line">Starting MySQL.Logging to '/usr/local/mysql/data/error.log'.</span><br><span class="line">.                                                          [  OK  ]</span><br></pre></td></tr></table></figure><h2 id="13-登录"><a href="#13-登录" class="headerlink" title="13.登录"></a>13.登录</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line">alias mysql=/usr/local/mysql/bin/mysql</span><br><span class="line">[root@linux mysql]# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands <span class="built_in">end</span> with ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id is <span class="number">9</span></span><br><span class="line"><span class="built_in">Server</span> version: <span class="number">8.0</span><span class="number">.13</span></span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2018</span>, Oracle <span class="keyword">and</span>/<span class="keyword">or</span> its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation <span class="keyword">and</span>/<span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br></pre></td></tr></table></figure><h2 id="14-修改密码"><a href="#14-修改密码" class="headerlink" title="14.修改密码"></a>14.修改密码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  alter user 'root'@'localhost' identified by 'XXXXXXX';   </span><br><span class="line">Query OK, <span class="number">0</span> <span class="function">rows <span class="title">affected</span> <span class="params">(<span class="number">0.09</span> sec)</span></span></span><br></pre></td></tr></table></figure><h2 id="15-开启Navicat远程连接"><a href="#15-开启Navicat远程连接" class="headerlink" title="15.开启Navicat远程连接"></a>15.开启Navicat远程连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup <span class="keyword">with</span> -A</span><br><span class="line"><span class="keyword">Database</span> <span class="keyword">changed</span></span><br><span class="line">mysql&gt; <span class="keyword">select</span> host, <span class="keyword">user</span>, authentication_string, <span class="keyword">plugin</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line">+<span class="comment">-----------+------------------+------------------------------------------------------------------------+-----------------------+</span></span><br><span class="line">| host      | user             | authentication_string                                                  | plugin                |</span><br><span class="line">+<span class="comment">-----------+------------------+------------------------------------------------------------------------+-----------------------+</span></span><br><span class="line">| localhost | mysql.infoschema | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | mysql.session    | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | mysql.sys        | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | root             | $A$005$t8Y&lt;0i1</span><br><span class="line">                                               ,E|P`ZT)zSQTUDAQ5V86TvCsNfx1TRQagWpjnmlUQy0vnAu7awf2 | caching_sha2_password |</span><br><span class="line">+<span class="comment">-----------+------------------+------------------------------------------------------------------------+-----------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '1234';</span><br><span class="line">ERROR 1396 (HY000): Operation <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="keyword">failed</span> <span class="keyword">for</span> <span class="string">'root'</span>@<span class="string">'%'</span></span><br><span class="line">mysql&gt; <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'1234'</span>; </span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; exit;</span><br><span class="line">Bye</span><br><span class="line">[root@linux mysql]<span class="comment"># service mysql restart</span></span><br><span class="line">Shutting down MySQL..                                      [  OK  ]</span><br><span class="line">Starting MySQL..                                           [  OK  ]</span><br></pre></td></tr></table></figure><h3 id="连接失败，改"><a href="#连接失败，改" class="headerlink" title="连接失败，改"></a>连接失败，改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@linux mysql]<span class="comment"># mysql -uroot -p        </span></span><br><span class="line">Enter password: </span><br><span class="line">mysql&gt; use mysql</span><br><span class="line">mysql&gt; update user set host='%' where user='root' limit 1;</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select host, user, authentication_string, plugin from user;</span><br><span class="line">+<span class="comment">-----------+------------------+------------------------------------------------------------------------+-----------------------+</span></span><br><span class="line">| host      | user             | authentication_string                                                  | plugin                |</span><br><span class="line">+<span class="comment">-----------+------------------+------------------------------------------------------------------------+-----------------------+</span></span><br><span class="line">| %         | root             | *A4B6157319038724E3560894F7F932C8886EBFCF                              | mysql_native_password |</span><br><span class="line">| localhost | mysql.infoschema | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | mysql.session    | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | mysql.sys        | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">+<span class="comment">-----------+------------------+------------------------------------------------------------------------+-----------------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">exit</span>;</span><br><span class="line">Bye</span><br><span class="line">[root@linux mysql]<span class="comment"># service mysql restart</span></span><br><span class="line">Shutting down MySQL...                                     [  OK  ]</span><br><span class="line">Starting MySQL..                                           [  OK  ]</span><br></pre></td></tr></table></figure><h2 id="16-连接成功"><a href="#16-连接成功" class="headerlink" title="16.连接成功"></a>16.连接成功</h2><h2 id="17-出现错误"><a href="#17-出现错误" class="headerlink" title="17.出现错误"></a>17.出现错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入mysql -u root -p出现错误：-bash: mysql: command not found</span><br><span class="line">输入：alias mysql&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysql</span><br></pre></td></tr></table></figure><h2 id="18-卸载mysql"><a href="#18-卸载mysql" class="headerlink" title="18.卸载mysql"></a>18.卸载mysql</h2><p>rpm -qa|grep -i mysql查看是否安装过mysql，如果安装过需要先卸载掉</p><p>rpm -e</p><p>查找命令find / -name mysql</p><p>rm -rf</p><h2 id="19-添加用户组和权限"><a href="#19-添加用户组和权限" class="headerlink" title="19.添加用户组和权限"></a>19.添加用户组和权限</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'cs'</span>@<span class="string">'cs'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>; </span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">update</span> <span class="keyword">on</span> cs.cs1 <span class="keyword">to</span> <span class="string">'cs'</span>@<span class="string">'cs'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.创建用户:</span><br><span class="line"># 指定ip：192.118.1.1的mjj用户登录</span><br><span class="line">create user &#39;mjj&#39;@&#39;192.118.1.1&#39; identified by &#39;123&#39;;</span><br><span class="line"># 指定ip：192.118.1.开头的mjj用户登录</span><br><span class="line">create user &#39;mjj&#39;@&#39;192.118.1.%&#39; identified by &#39;123&#39;;</span><br><span class="line"># 指定任何ip的mjj用户登录</span><br><span class="line">create use &#39;mjj&#39;@&#39;%&#39; identified by &#39;123&#39;;</span><br><span class="line"></span><br><span class="line">2.删除用户</span><br><span class="line">drop user &#39;用户名&#39;@&#39;IP地址&#39;;</span><br><span class="line">3.修改用户</span><br><span class="line">rename user &#39;用户名&#39;@&#39;IP地址&#39; to &#39;新用户名&#39;@&#39;IP地址&#39;;</span><br><span class="line"></span><br><span class="line">4.修改密码</span><br><span class="line">set password for &#39;用户名&#39;@&#39;IP地址&#39;&#x3D;Password(&#39;新密码&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#查看权限</span><br><span class="line">show grants for &#39;用户&#39;@&#39;IP地址&#39;</span><br><span class="line"></span><br><span class="line">#授权</span><br><span class="line">grant select ,insert,update on db1.t1 to &quot;mjj&quot;@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line"># 表示有所有的权限，除了grant这个命令，这个命令是root才有的。</span><br><span class="line">grant all privileges  on db1.t1 to &quot;mjj&quot;@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line">#取消权限</span><br><span class="line">取消来自远程服务器的mjj用户对数据库db1的所有表的所有权限</span><br><span class="line"></span><br><span class="line">revoke all on db1.* from &#39;mjj&#39;@&quot;%&quot;;  </span><br><span class="line"></span><br><span class="line">取消来自远程服务器的mjj用户所有数据库的所有的表的权限</span><br><span class="line">revoke all privileges on &#39;*&#39; from &#39;mjj&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure><h2 id="20-备份"><a href="#20-备份" class="headerlink" title="20.备份"></a>20.备份</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 数据库 &gt; 导出的文件名</span><br><span class="line"></span><br><span class="line"># 备份：数据表结构+数据</span><br><span class="line">mysqdump -u root db1 &gt; db1.sql -p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 备份：数据表结构</span><br><span class="line">mysqdump -u root -d db1 &gt; db1.sql -p</span><br><span class="line"></span><br><span class="line">#导入现有的数据到某个数据库</span><br><span class="line">#1.先创建一个新的数据库</span><br><span class="line">create database db10;</span><br><span class="line"># 2.将已有的数据库文件导入到db10数据库中</span><br><span class="line">mysqdump -u root -d db10 &lt; db1.sql -p</span><br></pre></td></tr></table></figure><p>1.导出整个数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 数据库 &gt; 导出的文件名</span><br></pre></td></tr></table></figure><p>2.导出一个数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 数据库名 表名&gt; 导出的文件名</span><br><span class="line"></span><br><span class="line">两者之间的差别在于不使用 --databases 选项，则备份输出信息中不会包含CREATE DATABASE或USE语句。不使用 --databases 选项备份的数据文件，在后期进行数据还原操作时，如果该数据库不存在，必须先创建该数据库。</span><br></pre></td></tr></table></figure><p>3.批量导出多个数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 --databases 数据库 导出的文件名</span><br><span class="line">mysqldump -u用户名 -p密码 -B 数据库 导出的文件名</span><br></pre></td></tr></table></figure><p>4.导出所有数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 -all-databases 导出的文件名</span><br></pre></td></tr></table></figure><p>5.还原数据库</p><p>source命令要进入mysql控制台使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SOURCE 导入文件的路径;</span><br><span class="line"></span><br><span class="line">1.登录 MySQL</span><br><span class="line">2.选中数据库</span><br><span class="line">3.设置数据库编码，如果不设置，可能会出现乱码</span><br><span class="line">4.使用 SOURCE 命令还原数据</span><br><span class="line">5.查看还原结果</span><br></pre></td></tr></table></figure><p>设置数据库编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 客户端的编码</span><br><span class="line">SET character_set_client &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">-- 连接的编码</span><br><span class="line">SET character_set_connection &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">-- 查询的结果编码</span><br><span class="line">SET character_set_results &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">-- 数据库编码</span><br><span class="line">SET character_set_database &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">-- 数据库服务器的编码</span><br><span class="line">SET character_set_server &#x3D; utf8;</span><br></pre></td></tr></table></figure><p>数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">显示</span><br><span class="line">show databases;</span><br><span class="line">创建</span><br><span class="line">create database cs2;</span><br><span class="line">删除</span><br><span class="line">drop database cs2;</span><br><span class="line"></span><br><span class="line">在命令行上运行，在cs2上还原</span><br><span class="line">mysql -uroot -p1234 cs2 &lt; &#x2F;root&#x2F;cs1.sql</span><br></pre></td></tr></table></figure><ul><li>全备份将备份某一时刻所有的数据</li><li>增量备份仅备份某一段时间内发生过改变的数据。</li><li>通过物理或逻辑备份工具就可以完成完全备份，而增量备份需要开启MySQL二进制日志，通过日志记录数据的改变，从而实现增量差异备份。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p cs &gt; &#x2F;root&#x2F;cs12.sql</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p --databases cs &gt; &#x2F;root&#x2F;cs11.sql</span><br><span class="line"></span><br><span class="line">-rw-r--r--  1 root root      2113 6月  23 09:05 cs11.sql</span><br><span class="line">-rw-r--r--  1 root root      1952 6月  23 09:05 cs12.sql</span><br><span class="line"></span><br><span class="line">两者之间的差别在于不使用 --databases 选项，则备份输出信息中不会包含CREATE DATABASE或USE语句。不使用 --databases 选项备份的数据文件，在后期进行数据还原操作时，如果该数据库不存在，必须先创建该数据库。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里云Linux下安装mysql 8.0.13&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://linhuide.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="linux" scheme="https://linhuide.github.io/tags/linux/"/>
    
      <category term="mysql" scheme="https://linhuide.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql高级使用3</title>
    <link href="https://linhuide.github.io/post/d988fefb.html"/>
    <id>https://linhuide.github.io/post/d988fefb.html</id>
    <published>2020-04-15T07:23:47.000Z</published>
    <updated>2020-04-18T11:48:53.387Z</updated>
    
    <content type="html"><![CDATA[<p>mysql-应用优化-查询缓存优化-内存管理及优化-并发参数调整-锁-常用sql</p><a id="more"></a><h1 id="1-应用优化"><a href="#1-应用优化" class="headerlink" title="1. 应用优化"></a>1. 应用优化</h1><p>​    在实际生产环境中，由于数据库本身的性能局限，就必须要对前台的应用进行一些优化，来降低数据库的访问压力。</p><h2 id="1-1-使用连接池"><a href="#1-1-使用连接池" class="headerlink" title="1.1 使用连接池"></a>1.1 使用连接池</h2><p>​    对于访问数据库来说，建立连接的代价是比较昂贵的，因为我们频繁的创建关闭连接，是比较耗费资源的，我们有必要建立 数据库连接池，以提高访问的性能。</p><h2 id="1-2-减少对MySQL的访问"><a href="#1-2-减少对MySQL的访问" class="headerlink" title="1.2 减少对MySQL的访问"></a>1.2 减少对MySQL的访问</h2><h3 id="1-2-1-避免对数据进行重复检索"><a href="#1-2-1-避免对数据进行重复检索" class="headerlink" title="1.2.1 避免对数据进行重复检索"></a>1.2.1 避免对数据进行重复检索</h3><p>​    在编写应用代码时，需要能够理清对数据库的访问逻辑。能够一次连接就获取到结果的，就不用两次连接，这样可以大大减少对数据库无用的重复请求。</p><p>比如 ，需要获取书籍的id 和name字段 ， 则查询如下： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> , <span class="keyword">name</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><p>之后，在业务逻辑中有需要获取到书籍状态信息， 则查询如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> , <span class="keyword">status</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><p>这样，就需要向数据库提交两次请求，数据库就要做两次查询操作。其实完全可以用一条SQL语句得到想要的结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> , <span class="keyword">status</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-增加cache层"><a href="#1-2-2-增加cache层" class="headerlink" title="1.2.2 增加cache层"></a>1.2.2 增加cache层</h3><p>​    在应用中，我们可以在应用中增加 缓存 层来达到减轻数据库负担的目的。缓存层有很多种，也有很多实现方式，只要能达到降低数据库的负担又能满足应用需求就可以。</p><p>​    因此可以部分数据从数据库中抽取出来放到应用端以文本方式存储， 或者使用框架(Mybatis, Hibernate)提供的一级缓存/二级缓存，或者使用redis数据库来缓存数据 。</p><h2 id="1-3-负载均衡"><a href="#1-3-负载均衡" class="headerlink" title="1.3 负载均衡"></a>1.3 负载均衡</h2><p>​    负载均衡是应用中使用非常普遍的一种优化方法，它的机制就是利用某种均衡算法，将固定的负载量分布到不同的服务器上， 以此来降低单台服务器的负载，达到优化的效果。</p><h3 id="1-3-1-利用MySQL复制分流查询"><a href="#1-3-1-利用MySQL复制分流查询" class="headerlink" title="1.3.1 利用MySQL复制分流查询"></a>1.3.1 利用MySQL复制分流查询</h3><p>​    通过MySQL的主从复制，实现读写分离，使增删改操作走主节点，查询操作走从节点，从而可以降低单台服务器的读写压力。</p><p> <img src="../../images/mysql/3/3-1.jpg" alt="3-1"></p><h3 id="1-3-2-采用分布式数据库架构"><a href="#1-3-2-采用分布式数据库架构" class="headerlink" title="1.3.2 采用分布式数据库架构"></a>1.3.2 采用分布式数据库架构</h3><p>​    分布式数据库架构适合大数据量、负载高的情况，它有良好的拓展性和高可用性。通过在多台服务器之间分布数据，可以实现在多台服务器之间的负载均衡，提高访问效率。</p><h1 id="2-Mysql中查询缓存优化"><a href="#2-Mysql中查询缓存优化" class="headerlink" title="2. Mysql中查询缓存优化"></a>2. Mysql中查询缓存优化</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>​    开启Mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果，当数据被修改，之前的缓存会失效，修改比较频繁的表不适合做查询缓存。</p><h2 id="2-2-操作流程"><a href="#2-2-操作流程" class="headerlink" title="2.2 操作流程"></a>2.2 操作流程</h2><p> <img src="../../images/mysql/3/3-2.png" alt="3-2"></p><ol><li>客户端发送一条查询给服务器；</li><li>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段；</li><li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划；</li><li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</li><li>将结果返回给客户端。</li></ol><h2 id="2-3-查询缓存配置"><a href="#2-3-查询缓存配置" class="headerlink" title="2.3 查询缓存配置"></a>2.3 查询缓存配置</h2><ol><li><p>查看当前的MySQL数据库是否支持查询缓存：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'have_query_cache'</span>;</span><br></pre></td></tr></table></figure><p> <img src="../../images/mysql/3/3-7.png" alt="3-7"></p></li><li><p>查看当前MySQL是否开启了查询缓存 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'query_cache_type'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-8.png" alt="3-8"></p></li><li><p>查看查询缓存的占用大小 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'query_cache_size'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-9.png" alt="3-9">      </p></li><li><p>查看查询缓存的状态变量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-10.png" alt="3-10"></p><p>各个变量的含义如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>Qcache_free_blocks</td><td>查询缓存中的可用内存块数</td></tr><tr><td>Qcache_free_memory</td><td>查询缓存的可用内存量</td></tr><tr><td>Qcache_hits</td><td>查询缓存命中数</td></tr><tr><td>Qcache_inserts</td><td>添加到查询缓存的查询数</td></tr><tr><td>Qcache_lowmen_prunes</td><td>由于内存不足而从查询缓存中删除的查询数</td></tr><tr><td>Qcache_not_cached</td><td>非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存）</td></tr><tr><td>Qcache_queries_in_cache</td><td>查询缓存中注册的查询数</td></tr><tr><td>Qcache_total_blocks</td><td>查询缓存中的块总数</td></tr></tbody></table></li></ol><h2 id="2-4-开启查询缓存"><a href="#2-4-开启查询缓存" class="headerlink" title="2.4 开启查询缓存"></a>2.4 开启查询缓存</h2><p>MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type ， 来开启查询缓存。query_cache_type 该参数的可取值有三个 ：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>OFF 或 0</td><td>查询缓存功能关闭</td></tr><tr><td>ON 或 1</td><td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定 SQL_NO_CACHE，不予缓存</td></tr><tr><td>DEMAND 或 2</td><td>查询缓存功能按需进行，显式指定 SQL_CACHE 的SELECT语句才会缓存；其它均不予缓存</td></tr></tbody></table><p>在 /usr/my.cnf 配置中，增加以下配置 ： </p><p><img src="../../images/mysql/3/3-11.png" alt="3-11"></p><p>配置完毕之后，重启服务既可生效 ；</p><p>然后就可以在命令行执行SQL语句进行验证 ，执行一条比较耗时的SQL语句，然后再多执行几次，查看后面几次的执行时间；获取通过查看查询缓存的缓存命中数，来判定是否走查询缓存。</p><h2 id="2-5-查询缓存SELECT选项"><a href="#2-5-查询缓存SELECT选项" class="headerlink" title="2.5 查询缓存SELECT选项"></a>2.5 查询缓存SELECT选项</h2><p>可以在SELECT语句中指定两个与查询缓存相关的选项 ：</p><ul><li>SQL_CACHE : 如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。</li><li>SQL_NO_CACHE : 服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。</li></ul><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SQL_CACHE</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">FROM</span> customer;</span><br><span class="line"><span class="keyword">SELECT</span> SQL_NO_CACHE <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">FROM</span> customer;</span><br></pre></td></tr></table></figure><h2 id="2-6-查询缓存失效的情况"><a href="#2-6-查询缓存失效的情况" class="headerlink" title="2.6 查询缓存失效的情况"></a>2.6 查询缓存失效的情况</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'Qcache%'</span>;<span class="comment">--&gt;Qcache_not_cached</span></span><br></pre></td></tr></table></figure><ol><li>SQL 语句不一致的情况， 要想命中查询缓存，查询的SQL语句必须一致。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL1 : <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;</span><br><span class="line">SQL2 : <span class="keyword">Select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;</span><br></pre></td></tr></table></figure><ol start="2"><li>当查询语句中有一些不确定的时，则不会缓存。如 ： now() , current_date() , curdate() , curtime() , rand() , uuid() , user() , database() 。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL1 : <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> updatetime &lt; <span class="keyword">now</span>() <span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line">SQL2 : <span class="keyword">select</span> <span class="keyword">user</span>();</span><br><span class="line">SQL3 : <span class="keyword">select</span> <span class="keyword">database</span>();</span><br></pre></td></tr></table></figure><ol start="3"><li>不使用任何表查询语句。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'A'</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>查询 mysql， information_schema或  performance_schema 数据库中的表时，不会走查询缓存。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.engines;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>在存储的函数，触发器或事件的主体内执行的查询。</p></li><li><p>如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用<code>MERGE</code>映射到已更改表的表的查询。一个表可以被许多类型的语句，如被改变 INSERT， UPDATE， DELETE， TRUNCATE TABLE， ALTER TABLE， DROP TABLE，或 DROP DATABASE 。</p></li></ol><h1 id="3-Mysql内存管理及优化"><a href="#3-Mysql内存管理及优化" class="headerlink" title="3. Mysql内存管理及优化"></a>3. Mysql内存管理及优化</h1><h2 id="3-1-内存优化原则"><a href="#3-1-内存优化原则" class="headerlink" title="3.1 内存优化原则"></a>3.1 内存优化原则</h2><ol><li>将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。</li><li>MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存。</li><li>排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</li></ol><h2 id="3-2-MyISAM-内存优化"><a href="#3-2-MyISAM-内存优化" class="headerlink" title="3.2 MyISAM 内存优化"></a>3.2 MyISAM 内存优化</h2><p>​    myisam存储引擎使用 key_buffer 缓存索引块，加速myisam索引的读写速度。</p><p>​    对于myisam表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。</p><h3 id="1-key-buffer-size"><a href="#1-key-buffer-size" class="headerlink" title="1.key_buffer_size"></a>1.key_buffer_size</h3><ul><li>key_buffer_size决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。</li><li>可以在MySQL参数文件中设置key_buffer_size的值</li><li>对于一般MyISAM数据库，建议至少将1/4可用内存分配给key_buffer_size。</li></ul><p>在/usr/my.cnf 中做如下配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/my.cnf </span><br><span class="line">key_buffer_size=512M</span><br></pre></td></tr></table></figure><h3 id="2-read-buffer-size"><a href="#2-read-buffer-size" class="headerlink" title="2.read_buffer_size"></a>2.read_buffer_size</h3><ul><li>如果需要经常顺序扫描myisam表，可以通过增大read_buffer_size的值来改善性能。</li><li>但需要注意的是read_buffer_size是每个session独占的，如果默认值设置太大，就会造成内存浪费。</li></ul><h3 id="3-read-rnd-buffer-size"><a href="#3-read-rnd-buffer-size" class="headerlink" title="3.read_rnd_buffer_size"></a>3.read_rnd_buffer_size</h3><ul><li>对于需要做排序的myisam表的查询，如带有order by子句的sql，适当增加 read_rnd_buffer_size 的值，可以改善此类的sql性能。</li><li>但需要注意的是 read_rnd_buffer_size 是每个session独占的，如果默认值设置太大，就会造成内存浪费。</li></ul><h2 id="3-3-InnoDB-内存优化"><a href="#3-3-InnoDB-内存优化" class="headerlink" title="3.3 InnoDB 内存优化"></a>3.3 InnoDB 内存优化</h2><p>innodb用一块内存区做IO缓存池，该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。</p><h3 id="1-innodb-buffer-pool-size"><a href="#1-innodb-buffer-pool-size" class="headerlink" title="1.innodb_buffer_pool_size"></a>1.innodb_buffer_pool_size</h3><ul><li>该变量决定了 innodb 存储引擎表数据和索引数据的最大缓存区大小。</li><li>在保证操作系统及其他程序有足够内存可用的情况下，innodb_buffer_pool_size 的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/my.cnf  </span><br><span class="line"></span><br><span class="line">innodb_buffer_pool_size=512M</span><br><span class="line"></span><br><span class="line">service mysql restart </span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'innodb_buffer_pool_size'</span></span><br></pre></td></tr></table></figure><h3 id="2-innodb-log-buffer-size"><a href="#2-innodb-log-buffer-size" class="headerlink" title="2.innodb_log_buffer_size"></a>2.innodb_log_buffer_size</h3><p>决定了innodb重做日志缓存的大小，对于可能产生大量更新记录的大事务，增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_log_buffer_size=10M</span><br></pre></td></tr></table></figure><h1 id="4-Mysql并发参数调整"><a href="#4-Mysql并发参数调整" class="headerlink" title="4. Mysql并发参数调整"></a>4. Mysql并发参数调整</h1><ul><li>从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。</li><li>多线程可以有效利用服务器资源，提高数据库的并发性能。</li><li>在Mysql中，控制并发连接和线程的主要参数包括 max_connections、back_log、thread_cache_size、table_open_cahce。</li></ul><h2 id="4-1-max-connections"><a href="#4-1-max-connections" class="headerlink" title="4.1 max_connections"></a>4.1 max_connections</h2><ul><li>采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是 151。</li><li>如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。</li><li>Mysql 最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。</li><li>在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。</li></ul><h2 id="4-2-back-log"><a href="#4-2-back-log" class="headerlink" title="4.2 back_log"></a>4.2 back_log</h2><ul><li>back_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。</li><li>如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。</li><li>5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections / 5）， 但最大不超过900。</li><li>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</li></ul><h2 id="4-3-table-open-cache"><a href="#4-3-table-open-cache" class="headerlink" title="4.3 table_open_cache"></a>4.3 table_open_cache</h2><ul><li>该参数用来控制所有SQL语句执行线程可打开表缓存的数量， 而在执行SQL语句时，每一个SQL执行线程至少要打开 1 个表缓存。</li><li>该参数的值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表的最大数量来设定 ：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_connections x N ；</span><br></pre></td></tr></table></figure><h2 id="4-4-thread-cache-size"><a href="#4-4-thread-cache-size" class="headerlink" title="4.4 thread_cache_size"></a>4.4 thread_cache_size</h2><p>为了加快连接数据库的速度，MySQL 会缓存一定数量的客户服务线程以备重用，通过参数 thread_cache_size 可控制 MySQL 缓存客户服务线程的数量。</p><h2 id="4-5-innodb-lock-wait-timeout"><a href="#4-5-innodb-lock-wait-timeout" class="headerlink" title="4.5 innodb_lock_wait_timeout"></a>4.5 innodb_lock_wait_timeout</h2><ul><li>该参数是用来设置InnoDB 事务等待行锁的时间，默认值是50ms ， 可以根据需要进行动态设置。</li><li>对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起；</li><li>对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。</li></ul><h1 id="5-Mysql锁问题"><a href="#5-Mysql锁问题" class="headerlink" title="5. Mysql锁问题"></a>5. Mysql锁问题</h1><h2 id="5-1-锁概述"><a href="#5-1-锁概述" class="headerlink" title="5.1 锁概述"></a>5.1 锁概述</h2><ul><li>锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。</li><li>在数据库中，除传统的计算资源（如 CPU、RAM、I/O 等）的争用以外，数据也是一种供许多用户共享的资源。</li><li>如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。</li><li>从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</li></ul><h2 id="5-2-锁分类"><a href="#5-2-锁分类" class="headerlink" title="5.2 锁分类"></a>5.2 锁分类</h2><ul><li>从对数据操作的粒度分 ： <ul><li>表锁：操作时，会锁定整个表。</li><li>行锁：操作时，会锁定当前操作行。</li></ul></li><li>从对数据操作的类型分：<ul><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</li><li>写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</li></ul></li></ul><h2 id="5-3-Mysql-锁"><a href="#5-3-Mysql-锁" class="headerlink" title="5.3 Mysql 锁"></a>5.3 Mysql 锁</h2><p>相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。</p><p>下表中罗列出了各存储引擎对锁的支持情况：</p><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页面锁</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><p>MySQL这3种锁的特性可大致归纳如下 ：</p><table><thead><tr><th>锁类型</th><th>特点</th></tr></thead><tbody><tr><td>表级锁</td><td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td></tr><tr><td>行级锁</td><td>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td></tr><tr><td>页面锁</td><td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td></tr></tbody></table><ul><li>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！</li><li>仅从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web 应用；</li><li>而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</li></ul><h2 id="5-4-MyISAM-表锁"><a href="#5-4-MyISAM-表锁" class="headerlink" title="5.4 MyISAM 表锁"></a>5.4 MyISAM 表锁</h2><p>MyISAM 存储引擎只支持表锁，这也是MySQL开始几个版本中唯一支持的锁类型。</p><h3 id="5-4-1-如何加表锁"><a href="#5-4-1-如何加表锁" class="headerlink" title="5.4.1 如何加表锁"></a>5.4.1 如何加表锁</h3><ul><li>MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁</li><li>在执行更新操作（UPDATE、DELETE、INSERT 等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预</li><li>因此，用户一般不需要直接用 LOCK TABLE 命令给 MyISAM 表显式加锁。</li></ul><p>显示加表锁语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">加读锁 ： <span class="keyword">lock</span> <span class="keyword">table</span> table_name <span class="keyword">read</span>;</span><br><span class="line"></span><br><span class="line">加写锁 ： <span class="keyword">lock</span> <span class="keyword">table</span> table_name write；</span><br></pre></td></tr></table></figure><h3 id="5-4-2-读锁案例"><a href="#5-4-2-读锁案例" class="headerlink" title="5.4.2 读锁案例"></a>5.4.2 读锁案例</h3><p>准备环境</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> demo_03 <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4;</span><br><span class="line"><span class="keyword">use</span> demo_03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_book`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) auto_increment,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`publish_time`</span> <span class="built_in">DATE</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=myisam <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_book (<span class="keyword">id</span>, <span class="keyword">name</span>, publish_time, <span class="keyword">status</span>) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'java编程思想'</span>,<span class="string">'2088-08-01'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_book (<span class="keyword">id</span>, <span class="keyword">name</span>, publish_time, <span class="keyword">status</span>) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'solr编程思想'</span>,<span class="string">'2088-08-08'</span>,<span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) auto_increment,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=myisam <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'令狐冲'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'田伯光'</span>);</span><br></pre></td></tr></table></figure><p><strong>客户端 一 ：</strong></p><ol><li>获得tb_book 表的读锁 </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tb_book <span class="keyword">read</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>执行查询操作</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-12.png" alt="3-12"></p><p>可以正常执行 ， 查询出数据。</p><p><strong>客户端 二 ：</strong></p><ol start="3"><li>执行查询操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_book;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-13.png" alt="3-13"></p><p><strong>客户端 一 ：</strong></p><ol start="4"><li>查询未锁定的表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from tb_seller;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-14.png" alt="3-14"></p><p><strong>客户端 二 ：</strong></p><ol start="5"><li>查询未锁定的表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from tb_seller;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-15.png" alt="3-15"></p><p>可以正常查询出未锁定的表；</p><p><strong>客户端 一 ：</strong></p><ol start="6"><li>执行插入操作 </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Mysql高级'</span>,<span class="string">'2088-01-01'</span>,<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-16.png" alt="3-16"></p><p><strong>执行插入， 直接报错 ， 由于当前tb_book 获得的是 读锁， 不能执行更新操作。</strong></p><p><strong>客户端 二 ：</strong></p><ol start="7"><li>执行插入操作 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into tb_book values(null,&#39;Mysql高级&#39;,&#39;2088-01-01&#39;,&#39;1&#39;);</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-17.png" alt="3-17"></p><p><strong>当在客户端一中释放锁指令 unlock tables  后 ， 客户端二中的 inesrt 语句 ， 立即执行 ；</strong></p><h3 id="5-4-3-写锁案例"><a href="#5-4-3-写锁案例" class="headerlink" title="5.4.3 写锁案例"></a>5.4.3 写锁案例</h3><p><strong>客户端 一 :</strong></p><ol><li>获得tb_book 表的写锁 </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tb_book write ;</span><br></pre></td></tr></table></figure><ol start="2"><li>执行查询操作</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book ;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-18.png" alt="3-18"></p><p>查询操作执行成功；</p><ol start="3"><li>执行更新操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_book set name &#x3D; &#39;java编程思想（第二版）&#39; where id &#x3D; 1;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-19.png" alt="3-19"></p><p>更新操作执行成功 ；</p><p><strong>客户端 二 :</strong></p><ol start="4"><li>执行查询操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_book ;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-20.png" alt="3-20"></p><p><strong>当在客户端一中释放锁指令 unlock tables  后 ， 客户端二中的 select 语句 ， 立即执行 ；</strong></p><p><img src="../../images/mysql/3/3-21.png" alt="3-21"></p><h3 id="5-4-4-结论"><a href="#5-4-4-结论" class="headerlink" title="5.4.4 结论"></a>5.4.4 结论</h3><p>锁模式的相互兼容性如表中所示：</p><p><img src="../../images/mysql/3/3-22.png" alt="3-22"></p><p>由上表可见： </p><ul><li>对MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；</li><li>对MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作；</li><li>简而言之，就是读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。</li></ul><p>此外，MyISAM 的读写锁调度是写优先，这也是MyISAM不适合做写为主的表的存储引擎的原因。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p><p>MyISAM 是适合读表的存储引擎</p><h3 id="5-4-5-查看锁的争用情况"><a href="#5-4-5-查看锁的争用情况" class="headerlink" title="5.4.5 查看锁的争用情况"></a>5.4.5 查看锁的争用情况</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> <span class="keyword">tables</span>；</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-23.png" alt="3-23"></p><ul><li>In_user : 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。</li><li>Name_locked：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &#39;Table_locks%&#39;;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-24.png" alt="3-24"></p><ul><li>Table_locks_immediate ： 指的是能够立即获得表级锁的次数，每立即获取锁，值加1。</li><li>Table_locks_waited ： 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。</li></ul><h2 id="5-5-InnoDB-行锁"><a href="#5-5-InnoDB-行锁" class="headerlink" title="5.5 InnoDB 行锁"></a>5.5 InnoDB 行锁</h2><h3 id="5-5-1-行锁介绍"><a href="#5-5-1-行锁介绍" class="headerlink" title="5.5.1 行锁介绍"></a>5.5.1 行锁介绍</h3><ul><li>行锁特点 ：偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</li><li>InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是 采用了行级锁。</li></ul><h3 id="5-5-2-背景知识"><a href="#5-5-2-背景知识" class="headerlink" title="5.5.2 背景知识"></a>5.5.2 背景知识</h3><h3 id="事务及其ACID属性"><a href="#事务及其ACID属性" class="headerlink" title="事务及其ACID属性"></a>事务及其ACID属性</h3><ul><li>事务是由一组SQL语句组成的逻辑处理单元。</li><li>事务具有以下4个特性，简称为事务ACID属性。</li></ul><table><thead><tr><th>ACID属性</th><th>含义</th></tr></thead><tbody><tr><td>原子性（Atomicity）</td><td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败。</td></tr><tr><td>一致性（Consistent）</td><td>在事务开始和完成时，数据都必须保持一致状态。</td></tr><tr><td>隔离性（Isolation）</td><td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境下运行。</td></tr><tr><td>持久性（Durable）</td><td>事务完成之后，对于数据的修改是永久的。</td></tr></tbody></table><h3 id="并发事务处理带来的问题"><a href="#并发事务处理带来的问题" class="headerlink" title="并发事务处理带来的问题"></a>并发事务处理带来的问题</h3><table><thead><tr><th>问题</th><th>含义</th></tr></thead><tbody><tr><td>丢失更新（Lost Update）</td><td>当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖。</td></tr><tr><td>脏读（Dirty Reads）</td><td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td></tr><tr><td>不可重复读（Non-Repeatable Reads）</td><td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前读出的数据不一致。</td></tr><tr><td>幻读（Phantom Reads）</td><td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。</td></tr></tbody></table><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><ul><li>为了解决上述提到的事务并发问题，数据库提供一定的事务隔离机制来解决这个问题。</li><li>数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大，因为事务隔离实质上就是使用事务在一定程度上“串行化” 进行，这显然与“并发” 是矛盾的。 </li><li>数据库的隔离级别有4个，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable，这四个级别可以逐个解决脏写、脏读、不可重复读、幻读这几类问题。</li></ul><table><thead><tr><th>隔离级别</th><th>丢失更新</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable read（默认）</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>备注 ： √  代表可能出现 ， × 代表不会出现 。</p><p>Mysql 的数据库的默认隔离级别为 Repeatable read ， 查看方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;tx_isolation&#39;;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-25.png" alt="3-25"></p><h3 id="5-5-3-InnoDB-的行锁模式"><a href="#5-5-3-InnoDB-的行锁模式" class="headerlink" title="5.5.3 InnoDB 的行锁模式"></a>5.5.3 InnoDB 的行锁模式</h3><p>InnoDB  实现了以下两种类型的行锁。</p><ul><li>共享锁（S）：又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</li><li>排他锁（X）：又称为写锁，简称X锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</li><li>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；</li><li>对于普通SELECT语句，InnoDB不会加任何锁；</li></ul><h3 id="可以通过以下语句显示给记录集加共享锁或排他锁-。"><a href="#可以通过以下语句显示给记录集加共享锁或排他锁-。" class="headerlink" title="可以通过以下语句显示给记录集加共享锁或排他锁 。"></a>可以通过以下语句显示给记录集加共享锁或排他锁 。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">共享锁（S）：<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ... <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span></span><br><span class="line"></span><br><span class="line">排他锁（X) ：<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span></span><br></pre></td></tr></table></figure><h3 id="5-5-4-案例准备工作"><a href="#5-5-4-案例准备工作" class="headerlink" title="5.5.4 案例准备工作"></a>5.5.4 案例准备工作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_innodb_lock(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">16</span>),</span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">1</span>)</span><br><span class="line">)<span class="keyword">engine</span> = <span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'100'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'3'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'400'</span>,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'500'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">'600'</span>,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'700'</span>,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'800'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'900'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'200'</span>,<span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test_innodb_lock_id <span class="keyword">on</span> test_innodb_lock(<span class="keyword">id</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test_innodb_lock_name <span class="keyword">on</span> test_innodb_lock(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><h3 id="5-5-5-行锁基本演示3-27"><a href="#5-5-5-行锁基本演示3-27" class="headerlink" title="5.5.5 行锁基本演示3-27"></a>5.5.5 行锁基本演示3-27</h3><ol><li>客户端1：关闭自动提交功能</li></ol><p><img src="../../images/mysql/3/3-4.png" alt="3-4"></p><ol start="2"><li>客户端2：关闭自动提交功能</li></ol><p><img src="../../images/mysql/3/3-26.png" alt="3-26"></p><ol start="3"><li>客户端1：可以正常的查询出全部的数据</li></ol><p><img src="../../images/mysql/3/3-27.png" alt="3-27"></p><ol start="4"><li>客户端2：可以正常的查询出全部的数据</li></ol><p><img src="../../images/mysql/3/3-28.png" alt="3-28"></p><ol start="5"><li>客户端1：查询id 为3的数据 ；</li></ol><p><img src="../../images/mysql/3/3-30.png" alt="3-30"></p><ol start="6"><li>客户端2：获取id为3的数据 ；</li></ol><p><img src="../../images/mysql/3/3-31.png" alt="3-31"></p><ol start="7"><li>客户端1：更新id为3的数据，但是不提交；</li></ol><p><img src="../../images/mysql/3/3-32.png" alt="3-32"></p><ol start="8"><li>客户端2：更新id为3 的数据， 出于等待状态</li></ol><p><img src="../../images/mysql/3/3-33.png" alt="3-33"></p><ol start="9"><li>客户端1：通过commit， 提交事务</li></ol><p><img src="../../images/mysql/3/3-34.png" alt="3-34"></p><ol start="10"><li>客户端1：解除阻塞，更新正常进行</li></ol><p><img src="../../images/mysql/3/3-35.png" alt="3-35"></p><p>操作的都是同一行的数据，接下来，演示不同行的数据 ：</p><ol start="11"><li>客户端1：更新id为3数据，正常的获取到行锁 ， 执行更新 ；</li></ol><p><img src="../../images/mysql/3/3-36.png" alt="3-36"></p><ol start="12"><li>客户端2：由于与Session-1 操作不是同一行，获取当前行锁，执行更新；</li></ol><p><img src="../../images/mysql/3/3-37.png" alt="3-37"></p><h3 id="5-5-6-无索引行锁升级为表锁"><a href="#5-5-6-无索引行锁升级为表锁" class="headerlink" title="5.5.6 无索引行锁升级为表锁"></a>5.5.6 无索引行锁升级为表锁</h3><ul><li>如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，实际效果跟表锁一样。</li><li>查看当前表的索引 ： show  index  from test_innodb_lock ;</li></ul><p><img src="../../images/mysql/3/3-38.png" alt="3-38"></p><ol><li>客户端1：关闭事务的自动提交</li></ol><p><img src="../../images/mysql/3/3-39.png" alt="3-39"></p><ol start="2"><li>客户端2：关闭事务的自动提交</li></ol><p><img src="../../images/mysql/3/3-40.png" alt="3-40"></p><ol start="3"><li>客户端1：执行更新语句</li></ol><p><img src="../../images/mysql/3/3-41.png" alt="3-41"></p><ol start="4"><li>客户端2：执行更新语句， 但处于阻塞状态</li></ol><p><img src="../../images/mysql/3/3-42.png" alt="3-42"></p><ol start="5"><li>客户端1：提交事务</li></ol><p><img src="../../images/mysql/3/3-43.png" alt="3-43"></p><ol start="6"><li>客户端2：解除阻塞，执行更新成功</li></ol><p><img src="../../images/mysql/3/3-44.png" alt="3-44"></p><ol start="7"><li>客户端2：执行提交操作 </li></ol><p><img src="../../images/mysql/3/3-45.png" alt="3-45"></p><ul><li>由于 执行更新时 ， name字段本来为varchar类型， 我们是作为数组类型使用，存在类型转换，索引失效，最终行锁变为表锁 ；</li><li>没加单引号，索引失效</li></ul><h3 id="5-5-7-间隙锁危害"><a href="#5-5-7-间隙锁危害" class="headerlink" title="5.5.7 间隙锁危害"></a>5.5.7 间隙锁危害</h3><ul><li>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； </li><li>对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁） 。</li></ul><p>示例 ： </p><ol><li>客户端1：关闭事务自动提交</li></ol><p><img src="../../images/mysql/3/3-46.png" alt="3-46"></p><ol start="2"><li>客户端2：关闭事务自动提交</li></ol><p><img src="../../images/mysql/3/3-47.png" alt="3-47"></p><ol start="3"><li>客户端1：根据<strong>id范围</strong>更新数据</li></ol><p><img src="../../images/mysql/3/3-48.png" alt="3-48"></p><ol start="4"><li>客户端2：插入id为2的记录， 出于阻塞状态</li></ol><p><img src="../../images/mysql/3/3-49.png" alt="3-49"></p><ol start="5"><li>客户端1：提交事务</li></ol><p><img src="../../images/mysql/3/3-50.png" alt="3-50"></p><ol start="6"><li>客户端2：解除阻塞 ， 执行插入操作 </li></ol><p><img src="../../images/mysql/3/3-51.png" alt="3-51"></p><ol start="7"><li>客户端2：提交事务 </li></ol><p>例子:</p><p><img src="../../images/mysql/3/3-5.png" alt="3-5"></p><h3 id="5-5-8-InnoDB-行锁争用情况"><a href="#5-5-8-InnoDB-行锁争用情况" class="headerlink" title="5.5.8 InnoDB 行锁争用情况"></a>5.5.8 InnoDB 行锁争用情况</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span>  <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'innodb_row_lock%'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/3/3-52.png" alt="3-52"></p><ul><li>Innodb_row_lock_current_waits: 当前正在等待锁定的数量</li><li>Innodb_row_lock_time: 从系统启动到现在锁定总时间长度</li><li>Innodb_row_lock_time_avg: 每次等待所花平均时长</li><li>Innodb_row_lock_time_max: 从系统启动到现在等待最长的一次所花的时间</li><li>Innodb_row_lock_waits: 系统启动后到现在总共等待的次数</li></ul><p>当等待的次数很高，而且每次等待的时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</p><h3 id="5-5-9-总结"><a href="#5-5-9-总结" class="headerlink" title="5.5.9 总结"></a>5.5.9 总结</h3><ul><li>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来了性能损耗可能比表锁会更高一些，但是在整体并发处理能力方面要远远由于MyISAM的表锁的。</li><li>当系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势。</li><li>但是，InnoDB的行级锁同样也有其脆弱的一面，当我们使用不当的时候，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</li></ul><p>优化建议：</p><ul><li>尽可能让所有数据检索都能通过索引来完成，避免无索引行锁升级为表锁。</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能减少索引条件，及索引范围，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可使用低级别事务隔离（但是需要业务层面满足需求）</li></ul><h1 id="6-常用SQL技巧"><a href="#6-常用SQL技巧" class="headerlink" title="6. 常用SQL技巧"></a>6. 常用SQL技巧</h1><h2 id="6-1-SQL执行顺序"><a href="#6-1-SQL执行顺序" class="headerlink" title="6.1 SQL执行顺序"></a>6.1 SQL执行顺序</h2><p>编写顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">&lt;<span class="keyword">select</span> <span class="keyword">list</span>&gt;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">&lt;left_table&gt; &lt;join_type&gt;</span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line">&lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">&lt;where_condition&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">&lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">&lt;having_condition&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">&lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span></span><br><span class="line">&lt;limit_params&gt;</span><br></pre></td></tr></table></figure><p>执行顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FROM&lt;left_table&gt;</span><br><span class="line"></span><br><span class="line">ON &lt;join_condition&gt;</span><br><span class="line"></span><br><span class="line">&lt;join_type&gt;JOIN&lt;right_table&gt;</span><br><span class="line"></span><br><span class="line">WHERE&lt;where_condition&gt;</span><br><span class="line"></span><br><span class="line">GROUP BY &lt;group_by_list&gt;</span><br><span class="line"></span><br><span class="line">HAVING&lt;having_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>&lt;<span class="keyword">select</span> <span class="keyword">list</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>&lt;order_by_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">LIMIT</span>&lt;limit_params&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-正则表达式使用"><a href="#6-2-正则表达式使用" class="headerlink" title="6.2 正则表达式使用"></a>6.2 正则表达式使用</h2><p>正则表达式（Regular Expression）是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>在字符串开始处进行匹配</td></tr><tr><td>$</td><td>在字符串末尾处进行匹配</td></tr><tr><td>.</td><td>匹配任意单个字符, 包括换行符</td></tr><tr><td>[…]</td><td>匹配出括号内的任意字符</td></tr><tr><td>[^…]</td><td>匹配不出括号内的任意字符</td></tr><tr><td>a*</td><td>匹配零个或者多个a(包括空串)</td></tr><tr><td>a+</td><td>匹配一个或者多个a(不包括空串)</td></tr><tr><td>a?</td><td>匹配零个或者一个a</td></tr><tr><td>a1|a2</td><td>匹配a1或a2</td></tr><tr><td>a(m)</td><td>匹配m个a</td></tr><tr><td>a(m,)</td><td>至少匹配m个a</td></tr><tr><td>a(m,n)</td><td>匹配m个a 到 n个a</td></tr><tr><td>a(,n)</td><td>匹配0到n个a</td></tr><tr><td>(…)</td><td>将模式元素组成单一元素</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'^T'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'2$'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'[uvw]'</span>;</span><br></pre></td></tr></table></figure><h2 id="6-3-MySQL-常用函数"><a href="#6-3-MySQL-常用函数" class="headerlink" title="6.3 MySQL 常用函数"></a>6.3 MySQL 常用函数</h2><p>数字函数</p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>ABS</td><td>求绝对值</td></tr><tr><td>SQRT</td><td>求二次方根</td></tr><tr><td>MOD</td><td>求余数</td></tr><tr><td>CEIL 和 CEILING</td><td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td></tr><tr><td>FLOOR</td><td>向下取整，返回值转化为一个BIGINT</td></tr><tr><td>RAND</td><td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td></tr><tr><td>ROUND</td><td>对所传参数进行四舍五入</td></tr><tr><td>SIGN</td><td>返回参数的符号</td></tr><tr><td>POW 和 POWER</td><td>两个函数的功能相同，都是所传参数的次方的结果值</td></tr><tr><td>SIN</td><td>求正弦值</td></tr><tr><td>ASIN</td><td>求反正弦值，与函数 SIN 互为反函数</td></tr><tr><td>COS</td><td>求余弦值</td></tr><tr><td>ACOS</td><td>求反余弦值，与函数 COS 互为反函数</td></tr><tr><td>TAN</td><td>求正切值</td></tr><tr><td>ATAN</td><td>求反正切值，与函数 TAN 互为反函数</td></tr><tr><td>COT</td><td>求余切值</td></tr></tbody></table><p>字符串函数</p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>LENGTH</td><td>计算字符串长度函数，返回字符串的字节长度</td></tr><tr><td>CONCAT</td><td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td></tr><tr><td>INSERT</td><td>替换字符串函数</td></tr><tr><td>LOWER</td><td>将字符串中的字母转换为小写</td></tr><tr><td>UPPER</td><td>将字符串中的字母转换为大写</td></tr><tr><td>LEFT</td><td>从左侧字截取符串，返回字符串左边的若干个字符</td></tr><tr><td>RIGHT</td><td>从右侧字截取符串，返回字符串右边的若干个字符</td></tr><tr><td>TRIM</td><td>删除字符串左右两侧的空格</td></tr><tr><td>REPLACE</td><td>字符串替换函数，返回替换后的新字符串</td></tr><tr><td>SUBSTRING</td><td>截取字符串，返回从指定位置开始的指定长度的字符换</td></tr><tr><td>REVERSE</td><td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td></tr></tbody></table><p><img src="../../images/mysql/3/3-6.png" alt="3-6"></p><p>日期函数</p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>CURDATE 和 CURRENT_DATE</td><td>两个函数作用相同，返回当前系统的日期值</td></tr><tr><td>CURTIME 和 CURRENT_TIME</td><td>两个函数作用相同，返回当前系统的时间值</td></tr><tr><td>NOW 和  SYSDATE</td><td>两个函数作用相同，返回当前系统的日期和时间值</td></tr><tr><td>MONTH</td><td>获取指定日期中的月份</td></tr><tr><td>MONTHNAME</td><td>获取指定日期中的月份英文名称</td></tr><tr><td>DAYNAME</td><td>获取指定曰期对应的星期几的英文名称</td></tr><tr><td>DAYOFWEEK</td><td>获取指定日期对应的一周的索引位置值</td></tr><tr><td>WEEK</td><td>获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td></tr><tr><td>DAYOFYEAR</td><td>获取指定曰期是一年中的第几天，返回值范围是1~366</td></tr><tr><td>DAYOFMONTH</td><td>获取指定日期是一个月中是第几天，返回值范围是1~31</td></tr><tr><td>YEAR</td><td>获取年份，返回值范围是 1970〜2069</td></tr><tr><td>TIME_TO_SEC</td><td>将时间参数转换为秒数</td></tr><tr><td>SEC_TO_TIME</td><td>将秒数转换为时间，与TIME_TO_SEC 互为反函数</td></tr><tr><td>DATE_ADD 和 ADDDATE</td><td>两个函数功能相同，都是向日期添加指定的时间间隔</td></tr><tr><td>DATE_SUB 和 SUBDATE</td><td>两个函数功能相同，都是向日期减去指定的时间间隔</td></tr><tr><td>ADDTIME</td><td>时间加法运算，在原始时间上添加指定的时间</td></tr><tr><td>SUBTIME</td><td>时间减法运算，在原始时间上减去指定的时间</td></tr><tr><td>DATEDIFF</td><td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td></tr><tr><td>DATE_FORMAT</td><td>格式化指定的日期，根据参数返回指定格式的值</td></tr><tr><td>WEEKDAY</td><td>获取指定日期在一周内的对应的工作日索引</td></tr></tbody></table><p>聚合函数</p><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>MAX</td><td>查询指定列的最大值</td></tr><tr><td>MIN</td><td>查询指定列的最小值</td></tr><tr><td>COUNT</td><td>统计查询结果的行数</td></tr><tr><td>SUM</td><td>求和，返回指定列的总和</td></tr><tr><td>AVG</td><td>求平均值，返回指定列数据的平均值</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql-应用优化-查询缓存优化-内存管理及优化-并发参数调整-锁-常用sql&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://linhuide.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://linhuide.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Rides再次学习3</title>
    <link href="https://linhuide.github.io/post/b9ffcd34.html"/>
    <id>https://linhuide.github.io/post/b9ffcd34.html</id>
    <published>2020-04-11T08:14:47.000Z</published>
    <updated>2020-04-21T11:47:19.903Z</updated>
    
    <content type="html"><![CDATA[<p>rides的学习与使用</p><a id="more"></a><h1 id="1-Redis-持久化"><a href="#1-Redis-持久化" class="headerlink" title="1.Redis 持久化"></a>1.Redis 持久化</h1><h2 id="1-1-持久化简介"><a href="#1-1-持久化简介" class="headerlink" title="1-1.持久化简介"></a>1-1.持久化简介</h2><ul><li><p>什么是持久化</p><ul><li>利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化。</li></ul></li><li><p>为什么要进行持久化</p><ul><li>防止数据的意外丢失，确保数据安全性</li></ul></li><li><p>持久化过程保存什么</p><ul><li>将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据</li><li>将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程</li></ul></li></ul><p><img src="../../images/rides/3/3-4.png" alt="3-4"></p><h2 id="1-2-RDB"><a href="#1-2-RDB" class="headerlink" title="1-2.RDB"></a>1-2.RDB</h2><h3 id="1-RDB启动方式-——-save指令"><a href="#1-RDB启动方式-——-save指令" class="headerlink" title="1.RDB启动方式 —— save指令"></a>1.RDB启动方式 —— save指令</h3><p>作用：手动执行一次保存操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">save</span><br><span class="line">在data中可以看到，多了dump.rdb</span><br><span class="line">[root@localhost data]<span class="meta"># ll</span></span><br><span class="line">总用量 <span class="number">16</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">6231</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">20</span>:<span class="number">43</span> <span class="number">6379.l</span>og</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">6730</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">16</span>:<span class="number">54</span> <span class="number">6380.l</span>og</span><br><span class="line">[root@localhost data]<span class="meta"># ll</span></span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">6282</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">20</span>:<span class="number">44</span> <span class="number">6379.l</span>og</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">6730</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">16</span>:<span class="number">54</span> <span class="number">6380.l</span>og</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root  <span class="number">106</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">20</span>:<span class="number">44</span> dump.rdb</span><br></pre></td></tr></table></figure><h3 id="2-save指令相关配置"><a href="#2-save指令相关配置" class="headerlink" title="2.save指令相关配置"></a>2.save指令相关配置</h3><ul><li>dbfilename dump.rdb <ul><li>说明：设置本地数据库文件名，默认值为 dump.rdb</li><li>经验：通常设置为dump-端口号.rdb</li></ul></li><li>dir <ul><li>说明：设置存储.rdb文件的路径</li><li>经验：通常设置成存储空间较大的目录中，目录名称data</li></ul></li><li>rdbcompression yes <ul><li>说明：设置存储至本地数据库时是否压缩数据，默认为 yes，采用 LZF 压缩</li><li>经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大）</li></ul></li><li>rdbchecksum yes <ul><li>说明：设置是否进行RDB文件格式校验，该校验过程在写文件和读文件过程均进行</li><li>经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险</li></ul></li><li>stop-writes-on-bgsave-error yes <ul><li>说明：后台存储过程中如果出现错误现象，是否停止保存操作</li><li>经验：通常默认为开启状态</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在conf里改</span><br><span class="line">cd conf</span><br><span class="line">vim redis<span class="number">-6379.</span>conf</span><br><span class="line"></span><br><span class="line">port <span class="number">6379</span></span><br><span class="line">daemonize yes</span><br><span class="line">logfile <span class="string">"6379.log"</span></span><br><span class="line">dir /root/redis<span class="number">-5.0</span><span class="number">.8</span>/data</span><br><span class="line">dbfilename dump<span class="number">-6379.</span>rdb</span><br><span class="line">rdbcompression yes </span><br><span class="line">rdbchecksum yes</span><br><span class="line">当使用了save后</span><br><span class="line">cd data</span><br><span class="line">rm -rf dump.rdb</span><br></pre></td></tr></table></figure><h3 id="3-save指令工作原理"><a href="#3-save指令工作原理" class="headerlink" title="3.save指令工作原理"></a>3.save指令工作原理</h3><p><img src="../../images/rides/3/3-5.png" alt="3-5"></p><p><img src="../../images/rides/3/3-6.png" alt="3-6"></p><p><strong>注意：</strong></p><ul><li>save指令的执行会阻塞当前Redis服务器，直到当前RDB过程完成为止，有可能会造成长时间阻塞，线上环境不建议使用。</li></ul><h3 id="数据量过大，单线程执行方式造成效率过低如何处理？"><a href="#数据量过大，单线程执行方式造成效率过低如何处理？" class="headerlink" title="数据量过大，单线程执行方式造成效率过低如何处理？"></a>数据量过大，单线程执行方式造成效率过低如何处理？</h3><ul><li><p>后台执行</p><ul><li>redis操作者（用户）发起指令；redis服务器控制指令执行</li><li>即时（发起）；合理的时间（执行）</li><li>保存数据</li></ul></li><li><p>bgsave指令：手动启动后台保存操作，但不是立即执行</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bgsave</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; save</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name name</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; bgsave</span><br><span class="line">Background saving started</span><br><span class="line"></span><br><span class="line">[root@localhost redis<span class="number">-5.0</span><span class="number">.8</span>]<span class="meta"># cd data</span></span><br><span class="line">[root@localhost data]<span class="meta"># ll</span></span><br><span class="line">总用量 <span class="number">24</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">9416</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">21</span>:<span class="number">06</span> <span class="number">6379.l</span>og</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">6730</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">16</span>:<span class="number">54</span> <span class="number">6380.l</span>og</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root  <span class="number">117</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">21</span>:<span class="number">06</span> dump<span class="number">-6379.</span>rdb</span><br><span class="line">[root@localhost data]<span class="meta"># ll</span></span><br><span class="line">总用量 <span class="number">24</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">9691</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">21</span>:<span class="number">06</span> <span class="number">6379.l</span>og</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">6730</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">16</span>:<span class="number">54</span> <span class="number">6380.l</span>og</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root  <span class="number">130</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">21</span>:<span class="number">06</span> dump<span class="number">-6379.</span>rdb</span><br></pre></td></tr></table></figure><h3 id="4-bgsave指令工作原理"><a href="#4-bgsave指令工作原理" class="headerlink" title="4.bgsave指令工作原理"></a>4.bgsave指令工作原理</h3><p><img src="../../images/rides/3/3-7.png" alt="3-7"></p><p><strong>注意：</strong> </p><ul><li>bgsave命令是针对save阻塞问题做的优化。</li><li>Redis内部所有涉及到RDB操作都采用bgsave的方式，save命令可以放弃使用。</li></ul><h3 id="5-反复执行保存指令，忘记了怎么办？不知道数据产生了多少变化，何时保存？"><a href="#5-反复执行保存指令，忘记了怎么办？不知道数据产生了多少变化，何时保存？" class="headerlink" title="5.反复执行保存指令，忘记了怎么办？不知道数据产生了多少变化，何时保存？"></a>5.反复执行保存指令，忘记了怎么办？不知道数据产生了多少变化，何时保存？</h3><ul><li><p>自动执行</p><ul><li>谁：redis服务器发起指令（基于条件）</li><li>什么时间：满足条件</li><li>干什么事情：保存数据</li></ul></li><li><p>save配置</p></li><li><p>作用：</p><ul><li>满足限定时间范围内key的变化数量达到指定数量即进行持久化</li></ul></li><li><p>参数</p><ul><li>second：监控时间范围</li><li>changes：监控key的变化量</li></ul></li><li><p>位置</p><ul><li>在conf文件中进行配置</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p><img src="../../images/rides/3/3-8.png" alt="3-8"></p><ul><li>原理</li></ul><p><img src="../../images/rides/3/3-9.png" alt="3-9"></p><p><strong>注意：</strong></p><ul><li>save配置要根据实际业务情况进行设置，频度过高或过低都会出现性能问题，结果可能是灾难性的</li><li>save配置中对于second与changes设置通常具有互补对应关系，尽量不要设置成包含性关系</li><li>save配置启动后执行的是bgsave操作</li></ul><h3 id="6-RDB两种启动方式对比"><a href="#6-RDB两种启动方式对比" class="headerlink" title="6.RDB两种启动方式对比"></a>6.RDB两种启动方式对比</h3><p><img src="../../images/rides/3/3-10.png" alt="3-10"></p><h3 id="7-rdb特殊启动形式"><a href="#7-rdb特殊启动形式" class="headerlink" title="7.rdb特殊启动形式"></a>7.rdb特殊启动形式</h3><ul><li>全量复制<ul><li>在主从复制中详细讲解</li></ul></li><li>服务器运行过程中重启</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug reload</span><br></pre></td></tr></table></figure><ul><li>关闭服务器时指定保存数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown save</span><br></pre></td></tr></table></figure><ul><li>默认情况下执行shutdown命令时，自动执行bgsave(如果没有开启AOF持久化功能)</li></ul><h3 id="8-优点和缺点"><a href="#8-优点和缺点" class="headerlink" title="8.优点和缺点"></a>8.优点和缺点</h3><ul><li>RDB优点<ul><li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li><li>RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li><li>RDB恢复数据的速度要比AOF快很多</li><li>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</li></ul></li><li>Rdb缺点<ul><li>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</li><li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</li><li>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li></ul></li></ul><h1 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h1><h2 id="2-1-RDB存储的弊端"><a href="#2-1-RDB存储的弊端" class="headerlink" title="2-1.RDB存储的弊端"></a>2-1.RDB存储的弊端</h2><ul><li>存储数据量较大，效率较低</li><li>基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低</li><li>大数据量下的IO性能较低</li><li>基于fork创建子进程，内存产生额外消耗</li><li>宕机带来的数据丢失风险</li></ul><p><strong>解决思路</strong></p><ul><li>不写全数据，仅记录部分数据</li><li>降低区分数据是否改变的难度，改记录数据为记录操作过程</li><li>对所有操作均进行记录，排除丢失数据的风险</li></ul><h2 id="2-2-AOF概念"><a href="#2-2-AOF概念" class="headerlink" title="2-2.AOF概念"></a>2-2.AOF概念</h2><ul><li>AOF(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的。与RDB相比可以简单描述为改记录数据为记录数据产生的过程</li><li>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</li></ul><h2 id="2-3-AOF写数据过程"><a href="#2-3-AOF写数据过程" class="headerlink" title="2.3.AOF写数据过程"></a>2.3.AOF写数据过程</h2><p><img src="../../images/rides/3/3-11.png" alt="3-11"></p><h2 id="2-4-AOF写数据三种策略-appendfsync"><a href="#2-4-AOF写数据三种策略-appendfsync" class="headerlink" title="2.4.AOF写数据三种策略(appendfsync)"></a>2.4.AOF写数据三种策略(appendfsync)</h2><ul><li>always(每次）<ul><li>每次写入操作均同步到AOF文件中，数据零误差，性能较低，不建议使用。</li></ul></li><li>everysec（每秒）<ul><li>每秒将缓冲区中的指令同步到AOF文件中，数据准确性较高，性能较高，建议使用，也是默认配置</li><li>在系统突然宕机的情况下丢失1秒内的数据</li></ul></li><li>no（系统控制）<ul><li>由操作系统控制每次同步到AOF文件的周期，整体过程不可控</li></ul></li></ul><h2 id="2-5-AOF功能开启"><a href="#2-5-AOF功能开启" class="headerlink" title="2.5.AOF功能开启"></a>2.5.AOF功能开启</h2><ul><li>配置：appendonly yes|no</li><li>作用：是否开启AOF持久化功能，默认为不开启状态</li><li>配置：appendfsync always|everysec|no</li><li>作用：AOF写数据策略</li><li>配置：appendfilename filename</li><li>作用：AOF持久化文件名，默认文件名未appendonly.aof，建议配置为appendonly-端口号.aof</li><li>配置：dir</li><li>作用：AOF持久化文件保存路径，与RDB持久化文件保持一致即可</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd redis<span class="number">-5.0</span><span class="number">.8</span></span><br><span class="line">cd conf</span><br><span class="line">vim redis<span class="number">-6379.</span>conf</span><br><span class="line"></span><br><span class="line">最后加</span><br><span class="line">appendonly yes</span><br><span class="line">appendfsync always</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">redis-server redis<span class="number">-6379.</span>conf</span><br><span class="line">cd ..</span><br><span class="line">cd data</span><br><span class="line">[root@localhost data]<span class="meta"># ll</span></span><br><span class="line">总用量 <span class="number">28</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">13023</span> <span class="number">4</span>月  <span class="number">21</span> <span class="number">16</span>:<span class="number">09</span> <span class="number">6379.l</span>og</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root  <span class="number">6730</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">16</span>:<span class="number">54</span> <span class="number">6380.l</span>og</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root     <span class="number">0</span> <span class="number">4</span>月  <span class="number">21</span> <span class="number">16</span>:<span class="number">09</span> appendonly.aof</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root   <span class="number">130</span> <span class="number">4</span>月  <span class="number">11</span> <span class="number">21</span>:<span class="number">06</span> dump<span class="number">-6379.</span>rdb</span><br></pre></td></tr></table></figure><h2 id="2-6-AOF写数据遇到的问题"><a href="#2-6-AOF写数据遇到的问题" class="headerlink" title="2.6.AOF写数据遇到的问题"></a>2.6.AOF写数据遇到的问题</h2><h3 id="如果连续执行如下指令该如何处理"><a href="#如果连续执行如下指令该如何处理" class="headerlink" title="如果连续执行如下指令该如何处理?"></a>如果连续执行如下指令该如何处理?</h3><p><img src="../../images/rides/3/3-12.png" alt="3-12"></p><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><ul><li>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。</li><li>AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。</li><li>简单说就是将对同一个数据的若干个条命令执行结果转化成最终结果数据对应的指令进行记录。</li><li>作用：<ul><li>降低磁盘占用量，提高磁盘利用率</li><li>提高持久化效率，降低持久化写时间，提高IO性能</li><li>降低数据恢复用时，提高数据恢复效率</li></ul></li></ul><h3 id="AOF重写规则"><a href="#AOF重写规则" class="headerlink" title="AOF重写规则"></a>AOF重写规则</h3><ul><li>进程内已超时的数据不再写入文件</li><li>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令<ul><li>如del key1、 hdel key2、srem key3、set key4 111、set key4 222等</li></ul></li><li>对同一数据的多条写命令合并为一条命令<ul><li>如lpush list1 a、lpush list1 b、 lpush list1 c 可以转化为：lpush list1 a b c。</li><li>为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素</li></ul></li></ul><h3 id="AOF重写方式"><a href="#AOF重写方式" class="headerlink" title="AOF重写方式"></a>AOF重写方式</h3><h4 id="1-手动重写：bgrewriteaof"><a href="#1-手动重写：bgrewriteaof" class="headerlink" title="1.手动重写：bgrewriteaof"></a>1.手动重写：bgrewriteaof</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vim redis<span class="number">-6379.</span>conf</span><br><span class="line"></span><br><span class="line">最后加</span><br><span class="line">appendonly yes</span><br><span class="line">appendfsync always</span><br><span class="line">appendfilename appendonly<span class="number">-6379.</span>aof</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">redis-server redis<span class="number">-6379.</span>conf</span><br><span class="line">ps -ef | grep redis-</span><br><span class="line">cd data </span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line">客户端<span class="number">2</span>：</span><br><span class="line">redis-cli</span><br><span class="line"><span class="built_in">set</span> naem <span class="number">123</span></span><br><span class="line"><span class="built_in">set</span> naem <span class="number">234</span></span><br><span class="line"><span class="built_in">set</span> naem <span class="number">345</span></span><br><span class="line">客户端<span class="number">1</span>：appendonly<span class="number">-6379.</span>aof  有三个的记录</span><br><span class="line">bgrewriteaof</span><br><span class="line">客户端<span class="number">1</span>：appendonly<span class="number">-6379.</span>aof  只剩<span class="number">1</span>个的记录</span><br></pre></td></tr></table></figure><ul><li>RDB启动方式 —— bgsave指令工作原理</li><li>AOF手动重写 —— bgrewriteaof指令工作原理</li></ul><p><img src="../../images/rides/3/3-13.png" alt="3-13"></p><h4 id="2-自动重写"><a href="#2-自动重写" class="headerlink" title="2.自动重写"></a>2.自动重写</h4><ul><li>自动重写触发条件设置</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span>-aof-rewrite-<span class="built_in">min</span>-<span class="built_in">size</span> <span class="built_in">size</span></span><br><span class="line"><span class="keyword">auto</span>-aof-rewrite-percentage percent</span><br></pre></td></tr></table></figure><ul><li>自动重写触发比对参数（ 运行指令info Persistence获取具体信息 ）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aof_current_size</span><br><span class="line">aof_base_size</span><br></pre></td></tr></table></figure><ul><li>自动重写触发条件</li></ul><p><img src="../../images/rides/3/3-14.png" alt="3-14"></p><h2 id="2-7-AOF工作流程"><a href="#2-7-AOF工作流程" class="headerlink" title="2.7.AOF工作流程"></a>2.7.AOF工作流程</h2><p><img src="../../images/rides/3/3-15.png" alt="3-15"></p><h2 id="2-8-AOF重写流程"><a href="#2-8-AOF重写流程" class="headerlink" title="2.8.AOF重写流程"></a>2.8.AOF重写流程</h2><p><img src="../../images/rides/3/3-16.png" alt="3-16"></p><h3 id="AOF缓冲区同步文件策略，由参数appendfsync控制"><a href="#AOF缓冲区同步文件策略，由参数appendfsync控制" class="headerlink" title="AOF缓冲区同步文件策略，由参数appendfsync控制"></a>AOF缓冲区同步文件策略，由参数appendfsync控制</h3><ul><li>系统调用write和fsync说明：</li><li>write操作会触发延迟写（delayed write）机制，Linux在内核提供页缓冲区用来提高硬盘IO性能。write操作在写入系统缓冲区后直接返回。同步硬盘操作依赖于系统调度机制，列如：缓冲区页空间写满或达到特定时间周期。同步文件之前，如果此时系统故障宕机，缓冲区内数据将丢失。</li><li>fsync针对单个文件操作（比如AOF文件），做强制硬盘同步，fsync将阻塞知道写入硬盘完成后返回，保证了数据持久化。</li><li>除了write、fsync、Linx还提供了sync、fdatasync操作，具体API说明</li></ul><h1 id="3-RDB与AOF区别"><a href="#3-RDB与AOF区别" class="headerlink" title="3.RDB与AOF区别"></a>3.RDB与AOF区别</h1><p><img src="../../images/rides/3/3-17.png" alt="3-17"></p><ul><li>对数据非常敏感，建议使用默认的AOF持久化方案<ul><li>AOF持久化策略使用everysecond，每秒钟fsync一次。该策略redis仍可以保持很好的处理性能，当出现问题时，最多丢失0-1秒内的数据。</li><li>注意：由于AOF文件存储体积较大，且恢复速度较慢</li></ul></li><li>数据呈现阶段有效性，建议使用RDB持久化方案<ul><li>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段点数据恢复通常采用RDB方案</li><li>注意：利用RDB实现紧凑的数据持久化会使Redis降的很低，慎重总结：</li></ul></li><li>综合比对<ul><li>RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊</li><li>如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF</li><li>如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB</li><li>灾难恢复选用RDB</li><li>双保险策略，同时开启 RDB 和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量</li></ul></li></ul><h1 id="4-持久化应用场景"><a href="#4-持久化应用场景" class="headerlink" title="4.持久化应用场景"></a>4.持久化应用场景</h1><ul><li>redis 应用于抢购，限购类、限量发放优惠卷、激活码等业务的数据存储设计</li><li>redis 应用于具有操作先后顺序的数据控制</li><li>redis 应用于最新消息展示</li><li>redis 应用于基于黑名单与白名单设定的服务控制</li><li>redis 应用于计数器组合排序功能对应的排名</li></ul><h1 id="5-事务"><a href="#5-事务" class="headerlink" title="5.事务"></a>5.事务</h1><ul><li>Redis执行指令过程中，多条连续执行的指令被干扰，打断，插队</li><li>redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体（一个队列）。当执行时，一次性按照添加顺序依次执行，中间不会被打断或者干扰。</li><li>一个队列中，一次性、顺序性、排他性的执行一系列命令</li></ul><p><img src="../../images/rides/3/3-18.png" alt="3-18"></p><p><img src="../../images/rides/3/3-19.png" alt="3-19"></p><h2 id="5-1-事务的基本操作"><a href="#5-1-事务的基本操作" class="headerlink" title="5.1.事务的基本操作"></a>5.1.事务的基本操作</h2><ul><li>开启事务：multi</li><li>作用：设定事务的开启位置，此指令执行后，后续的所有指令均加入到事务中</li><li>执行事务：exec</li><li>作用：设定事务的结束位置，同时执行事务。与multi成对出现，成对使用</li><li>注意：加入事务的命令暂时进入到任务队列中，并没有立即执行，只有执行exec命令才开始执行</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">客户端<span class="number">1</span></span><br><span class="line">redis-server conf/redis<span class="number">-6379.</span>conf</span><br><span class="line">客户端<span class="number">2</span></span><br><span class="line">[root@localhost redis<span class="number">-5.0</span><span class="number">.8</span>]<span class="meta"># redis-cli</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">123</span></span><br><span class="line">OK</span><br><span class="line">客户端<span class="number">3</span></span><br><span class="line">[root@localhost ~]<span class="meta"># redis-cli</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">456</span></span><br><span class="line">OK</span><br><span class="line">客户端<span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> name</span><br><span class="line"><span class="string">"456"</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">1</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> age</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">10</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> age</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exec</span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">3</span>) OK</span><br><span class="line"><span class="number">4</span>) <span class="string">"10"</span></span><br></pre></td></tr></table></figure><h3 id="事务定义过程中发现出了问题，怎么办？"><a href="#事务定义过程中发现出了问题，怎么办？" class="headerlink" title="事务定义过程中发现出了问题，怎么办？"></a>事务定义过程中发现出了问题，怎么办？</h3><ul><li>取消事务：discard</li><li>作用：终止当前事务的定义，发生在multi之后，exec之前</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">10</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> age</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">110</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; discard</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exec</span><br><span class="line">(error) ERR EXEC without MULTI</span><br></pre></td></tr></table></figure><h2 id="5-2-事务的工作流程"><a href="#5-2-事务的工作流程" class="headerlink" title="5.2.事务的工作流程"></a>5.2.事务的工作流程</h2><h4 id="正常set"><a href="#正常set" class="headerlink" title="正常set"></a>正常set</h4><p><img src="../../images/rides/3/3-20.png" alt="3-20"></p><h4 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h4><p><img src="../../images/rides/3/3-21.png" alt="3-21"></p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p><img src="../../images/rides/3/3-22.png" alt="3-22"></p><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><p><img src="../../images/rides/3/3-23.png" alt="3-23"></p><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p><img src="../../images/rides/3/3-24.png" alt="3-24"></p><h4 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h4><p><img src="../../images/rides/3/3-25.png" alt="3-25"></p><h2 id="5-3-事务的注意事项"><a href="#5-3-事务的注意事项" class="headerlink" title="5.3.事务的注意事项"></a>5.3.事务的注意事项</h2><h3 id="定义事务的过程中，命令格式输入错误怎么办？"><a href="#定义事务的过程中，命令格式输入错误怎么办？" class="headerlink" title="定义事务的过程中，命令格式输入错误怎么办？"></a>定义事务的过程中，命令格式输入错误怎么办？</h3><ul><li>语法错误<ul><li>指命令书写格式有误</li></ul></li><li>处理结果<ul><li>如果定义的事务中所包含的命令存在语法错误，整体事务中所有命令均不会执行。包括那些语法正确的命令。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">清除数据</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; flushdb</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line">(empty <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">set</span>)</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">123</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> name</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; tes name <span class="number">456</span></span><br><span class="line">(error) ERR unknown command `tes`, with args beginning with: `name`, `<span class="number">456</span>`, </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">语法错误，全部不执行</span><br></pre></td></tr></table></figure><h4 id="定义事务的过程中，命令执行出现错误怎么办？"><a href="#定义事务的过程中，命令执行出现错误怎么办？" class="headerlink" title="定义事务的过程中，命令执行出现错误怎么办？"></a>定义事务的过程中，命令执行出现错误怎么办？</h4><ul><li><p>运行错误</p><ul><li>指命令格式正确，但是无法正确的执行。例如对list进行incr操作</li></ul></li><li><p>处理结果</p><ul><li><p>能够正确运行的命令会执行，运行错误的命令不会被执行</p></li><li><p>注意：已经执行完毕的命令对应的数据不会自动回滚，需要程序员自己在代码中实现回滚。</p></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">123</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> name</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">456</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> name</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush name a b c</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> name</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exec</span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) <span class="string">"123"</span></span><br><span class="line"><span class="number">3</span>) OK</span><br><span class="line"><span class="number">4</span>) <span class="string">"456"</span></span><br><span class="line"><span class="number">5</span>) (error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line"><span class="number">6</span>) <span class="string">"456"</span></span><br></pre></td></tr></table></figure><h2 id="5-4-手动进行事务回滚"><a href="#5-4-手动进行事务回滚" class="headerlink" title="5.4.手动进行事务回滚"></a>5.4.手动进行事务回滚</h2><ul><li>记录操作过程中被影响的数据之前的状态<ul><li>单数据：string</li><li>多数据：hash、list、set、zset</li></ul></li><li>设置指令恢复所有的被修改的项<ul><li>单数据：直接set（注意周边属性，例如时效）</li><li>多数据：修改对应值或整体克隆复制</li></ul></li></ul><h1 id="6-锁"><a href="#6-锁" class="headerlink" title="6.锁"></a>6.锁</h1><h2 id="6-1-基于特定条件的事务执行"><a href="#6-1-基于特定条件的事务执行" class="headerlink" title="6.1.基于特定条件的事务执行"></a>6.1.基于特定条件的事务执行</h2><ul><li>业务场景<ul><li>天猫双11热卖过程中，对已经售罄的货物追加补货，4个业务员都有权限进行补货。补货的操作可能是一系列的操作，牵扯到多个连续操作，如何保障不会重复操作？</li></ul></li><li>业务分析<ul><li>多个客户端有可能同时操作同一组数据，并且该数据一旦被操作修改后，将不适用于继续操作</li><li>在操作之前锁定要操作的数据，一旦发生变化，终止当前操作</li></ul></li></ul><h2 id="6-2-基于特定条件的事务执行——锁"><a href="#6-2-基于特定条件的事务执行——锁" class="headerlink" title="6.2.基于特定条件的事务执行——锁"></a>6.2.基于特定条件的事务执行——锁</h2><ul><li>对 key 添加监视锁，在执行exec前如果key发生了变化，终止事务执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch key1 [key2……]</span><br></pre></td></tr></table></figure><ul><li>取消对所有 key 的监视</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unwatch</span><br></pre></td></tr></table></figure><ul><li>redis 应用基于状态控制的批量任务执行</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">清除数据</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; flushdb</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys * </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name <span class="number">123</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> age <span class="number">321</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; watch name</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> name</span><br><span class="line"><span class="string">"123"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> aa bb</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> aa</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exec</span><br><span class="line"><span class="number">1</span>) OK</span><br><span class="line"><span class="number">2</span>) <span class="string">"bb"</span></span><br></pre></td></tr></table></figure><p>监控到有别的客户端使用name</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; watch name age</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> aa cc</span><br><span class="line">QUEUED</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> aa</span><br><span class="line">QUEUED</span><br><span class="line"></span><br><span class="line">客户端<span class="number">2</span>：<span class="built_in">set</span> name <span class="number">321</span></span><br><span class="line">    </span><br><span class="line">客户端<span class="number">1</span>：</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; exec</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>不能开启事务，监控</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; watch name</span><br><span class="line">(error) ERR WATCH inside MULTI is <span class="keyword">not</span> allowed</span><br><span class="line"></span><br><span class="line">释放锁</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; watch name</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">get</span> name</span><br><span class="line"><span class="string">"321"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; unwatch</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="6-3-基于特定条件的事务执行——分布式锁"><a href="#6-3-基于特定条件的事务执行——分布式锁" class="headerlink" title="6.3.基于特定条件的事务执行——分布式锁"></a>6.3.基于特定条件的事务执行——分布式锁</h2><ul><li>业务场景<ul><li>天猫双11热卖过程中，对已经售罄的货物追加补货，且补货完成。客户购买热情高涨，3秒内将所有商品购买完毕。本次补货已经将库存全部清空，如何避免最后一件商品不被多人同时购买？【超卖问题】</li></ul></li><li>业务分析<ul><li>使用watch监控一个key有没有改变已经不能解决问题，此处要监控的是具体数据</li><li>虽然redis是单线程的，但是多个客户端对同一数据同时进行操作时，如何避免不被同时修改？</li></ul></li></ul><ul><li><p>使用 setnx 设置一个公共锁：setnx lock-key value</p></li><li><p>利用setnx命令的返回值特征，有值则返回设置失败，无值则返回设置成功</p><ul><li>对于返回设置成功的，拥有控制权，进行下一步的具体业务操作</li><li>对于返回设置失败的，不具有控制权，排队或等待</li></ul></li><li><p>操作完毕通过del操作释放锁</p></li><li><p>注意：上述解决方案是一种设计概念，依赖规范保障，具有风险性</p></li><li><p>redis 应用基于分布式锁对应的场景控制</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> num <span class="number">10</span></span><br><span class="line">setnx lock-num <span class="number">1</span></span><br><span class="line">incrby num <span class="number">-1</span></span><br><span class="line">del lock-num</span><br></pre></td></tr></table></figure><h2 id="6-4-基于特定条件的事务执行——分布式锁改良"><a href="#6-4-基于特定条件的事务执行——分布式锁改良" class="headerlink" title="6.4.基于特定条件的事务执行——分布式锁改良"></a>6.4.基于特定条件的事务执行——分布式锁改良</h2><ul><li>业务场景<ul><li>依赖分布式锁的机制，某个用户操作时对应客户端宕机，且此时已经获取到锁。如何解决？</li></ul></li><li>业务分析<ul><li>由于锁操作由用户控制加锁解锁，必定会存在加锁后未解锁的风险</li><li>需要解锁操作不能仅依赖用户控制，系统级别要给出对应的保底处理方案</li></ul></li></ul><ul><li>使用 expire 为锁key添加时间限定，到时不释放，放弃锁</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expire lock-key second</span><br><span class="line">pexpire lock-key milliseconds</span><br></pre></td></tr></table></figure><ul><li>由于操作通常都是微秒或毫秒级，因此该锁定时间不宜设置过大。具体时间需要业务测试后确认。<ul><li>例如：持有锁的操作最长执行时间127ms，最短执行时间7ms。</li><li>测试百万次最长执行时间对应命令的最大耗时，测试百万次网络延迟平均耗时</li><li>锁时间设定推荐：最大耗时<em>120%+平均网络延迟</em>110%</li><li>如果业务最大耗时&lt;&lt;网络平均延迟，通常为2个数量级，取其中单个耗时较长即可</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">清除数据</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; flushdb</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys * </span><br><span class="line"><span class="built_in">set</span> name <span class="number">123</span></span><br><span class="line">setnx lock-name <span class="number">1</span></span><br><span class="line">expire lock-name <span class="number">20</span></span><br><span class="line"><span class="built_in">get</span> name</span><br><span class="line">del lock-name</span><br><span class="line">setnx lock-name <span class="number">1</span></span><br><span class="line">expire lock-name <span class="number">20</span></span><br><span class="line"></span><br><span class="line">客户端<span class="number">2</span>：</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setnx lock-name <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setnx lock-name <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line">......<span class="number">.20</span>秒后</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setnx lock-name <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rides的学习与使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="rides" scheme="https://linhuide.github.io/tags/rides/"/>
    
      <category term="JAVA" scheme="https://linhuide.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Rides再次学习2</title>
    <link href="https://linhuide.github.io/post/cef8fda2.html"/>
    <id>https://linhuide.github.io/post/cef8fda2.html</id>
    <published>2020-04-10T14:33:56.000Z</published>
    <updated>2020-04-17T11:52:24.931Z</updated>
    
    <content type="html"><![CDATA[<p>rides的学习与使用</p><a id="more"></a><h1 id="1-key通用操作"><a href="#1-key通用操作" class="headerlink" title="1.key通用操作"></a>1.key通用操作</h1><h2 id="1-1-key-特征"><a href="#1-1-key-特征" class="headerlink" title="1-1.key 特征"></a>1-1.key 特征</h2><p> key是一个字符串，通过key获取redis中保存的数据</p><p><strong>key应该设计哪些操作？</strong></p><ul><li>对于key自身状态的相关操作，例如：删除，判定存在，获取类型等</li><li>对于key有效性控制相关操作，例如：有效期设定，判定是否有效，有效状态的切换等</li><li>对于key快速查询操作，例如：按指定策略查询key</li></ul><h2 id="1-2-key-基本操作"><a href="#1-2-key-基本操作" class="headerlink" title="1-2.key 基本操作"></a>1-2.key 基本操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set str str </span><br><span class="line">hset hash hash1 hash1</span><br><span class="line">lpush list list1</span><br><span class="line">sadd set set1</span><br><span class="line">zadd zset1 1 zsetel</span><br></pre></td></tr></table></figure><ul><li>删除指定key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br><span class="line"></span><br><span class="line">del zsetl</span><br></pre></td></tr></table></figure><ul><li>获取key是否存在</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exists key</span><br><span class="line"></span><br><span class="line">exists str</span><br></pre></td></tr></table></figure><ul><li>获取key的类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type key</span><br><span class="line"></span><br><span class="line">type zset1</span><br><span class="line">type str</span><br><span class="line">type hash</span><br></pre></td></tr></table></figure><ul><li>为指定key设置有效期</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">expire key seconds</span><br><span class="line">pexpire key milliseconds</span><br><span class="line">expireat key timestamp</span><br><span class="line">pexpireat key milliseconds-timestamp</span><br><span class="line"></span><br><span class="line">expire str 3</span><br><span class="line">get str</span><br><span class="line">get str</span><br><span class="line">get str--&gt;nil</span><br></pre></td></tr></table></figure><ul><li>获取key的有效时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ttl key</span><br><span class="line">pttl key</span><br><span class="line"></span><br><span class="line">expire list 30</span><br><span class="line">ttl list</span><br><span class="line">-2  不存在、-1  存在、有效期 返回时间</span><br></pre></td></tr></table></figure><ul><li>切换key从时效性转换为永久性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persist key</span><br></pre></td></tr></table></figure><ul><li>查询key</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">keys pattern</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> list2 list2</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; persist list2</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; expire list2 <span class="number">60</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ttl list2</span><br><span class="line">(integer) <span class="number">56</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; persist list2</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ttl list2</span><br><span class="line">(integer) <span class="number">-1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; persist str</span><br><span class="line">(integer) <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>查询模式规则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 匹配任意数量的任意符号 </span><br><span class="line">? 配合一个任意符号 </span><br><span class="line">[] 匹配一个指定符号</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>keys *</strong></th><th><strong>查询所有</strong></th></tr></thead><tbody><tr><td><strong>keys it*</strong></td><td><strong>查询所有以it开头&lt;br/</strong></td></tr><tr><td><strong>keys *heima</strong></td><td><strong>查询所有以heima结尾</strong></td></tr><tr><td><strong>keys ??heima</strong></td><td><strong>查询所有前面两个字符任意，后面以heima结尾</strong></td></tr><tr><td><strong>keys user:?</strong></td><td><strong>查询所有以user:开头，最后一个字符任意</strong></td></tr><tr><td><strong>keys u[st]er:1</strong></td><td><strong>查询所有以u开头，以er:1结尾，中间包含一个字母，s或t</strong></td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> str str</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> str1 str1</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">"str"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"str1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> name i</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> i name</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"i"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"str"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"str1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys i*</span><br><span class="line"><span class="number">1</span>) <span class="string">"i"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys s*</span><br><span class="line"><span class="number">1</span>) <span class="string">"str"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"str1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> smr smr</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys s?r</span><br><span class="line"><span class="number">1</span>) <span class="string">"smr"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"str"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys ????</span><br><span class="line"><span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"str1"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys n[abc]me</span><br><span class="line"><span class="number">1</span>) <span class="string">"name"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> nbme nbme</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> nwme nwme</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys n[aw]me</span><br><span class="line"><span class="number">1</span>) <span class="string">"nwme"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"name"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="number">1</span>) <span class="string">"nbme"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"nwme"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"smr"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"name"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"str"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"i"</span></span><br><span class="line"><span class="number">7</span>) <span class="string">"str1"</span></span><br></pre></td></tr></table></figure><ul><li>为key改名</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rename key newkey</span><br><span class="line">renamenx key newkey</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> str str</span><br><span class="line"><span class="built_in">set</span> str2 str2</span><br><span class="line">rename str str3</span><br><span class="line">rename str3 str2</span><br><span class="line">--&gt;str2被str3覆盖了</span><br><span class="line"><span class="built_in">get</span> str2  --&gt;str</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> str1 str1</span><br><span class="line">renamenx str1 str2--&gt;<span class="number">0</span></span><br><span class="line">renamenx str1 str3--&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>对所有key排序</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sort</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush aa <span class="number">123</span> <span class="number">321</span> <span class="number">222</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange aa <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"222"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"321"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"123"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sort aa</span><br><span class="line"><span class="number">1</span>) <span class="string">"123"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"222"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"321"</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange aa <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"222"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"321"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"123"</span></span><br><span class="line">SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]</span><br></pre></td></tr></table></figure><ul><li>其他key通用操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help @generic</span><br></pre></td></tr></table></figure><h1 id="2-数据库通用操作"><a href="#2-数据库通用操作" class="headerlink" title="2.数据库通用操作"></a>2.数据库通用操作</h1><h2 id="2-1-key-的重复问题"><a href="#2-1-key-的重复问题" class="headerlink" title="2-1.key 的重复问题"></a>2-1.key 的重复问题</h2><ul><li>key是由程序员定义的</li><li>redis在使用过程中，伴随着操作数据量的增加，会出现大量的数据以及对应的key</li><li>数据不区分种类、类别混杂在一起，极易出现重复或冲突</li></ul><p><strong>解决方案：</strong></p><ul><li>redis为每个服务提供有16个数据库，编号从0到15</li><li>每个数据库之间的数据相互独立</li></ul><p><img src="../../images/rides/2/2-35.png" alt="2-35"></p><h2 id="2-2-db-基本操作"><a href="#2-2-db-基本操作" class="headerlink" title="2-2.db 基本操作"></a>2-2.db 基本操作</h2><p>切换数据库</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select index</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; select <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">1</span>]&gt; select <span class="number">15</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>[<span class="number">15</span>]&gt; select <span class="number">0</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>其他操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br><span class="line">ping</span><br><span class="line">echo message</span><br><span class="line"></span><br><span class="line">echo abcdefg--&gt;输出信息</span><br><span class="line">ping  --&gt;PONG  测试联通数据库</span><br><span class="line">quit 退出</span><br></pre></td></tr></table></figure><p>数据移动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">move key db</span><br><span class="line"></span><br><span class="line">set name 1</span><br><span class="line">select 1</span><br><span class="line">get name--&gt;nil</span><br><span class="line">select 0</span><br><span class="line">move name 1-&gt;1，移动剪切</span><br><span class="line">get name--&gt;nil</span><br><span class="line">移动操作保证数据库里没有改数据，有该数据，移动不了</span><br><span class="line">set name 2</span><br><span class="line">move name 1-&gt;0</span><br></pre></td></tr></table></figure><p>数据清除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbsize--&gt;看数据库里有多少key</span><br><span class="line">flushdb--&gt;删除当前数据库数据</span><br><span class="line">flushall--&gt;删除所有数据库信息</span><br></pre></td></tr></table></figure><h1 id="3-Jedis"><a href="#3-Jedis" class="headerlink" title="3.Jedis"></a>3.Jedis</h1><h2 id="3-1-编程语言与redis"><a href="#3-1-编程语言与redis" class="headerlink" title="3-1.编程语言与redis"></a>3-1.编程语言与redis</h2><p>Java语言连接redis服务：Jedis</p><h2 id="3-2-项目练习"><a href="#3-2-项目练习" class="headerlink" title="3-2.项目练习"></a>3-2.项目练习</h2><ul><li>jar包导入</li></ul><p>下载地址：<a href="https://mvnrepository.com/artifact/redis.clients/jedis" target="_blank" rel="noopener">https://mvnrepository.com/artifact/redis.clients/jedis</a></p><ul><li>基于maven</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>代码：String、list、hash</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.连接redis</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作redis</span></span><br><span class="line">        jedis.set(<span class="string">"name"</span>,<span class="string">"itheima"</span>);</span><br><span class="line">        String name = jedis.get(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.连接redis</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作redis</span></span><br><span class="line">        jedis.lpush(<span class="string">"list1"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</span><br><span class="line">        jedis.rpush(<span class="string">"list1"</span>,<span class="string">"x"</span>);</span><br><span class="line">        List&lt;String&gt; list1 = jedis.lrange(<span class="string">"list1"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s : list1)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(jedis.llen(<span class="string">"list1"</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHash</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.连接redis</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作redis</span></span><br><span class="line">        jedis.hset(<span class="string">"hash1"</span>,<span class="string">"a1"</span>,<span class="string">"b1"</span>);</span><br><span class="line">        jedis.hset(<span class="string">"hash1"</span>,<span class="string">"a2"</span>,<span class="string">"a2"</span>);</span><br><span class="line">        jedis.hset(<span class="string">"hash1"</span>,<span class="string">"a3"</span>,<span class="string">"b3"</span>);</span><br><span class="line">        Map&lt;String, String&gt; hash1 = jedis.hgetAll(<span class="string">"hash1"</span>);</span><br><span class="line">        System.out.println(hash1);</span><br><span class="line">        System.out.println(jedis.hlen(<span class="string">"hash1"</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-项目案例：服务调用次数控制"><a href="#3-3-项目案例：服务调用次数控制" class="headerlink" title="3-3.项目案例：服务调用次数控制"></a>3-3.项目案例：服务调用次数控制</h2><p>​    人工智能领域的语义识别与自动对话将是未来服务业机器人应答呼叫体系中的重要技术，百度自研用户评价语义识别服务，免费开放给企业试用，同时训练百度自己的模型。现对试用用户的使用行为进行限速，限制每个用户每分钟最多发起10次调用</p><ul><li><p>案例要求</p><ul><li>设定A、B、C三个用户</li><li>A用户限制10次/分调用，B用户限制30次/分调用，C用户不限制</li></ul></li><li><p>需求分析</p><ul><li>设定一个服务方法，用于模拟实际业务调用的服务，内部采用打印模拟调用</li><li>在业务调用前服务调用控制单元，内部使用redis进行控制，参照之前的方案</li><li>对调用超限使用异常进行控制，异常处理设定为打印提示信息</li><li>主程序启动3个线程，分别表示3种不同用户的调用</li></ul></li><li><p>要求</p><ul><li>后续1：对业务控制方案进行改造，设定不同用户等级的判定（做到）</li><li>后续2：将不同用户等级对应的信息、限制次数等设定到redis中，使用hash保存</li></ul></li></ul><p><strong>业务层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="comment">//A用户限制10次/分调用，B用户限制30次/分调用，C用户不限制</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Service</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="string">"A"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.num = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">"B"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.num = <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">"C"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>);</span><br><span class="line">        String value = jedis.get(<span class="string">"compid:"</span> + name);</span><br><span class="line">        <span class="comment">//判断该值是否存在</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//不存在，A用户限制10次/分调用，B用户限制30次/分调用</span></span><br><span class="line">                    jedis.setex(<span class="string">"compid:"</span> + name, <span class="number">60</span>, Long.MAX_VALUE - num + <span class="string">""</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//C用户不限制</span></span><br><span class="line">                    jedis.set(<span class="string">"compid:"</span> + name, <span class="string">"0"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//存在，自增，调用业务</span></span><br><span class="line">                Long val = jedis.incr(<span class="string">"compid:"</span> + name);</span><br><span class="line">                <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                    business(name, num - (Long.MAX_VALUE - val));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//c</span></span><br><span class="line">                    business(name, val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JedisDataException e) &#123;</span><br><span class="line">            System.out.println(name+<span class="string">"使用已经到达次数上限，请升级会员级别"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//业务操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">(String id, Long val)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户:"</span> + id + <span class="string">" 业务操作执行第"</span> + val + <span class="string">"次"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程+main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThead</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Service sc;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThead</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        sc=<span class="keyword">new</span> Service(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sc.Service();</span><br><span class="line">                Thread.sleep(<span class="number">500L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//A用户限制10次/分调用，B用户限制30次/分调用，C用户不限制</span></span><br><span class="line">        MyThead a = <span class="keyword">new</span> MyThead(<span class="string">"A"</span>);</span><br><span class="line">        MyThead b = <span class="keyword">new</span> MyThead(<span class="string">"B"</span>);</span><br><span class="line">        MyThead c = <span class="keyword">new</span> MyThead(<span class="string">"C"</span>);</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(a);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(b);</span><br><span class="line">        Thread t3=<span class="keyword">new</span> Thread(c);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-Jedis简易工具类开发"><a href="#3-4-Jedis简易工具类开发" class="headerlink" title="3-4.Jedis简易工具类开发"></a>3-4.Jedis简易工具类开发</h2><ul><li>封装连接参数： jedis.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">redis.maxTotal</span>=<span class="string">30</span></span><br><span class="line"><span class="meta">redis.maxIdle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure><ul><li>工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String host = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxTotal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxIdle;</span><br><span class="line">    <span class="comment">//静态代码块初始化资源</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ResourceBundle rb = ResourceBundle.getBundle(<span class="string">"redis"</span>);</span><br><span class="line">        host = rb.getString(<span class="string">"redis.host"</span>);</span><br><span class="line">        port = Integer.parseInt(rb.getString(<span class="string">"redis.port"</span>));</span><br><span class="line">        maxTotal = Integer.parseInt(rb.getString(<span class="string">"redis.maxTotal"</span>));</span><br><span class="line">        maxIdle = Integer.parseInt(rb.getString(<span class="string">"redis.maxIdle"</span>));</span><br><span class="line">        JedisPoolConfig jpc = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jpc.setMaxTotal(maxTotal);</span><br><span class="line">        jpc.setMaxIdle(maxIdle);</span><br><span class="line">        jp = <span class="keyword">new</span> JedisPool(jpc,host,port);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对外访问接口，提供jedis连接对象，连接从连接池获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jp.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        JedisUtils.getJedis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Jedis jedis = new Jedis("127.0.0.1",6379);</span></span><br><span class="line">Jedis jedis = JedisUtils.getJedis();</span><br></pre></td></tr></table></figure><h2 id="3-5-可视化客户端"><a href="#3-5-可视化客户端" class="headerlink" title="3-5.可视化客户端"></a>3-5.可视化客户端</h2><p>Redis Desktop Manager</p><p><a href="https://www.jb51.net/softs/669908.html" target="_blank" rel="noopener">Redis可视化工具Redis Desktop Manager 2019.0</a></p><h1 id="4-基于Linux环境安装Redis"><a href="#4-基于Linux环境安装Redis" class="headerlink" title="4.基于Linux环境安装Redis"></a>4.基于Linux环境安装Redis</h1><h2 id="4-1-基于Center-OS7安装Redis"><a href="#4-1-基于Center-OS7安装Redis" class="headerlink" title="4-1.基于Center OS7安装Redis"></a>4-1.基于Center OS7安装Redis</h2><ul><li>打开linux，我用SecureCRT工具，打开官网，看代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//download.redis.io/releases/redis-5.0.8.tar.gz</span></span><br><span class="line">tar xzf redis<span class="number">-5.0</span><span class="number">.8</span>.tar.gz</span><br><span class="line">cd redis<span class="number">-5.0</span><span class="number">.8</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ul><li>因为个人刚搞linux，没有安装gcc，报错，所以要安装</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">CC adlist.o</span><br><span class="line">/bin/sh: cc: 未找到命令</span><br><span class="line">make[<span class="number">1</span>]: *** [adlist.o] 错误 <span class="number">127</span></span><br><span class="line">...</span><br><span class="line">安装</span><br><span class="line">yum install gcc-c++ </span><br><span class="line">make distclean清空上次编译失败残留文件</span><br><span class="line">make &amp;&amp; make install    执行编译及安装</span><br></pre></td></tr></table></figure><ul><li>参考</li></ul><p><a href="https://www.cnblogs.com/shizhijie/p/10005682.html" target="_blank" rel="noopener">安装redis出现cc adlist.o /bin/sh:1:cc:not found的解决方法</a></p><p><a href="https://blog.csdn.net/Hello_word_2/article/details/82981505" target="_blank" rel="noopener">CentOSt7安装Redis错误</a></p><h2 id="4-2-实验"><a href="#4-2-实验" class="headerlink" title="4-2.实验"></a>4-2.实验</h2><h3 id="1-登录验证"><a href="#1-登录验证" class="headerlink" title="1.登录验证"></a>1.登录验证</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd redis<span class="number">-5.0</span><span class="number">.8</span> </span><br><span class="line">cd src </span><br><span class="line">返回上一级</span><br><span class="line">cd ..</span><br><span class="line">[root@localhost redis<span class="number">-5.0</span><span class="number">.8</span>]<span class="meta"># redis-server</span></span><br><span class="line">克隆一个新的（clone session）</span><br><span class="line">cd redis<span class="number">-5.0</span><span class="number">.8</span> </span><br><span class="line">[root@localhost redis<span class="number">-5.0</span><span class="number">.8</span>]<span class="meta"># redis-cli</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">set</span> set2</span><br><span class="line"><span class="built_in">get</span> <span class="built_in">set</span></span><br><span class="line">能拿到set2，安装成功</span><br></pre></td></tr></table></figure><h3 id="2-换端口"><a href="#2-换端口" class="headerlink" title="2.换端口"></a>2.换端口</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd redis<span class="number">-5.0</span><span class="number">.8</span> </span><br><span class="line">redis-server  --port <span class="number">6380</span></span><br><span class="line">redis-cli -p <span class="number">6380</span></span><br></pre></td></tr></table></figure><h3 id="3-查看配置文件，配置文件启动"><a href="#3-查看配置文件，配置文件启动" class="headerlink" title="3.查看配置文件，配置文件启动"></a>3.查看配置文件，配置文件启动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis<span class="number">-5.0</span><span class="number">.8</span>]<span class="meta"># ll</span></span><br><span class="line">看一下，复制到这里</span><br><span class="line">cat redis.conf | grep -v <span class="string">"#"</span> | grep -v <span class="string">"^$"</span>  &gt; redis_6379.conf</span><br><span class="line">修改</span><br><span class="line">vim redis_6379.conf</span><br><span class="line">直接删除，dd一行</span><br><span class="line">i 插入</span><br><span class="line">daemonize yes</span><br><span class="line">logfile <span class="string">"6379.log"</span></span><br><span class="line">dir /root/redis<span class="number">-5.0</span><span class="number">.8</span>/data</span><br><span class="line">:wq保存退出</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/3/3-1.png" alt="3-1"></p><ol><li><strong>补充：创建个目录，放配置文件</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line">cd data</span><br><span class="line">pwd获取路径</span><br><span class="line">/root/redis<span class="number">-5.0</span><span class="number">.8</span>/data</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>启动</strong> </li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis<span class="number">-6379.</span>conf</span><br><span class="line">ps -ef | grep redis-</span><br><span class="line">结果：</span><br><span class="line">root      <span class="number">68557</span>      <span class="number">1</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">55</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> redis-server *:<span class="number">6379</span></span><br><span class="line">root      <span class="number">68562</span>  <span class="number">67617</span>  <span class="number">0</span> <span class="number">15</span>:<span class="number">55</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> grep --color=<span class="keyword">auto</span> redis-</span><br><span class="line">克隆，开验证</span><br><span class="line">redis-cli默认<span class="number">6379</span></span><br><span class="line"></span><br><span class="line">关闭</span><br><span class="line">redis-cli -p <span class="number">6379</span> <span class="built_in">shutdown</span></span><br></pre></td></tr></table></figure><h3 id="4-多个配置文件，转移到conf"><a href="#4-多个配置文件，转移到conf" class="headerlink" title="4.多个配置文件，转移到conf"></a>4.多个配置文件，转移到conf</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> conf</span><br><span class="line"><span class="comment">//转移</span></span><br><span class="line">mv redis<span class="number">-6379.</span>conf conf</span><br><span class="line">cd conf</span><br><span class="line">ll</span><br><span class="line">复制多个conf</span><br><span class="line">cp redis<span class="number">-6379.</span>conf redis<span class="number">-6380.</span>conf</span><br><span class="line">vim redis<span class="number">-6380.</span>conf</span><br><span class="line">i,修改</span><br><span class="line">port <span class="number">6380</span></span><br><span class="line">daemonize yes</span><br><span class="line">logfile <span class="string">"6380.log"</span></span><br><span class="line">dir /root/redis<span class="number">-5.0</span><span class="number">.8</span>/data</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/3/3-3.png" alt="3-3"></p><h3 id="5-启动"><a href="#5-启动" class="headerlink" title="5.启动"></a>5.启动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis-server conf/redis<span class="number">-6379.</span>conf</span><br><span class="line">redis-server conf/redis<span class="number">-6380.</span>conf</span><br><span class="line">克隆</span><br><span class="line">redis-cli -p <span class="number">6379</span></span><br><span class="line">redis-cli -p <span class="number">6380</span></span><br><span class="line">关掉</span><br><span class="line">redis-cli -p <span class="number">6379</span> <span class="built_in">shutdown</span></span><br><span class="line">redis-cli -p <span class="number">6380</span> <span class="built_in">shutdown</span></span><br></pre></td></tr></table></figure><h2 id="4-3-理论"><a href="#4-3-理论" class="headerlink" title="4-3.理论"></a>4-3.理论</h2><h3 id="1-Redis基础环境设置"><a href="#1-Redis基础环境设置" class="headerlink" title="1.Redis基础环境设置"></a>1.Redis基础环境设置</h3><ul><li>创建软链接<ul><li>ln -s 原始目录名 快速访问目录名</li></ul></li><li>创建配置文件管理目录<ul><li>mkdir conf</li><li>mkdir config</li></ul></li><li>创建数据文件管理目录<ul><li>mkdir data</li></ul></li></ul><h3 id="2-Redis服务启动"><a href="#2-Redis服务启动" class="headerlink" title="2.Redis服务启动"></a>2.Redis服务启动</h3><ul><li>默认配置启动<ul><li>redis-server</li><li>redis-server –-port 6379</li><li>redis-server –-port 6380 ……</li></ul></li><li>指定配置文件启动<ul><li>redis-server redis.conf</li><li>redis-server redis-6379.conf</li><li>redis-server redis-6380.conf ……</li><li>redis-server conf/redis-6379.conf</li><li>redis-server config/redis-6380.conf ……</li></ul></li></ul><h3 id="3-Redis客户端连接"><a href="#3-Redis客户端连接" class="headerlink" title="3.Redis客户端连接"></a>3.Redis客户端连接</h3><ul><li>默认连接<ul><li>redis-cli</li></ul></li><li>连接指定服务器<ul><li>redis-cli -h 127.0.0.1</li><li>redis-cli –port 6379</li><li>redis-cli -h 127.0.0.1 –port 6379</li></ul></li></ul><h3 id="4-Redis服务端配置"><a href="#4-Redis服务端配置" class="headerlink" title="4.Redis服务端配置"></a>4.Redis服务端配置</h3><ul><li>基本配置<ul><li>daemonize yes： 以守护进程方式启动，使用本启动方式，redis将以服务的形式存在，日志将不再打印到命令窗口中</li><li>port 6***：设定当前服务启动端口号</li><li>dir “/自定义目录/redis/data“：          设定当前服务文件保存位置，包含日志文件、持久化文件（后面详细讲解）等</li><li>logfile “6***.log“：      设定日志文件名，便于查阅</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rides的学习与使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="rides" scheme="https://linhuide.github.io/tags/rides/"/>
    
      <category term="JAVA" scheme="https://linhuide.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Rides再次学习-1</title>
    <link href="https://linhuide.github.io/post/7690db10.html"/>
    <id>https://linhuide.github.io/post/7690db10.html</id>
    <published>2020-04-10T03:22:28.000Z</published>
    <updated>2020-04-17T11:51:31.647Z</updated>
    
    <content type="html"><![CDATA[<p>rides的学习与使用</p><a id="more"></a><h2 id="1-Redis-简介"><a href="#1-Redis-简介" class="headerlink" title="1.Redis 简介"></a>1.Redis 简介</h2><h3 id="1-1-问题现象"><a href="#1-1-问题现象" class="headerlink" title="1-1.问题现象"></a>1-1.问题现象</h3><ol><li>海量用户</li><li>高并发</li></ol><h3 id="1-2-罪魁祸首——关系型数据库"><a href="#1-2-罪魁祸首——关系型数据库" class="headerlink" title="1-2.罪魁祸首——关系型数据库"></a>1-2.罪魁祸首——关系型数据库</h3><ol><li>性能瓶颈：磁盘IO性能低下</li><li>扩展瓶颈：数据关系复杂，扩展性差，不便于大规模集群</li></ol><h3 id="1-3-解决思路"><a href="#1-3-解决思路" class="headerlink" title="1-3.解决思路"></a>1-3.解决思路</h3><ol><li>降低磁盘IO次数，越低越好—— 内存存储</li><li>去除数据间关系，越简单越好—— 不存储关系，仅存储数据</li></ol><h3 id="1-4-Nosql"><a href="#1-4-Nosql" class="headerlink" title="1-4.Nosql"></a>1-4.Nosql</h3><p>​    NoSQL：即 Not-Only SQL（ 泛指非关系型的数据库），作为关系型数据库的补充。</p><p>​    作用：应对基于海量用户和海量数据前提下的数据处理问题。</p><p>特征：</p><ul><li>可扩容，可伸缩</li><li>大数据量下高性能</li><li>灵活的数据模型</li><li>高可用</li></ul><p>常见 Nosql 数据库：</p><ul><li>Redis</li><li>memcache</li><li>HBase</li><li>MongoDB</li></ul><p><img src="../../images/rides/2/2-1.png" alt="2-1"></p><h3 id="1-5-Redis"><a href="#1-5-Redis" class="headerlink" title="1-5.Redis"></a>1-5.Redis</h3><p><strong>概念：</strong>Redis (REmote DIctionary Server) 是用 C 语言开发的一个开源的高性能键值对（key-value）数据库。</p><p><strong>特征：</strong></p><ol><li>数据间没有必然的关联关系</li><li>内部采用单线程机制进行工作</li><li>高性能。官方提供测试数据，50个并发执行100000 个请求,读的速度是110000 次/s,写的速度是81000次/s。</li><li>多数据类型支持<ol><li>字符串类型 string</li><li>列表类型 list</li><li>散列类型 hash</li><li>集合类型 set</li><li>有序集合类型 sorted_set</li></ol></li><li>持久化支持。可以进行数据灾难恢复</li></ol><p><strong>Redis 的应用：</strong></p><ul><li>为热点数据加速查询（主要场景），如热点商品、热点新闻、热点资讯、推广类等高访问量信息等</li><li>任务队列，如秒杀、抢购、购票排队等</li><li>即时信息查询，如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等 </li><li>时效性信息控制，如验证码控制、投票控制等</li><li>分布式数据共享，如分布式集群架构中的 session 分离</li><li>消息队列</li><li>分布式锁</li></ul><h3 id="1-6-Redis-的下载"><a href="#1-6-Redis-的下载" class="headerlink" title="1-6.Redis 的下载"></a>1-6.Redis 的下载</h3><p>Redis 入门使用，以 3.2 版本作为主版本：</p><p>下载地址：<a href="https://github.com/MSOpenTech/redis/tags" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/tags</a></p><h3 id="1-7-核心文件"><a href="#1-7-核心文件" class="headerlink" title="1-7.核心文件"></a>1-7.核心文件</h3><ul><li>redis-server.exe 服务器启动命令</li><li>redis-cli.exe  命令行客户端</li><li>redis.windows.conf redis核心配置文件</li><li>redis-benchmark.exe  性能测试工具</li><li>redis-check-aof.exe AOF文件修复工具</li><li>redis-check-dump.exe RDB文件检查工具（快照持久化文件）</li></ul><h3 id="1-8-基本操作"><a href="#1-8-基本操作" class="headerlink" title="1-8.基本操作"></a>1-8.基本操作</h3><ol><li>信息添加，设置 key，value 数据</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br><span class="line"><span class="built_in">set</span> name itheima</span><br></pre></td></tr></table></figure><ol start="2"><li>信息查询，根据 key 查询对应的 value，如果不存在，返回空（nil）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get key</span><br><span class="line">get name</span><br></pre></td></tr></table></figure><ol start="3"><li>清除屏幕信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure><ol start="4"><li>退出客户端命令行模式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br><span class="line">exit</span><br><span class="line">&lt;ESC&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>帮助，获取命令帮助文档，获取组中所有命令信息名称</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">help 命令名称</span><br><span class="line">help @组名</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/2/2-2.png" alt="2-2"></p><h2 id="2-Redis-数据类型"><a href="#2-Redis-数据类型" class="headerlink" title="2.Redis 数据类型"></a>2.Redis 数据类型</h2><h3 id="2-1-数据存储类型介绍"><a href="#2-1-数据存储类型介绍" class="headerlink" title="2-1.数据存储类型介绍"></a>2-1.数据存储类型介绍</h3><p><strong>业务数据作为缓存使用：</strong></p><ol><li>原始业务功能设计<ol><li>秒杀</li><li>618活动</li><li>双11活动</li><li>排队购票</li></ol></li><li>运营平台监控到的突发高频访问数据<ol><li>突发时政要闻，被强势关注围观</li></ol></li><li>高频、复杂的统计数据<ol><li>在线人数</li><li>投票排行榜</li></ol></li></ol><p><strong>业务数据附加功能：系统功能优化或升级</strong></p><ul><li>单服务器升级集群</li><li>Session 管理</li><li>Token 管理</li></ul><p><strong>Redis 数据类型（5种常用）：</strong></p><ol><li>string – String</li><li>hash – HashMap</li><li>list – LinkedList</li><li>set – HashSet</li><li>sorted_set – TreeSet</li></ol><h3 id="2-2-string"><a href="#2-2-string" class="headerlink" title="2-2.string"></a>2-2.string</h3><p><strong>redis 数据存储格式：</strong></p><ul><li>redis 自身是一个 Map，其中所有的数据都是采用 key : value 的形式存储</li><li>数据类型指的是存储的数据的类型，也就是 value 部分的类型，key 部分永远都是字符串</li></ul><p><img src="../../images/rides/2/2-3.png" alt="2-3"></p><p><strong>string 类型</strong></p><ul><li>存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型</li><li>存储数据的格式：一个存储空间保存一个数据</li><li>存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用</li></ul><p><img src="../../images/rides/2/2-4.png" alt="2-4"></p><h4 id="string-类型数据的基本操作"><a href="#string-类型数据的基本操作" class="headerlink" title="string 类型数据的基本操作"></a>string 类型数据的基本操作</h4><ul><li>添加/修改数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br><span class="line">set name zhangsan</span><br></pre></td></tr></table></figure><ul><li>获取数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get key</span><br><span class="line">get name</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br><span class="line">del name</span><br></pre></td></tr></table></figure><ul><li>添加/修改多个数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mset key1 value1 key2 value2 …</span><br><span class="line">mset name zhangsna age 10</span><br></pre></td></tr></table></figure><ul><li>获取多个数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mget key1 key2 …</span><br><span class="line">mget name age</span><br></pre></td></tr></table></figure><ul><li>获取数据字符个数（字符串长度）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strlen key</span><br><span class="line">strlen name</span><br></pre></td></tr></table></figure><ul><li>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">append key value</span><br><span class="line">append age 2</span><br></pre></td></tr></table></figure><ul><li>设置数值数据增加指定范围的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">incr key </span><br><span class="line">incrby key increment</span><br><span class="line">（加整数，increment可以为正，可以为负）</span><br><span class="line">incrbyfloat key increment</span><br><span class="line">（可以加小数）</span><br><span class="line">incr age</span><br><span class="line">incrby age 10</span><br><span class="line">incrbyfloat age 1.5</span><br></pre></td></tr></table></figure><ul><li>设置数值数据减少指定范围的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">decr key </span><br><span class="line">decrby key increment</span><br><span class="line">decr age--&gt;(-1)</span><br><span class="line">decrby age 10</span><br></pre></td></tr></table></figure><ul><li>设置数据具有指定的生命周期</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setex key seconds value （秒）</span><br><span class="line">psetex key milliseconds value  （毫秒）</span><br><span class="line">setex age 10 20--&gt;(10秒后20为nil)</span><br><span class="line">setex age 120 20--&gt;(2秒后20为nil)</span><br></pre></td></tr></table></figure><p><strong>问题：</strong></p><ol><li>单数据操作与多数据操作的选择</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set key value </span><br><span class="line">mset key1 value1 key2 value2 …</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/2/2-6.png" alt="2-6"></p><ol start="2"><li>业务场景</li></ol><p>​    大型企业级应用中，分表操作是基本操作，使用多张表存储同类型数据，但是对应的主键 id 必须保证统一性，不能重复。Oracle 数据库具有 sequence 设定，可以解决该问题，但是 MySQL数据库并不具有类似的机制，那么如何解决？</p><p><img src="../../images/rides/2/2-7.png" alt="2-7"></p><p>解决方法：用设置数值数据增加指定范围的值或设置数值数据减少指定范围的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">增</span><br><span class="line">incr key </span><br><span class="line">incrby key increment</span><br><span class="line">incrbyfloat key increment</span><br><span class="line">减</span><br><span class="line">decr key </span><br><span class="line">decrby key increment</span><br></pre></td></tr></table></figure><ol start="3"><li>业务场景</li></ol><ul><li>“最强女生”启动海选投票，只能通过微信投票，每个微信号每 4 小时只能投1票。</li><li>电商商家开启热门商品推荐，热门商品不能一直处于热门期，每种商品热门期维持3天，3天后自动取消热门。</li><li>新闻网站会出现热点新闻，热点新闻最大的特征是时效性，如何自动控制热点新闻的时效性。</li></ul><p><img src="../../images/rides/2/2-8.png" alt="2-8"></p><p><strong>解决方案：</strong></p><ol><li>设置数据具有指定的生命周期</li><li>redis 控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</li></ol><h4 id="string-作为数值操作"><a href="#string-作为数值操作" class="headerlink" title="string 作为数值操作"></a>string 作为数值操作</h4><ul><li>string在redis内部存储默认就是一个字符串，当遇到增减类操作incr，decr时会转成数值型进行计算。</li><li>redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响。</li><li>注意：按数值进行操作的数据，如果原始数据不能转成数值，或超越了redis 数值上限范围，将报错。</li><li>9223372036854775807（java中long型数据最大值，Long.MAX_VALUE）</li></ul><p>提示：</p><ul><li>redis用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性</li><li>此方案适用于所有数据库，且支持数据库集群</li></ul><h3 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2-3.注意事项"></a>2-3.注意事项</h3><ol><li><p>string 类型数据操作的注意事项</p><ol><li><p>表示运行结果是否成功</p><ol><li>(integer) 0 → false 失败</li><li>(integer) 1 → true  成功</li></ol></li><li><p>表示运行结果值</p><ol><li><p>(integer) 3 → 3 3个 </p></li><li><p>(integer) 1 → 1 1个</p></li></ol></li></ol></li><li><p>数据未获取到</p><ol><li>（nil）等同于null</li></ol></li><li><p>数据最大存储量</p><ol><li>512MB</li></ol></li><li><p>数值计算最大范围（java中的long的最大值）</p><ol><li>9223372036854775807</li></ol></li></ol><h3 id="2-4-string-类型应用场景"><a href="#2-4-string-类型应用场景" class="headerlink" title="2-4.string 类型应用场景"></a>2-4.string 类型应用场景</h3><p><strong>问题：主页高频访问信息显示控制，例如新浪微博大V主页显示粉丝数与微博数量</strong></p><p><img src="../../images/rides/2/2-9.png" alt="2-9"></p><p><strong>解决：</strong></p><ul><li>在redis中为大V用户设定用户信息，以用户主键和属性值作为key，后台设定定时刷新策略即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:  user:id:3506728370:fans  → 12210947</span><br><span class="line">eg:  user:id:3506728370:blogs  → 6164</span><br><span class="line">eg:  user:id:3506728370:focuss  → 83</span><br></pre></td></tr></table></figure><ul><li>在redis中以json格式存储大V用户信息，定时刷新（也可以使用hash类型）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:  user:id:3506728370 → </span><br><span class="line">&#123;&quot;id&quot;:3506728370,&quot;name&quot;:&quot;春晚&quot;,&quot;fans&quot;:12210862,&quot;blogs&quot;:6164, &quot;focus&quot;:83&#125;</span><br></pre></td></tr></table></figure><ul><li>redis应用于各种结构型和非结构型高热度数据访问加速</li></ul><p><img src="../../images/rides/2/2-10.png" alt="2-10"></p><h2 id="3-hash"><a href="#3-hash" class="headerlink" title="3.hash"></a>3.hash</h2><p><strong>存储的困惑：</strong></p><p>对象类数据的存储如果具有较频繁的更新需求操作会显得笨重</p><p><img src="../../images/rides/2/2-5-1.png" alt="2-5-1"></p><p><img src="../../images/rides/2/2-5.png" alt="2-5"></p><h3 id="3-1-hash-类型"><a href="#3-1-hash-类型" class="headerlink" title="3-1.hash 类型"></a>3-1.hash 类型</h3><ul><li>新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</li><li>需要的存储结构：一个存储空间保存多个键值对数据</li><li>hash类型：底层使用哈希表结构实现数据存储</li></ul><p><strong>hash存储结构优化：</strong></p><ul><li>如果field数量较少，存储结构优化为类数组结构</li><li>如果field数量较多，存储结构使用HashMap结构</li></ul><p><img src="../../images/rides/2/2-12.png" alt="2-12"></p><h3 id="3-2-hash-类型数据的基本操作"><a href="#3-2-hash-类型数据的基本操作" class="headerlink" title="3-2.hash 类型数据的基本操作"></a>3-2.hash 类型数据的基本操作</h3><ul><li>添加/修改数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hset key field value</span><br><span class="line">hset list name zhangsan</span><br></pre></td></tr></table></figure><ul><li>获取数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hget key field</span><br><span class="line">hgetall key</span><br><span class="line">hget list name</span><br><span class="line">hgetall list</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdel key field1 [field2]</span><br><span class="line">hdel list name</span><br></pre></td></tr></table></figure><ul><li>添加/修改多个数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hmset key field1 value1 field2 value2 … </span><br><span class="line">hmset list name zhangsna age 20</span><br></pre></td></tr></table></figure><ul><li>获取多个数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hmget key field1 field2 … </span><br><span class="line">hmget list name age</span><br></pre></td></tr></table></figure><ul><li>获取哈希表中字段的数量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hlen key</span><br><span class="line">hlen list</span><br></pre></td></tr></table></figure><ul><li>获取哈希表中是否存在指定的字段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexists key field</span><br><span class="line">hexists list name</span><br></pre></td></tr></table></figure><ul><li>获取哈希表中所有的字段名或字段值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hkeys key</span><br><span class="line">hvals key</span><br><span class="line">hkeys list</span><br><span class="line">hvals list</span><br></pre></td></tr></table></figure><ul><li>设置指定字段的数值数据增加指定范围的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hincrby key field increment</span><br><span class="line">hincrbyfloat key field increment</span><br><span class="line">hincrby list age 10</span><br><span class="line">hincrbyfloat list age 1.5</span><br></pre></td></tr></table></figure><ul><li>有数据，不插入，没有数据，插入数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hsetnx key field value</span><br><span class="line">hsetnx list name lisi</span><br><span class="line">hsetnx list name2 lisi</span><br></pre></td></tr></table></figure><h3 id="3-3-hash-类型数据操作的注意事项"><a href="#3-3-hash-类型数据操作的注意事项" class="headerlink" title="3-3.hash 类型数据操作的注意事项"></a>3-3.hash 类型数据操作的注意事项</h3><ul><li>hash类型下的value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象。如果数据未获取到，对应的值为（nil）</li><li>每个 hash 可以存储 2^32 - 1 个键值对</li><li>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。</li><li>但hash设计初衷不是为了存储大量对象而设计的，切记不可滥用，更不可以将hash作为对象列表使用</li><li>hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就很会低，有可能成为数据访问瓶颈</li></ul><h3 id="3-4-hash-类型应用场景-电商网站购物车设计与实现"><a href="#3-4-hash-类型应用场景-电商网站购物车设计与实现" class="headerlink" title="3-4.hash 类型应用场景:电商网站购物车设计与实现"></a>3-4.hash 类型应用场景:电商网站购物车设计与实现</h3><p><strong>业务分析：</strong></p><ul><li><p>仅分析购物车的redis存储模型</p><ul><li>添加、浏览、更改数量、删除、清空</li></ul></li><li><p>购物车于数据库间持久化同步（不讨论）</p></li><li><p>购物车于订单间关系（不讨论）</p><ul><li>提交购物车：读取数据生成订单</li><li>商家临时价格调整：隶属于订单级别</li></ul></li><li><p>未登录用户购物车信息存储（不讨论）</p><ul><li>cookie存储</li></ul></li></ul><p><img src="../../images/rides/2/2-11.png" alt="2-11"></p><p><strong>解决方案：</strong></p><ul><li>以客户id作为key，每位客户创建一个hash存储结构存储对应的购物车信息</li><li>将商品编号作为field，购买数量作为value进行存储</li><li>添加商品：追加全新的field与value</li><li>浏览：遍历hash</li><li>更改数量：自增/自减，设置value值</li><li>删除商品：删除field</li><li>清空：删除key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hmset 001 g01 100 g02 200</span><br><span class="line">hmset 002 g02 1 g04 7 g05 100</span><br><span class="line">hset 001 g03 5</span><br><span class="line">hgetall 001</span><br><span class="line">hdel 001 g01</span><br><span class="line">hgetall 001</span><br><span class="line">hincrby 001 g03 1</span><br><span class="line">hgetall 001</span><br></pre></td></tr></table></figure><ul><li>此处仅讨论购物车中的模型设计</li><li>购物车与数据库间持久化同步、购物车与订单间关系、未登录用户购物车信息存储不进行讨论</li></ul><h4 id="当前设计是否加速了购物车的呈现？"><a href="#当前设计是否加速了购物车的呈现？" class="headerlink" title="当前设计是否加速了购物车的呈现？"></a>当前设计是否加速了购物车的呈现？</h4><p>​    当前仅仅是将数据存储到了redis中，并没有起到加速的作用，商品信息还需要二次查询数据库</p><ul><li><p>每条购物车中的商品记录保存成两条field</p></li><li><p>field1专用于保存购买数量</p><ul><li><p>命名格式：商品id:nums</p></li><li><p>保存数据：数值</p></li></ul></li><li><p>field2专用于保存购物车中显示的信息，包含文字描述，图片地址，所属商家信息等</p><ul><li>命名格式：商品id:info</li><li>保存数据：json</li></ul></li><li><p>redis 应用于购物车数据存储设计</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hmest 003 g01:numd 100 g01:info &#123;...&#125;</span><br><span class="line">hgetall 003</span><br><span class="line">hmest 004 g01:numd 5 g01:info &#123;...&#125;</span><br><span class="line">hset 003 g01:nums 200</span><br><span class="line">hsetnx 003 g01:nums 400</span><br></pre></td></tr></table></figure><h3 id="3-5-hash-类型应用场景2"><a href="#3-5-hash-类型应用场景2" class="headerlink" title="3-5.hash 类型应用场景2"></a>3-5.hash 类型应用场景2</h3><p><strong>业务场景：</strong><br>    双11活动日，销售手机充值卡的商家对移动、联通、电信的30元、50元、100元商品推出抢购活动，每种商品抢购上限1000张</p><p><img src="../../images/rides/2/2-14.png" alt="2-14"></p><p><strong>解决方案：</strong></p><ul><li>以商家id作为key</li><li>将参与抢购的商品id作为field</li><li>将参与抢购的商品数量作为对应的value</li><li>抢购时使用降值的方式控制产品数量</li><li>实际业务中还有超卖等实际问题，这里不做讨</li><li>redis 应用于抢购，限购类、限量发放优惠卷、激活码等业务的数据存储设计</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hmset p01 c30 1000 c50 1000 c100 1000</span><br><span class="line">hincrby p01 c50 -1</span><br><span class="line">hincrby p01 c100 -20</span><br><span class="line">hgetall p01</span><br></pre></td></tr></table></figure><p><strong>题外：</strong></p><p>string存储对象（json），讲究整体性</p><p>hash存储对象，讲究更新，灵活性，改数量多</p><h2 id="4-list"><a href="#4-list" class="headerlink" title="4.list"></a>4.list</h2><h3 id="4-1-list-类型"><a href="#4-1-list-类型" class="headerlink" title="4-1.list 类型"></a>4-1.list 类型</h3><ul><li>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分</li><li>需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序</li><li>list类型：保存多个数据，底层使用双向链表存储结构实现</li></ul><p><img src="../../images/rides/2/2-13.png" alt="2-13"></p><p><img src="../../images/rides/2/2-17.png" alt="2-17"></p><h3 id="4-2-list-类型数据基本操作"><a href="#4-2-list-类型数据基本操作" class="headerlink" title="4-2.list 类型数据基本操作"></a>4-2.list 类型数据基本操作</h3><ul><li>添加/修改数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lpush key value1 [value2] ……</span><br><span class="line">rpush key value1 [value2] ……</span><br><span class="line"></span><br><span class="line">lpush list a b c  --&gt;从左边</span><br><span class="line">rpush list a b c  --&gt;从右边</span><br></pre></td></tr></table></figure><ul><li>获取数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lrange key start stop</span><br><span class="line">lindex key index</span><br><span class="line">llen key </span><br><span class="line"></span><br><span class="line">lpush list a b c  --&gt;从左边</span><br><span class="line">lrange list 0 -1  --&gt;全部，索引值，c b a</span><br><span class="line">lindex list 0</span><br><span class="line">llen list   --&gt;3个</span><br></pre></td></tr></table></figure><ul><li>获取并移除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lpop key</span><br><span class="line">rpop key</span><br><span class="line"></span><br><span class="line">lpush list a b c</span><br><span class="line">lpop list--&gt;c</span><br><span class="line">rpop list--&gt;a</span><br></pre></td></tr></table></figure><ul><li>规定时间内获取并移除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">blpop key1 [key2] timeout</span><br><span class="line">brpop key1 [key2] timeout</span><br><span class="line">brpoplpush source destination timeout</span><br><span class="line"></span><br><span class="line">服务器1：lpush list a b</span><br><span class="line">服务器2：blpop list 30</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/2/2-15.png" alt="2-15"></p><p> 移除指定数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lrem key count value</span><br><span class="line"></span><br><span class="line">lpush list a b a b a b</span><br><span class="line">lrem key 2 a  --&gt; b b a b</span><br></pre></td></tr></table></figure><p><strong>业务场景：</strong>微信朋友圈点赞，要求按照点赞顺序显示点赞好友信息。如果取消点赞，移除对应好友信息</p><p><img src="../../images/rides/2/2-18.png" alt="2-18"></p><ul><li>redis 应用于具有操作先后顺序的数据控制</li></ul><h3 id="4-3-list-类型数据操作注意事项"><a href="#4-3-list-类型数据操作注意事项" class="headerlink" title="4-3.list 类型数据操作注意事项"></a>4-3.list 类型数据操作注意事项</h3><ul><li>list中保存的数据都是string类型的，数据总容量是有限的，最多2 32 - 1 个元素 (4294967295)。</li><li>list具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈操作</li><li>获取全部数据操作结束索引设置为-1</li><li>list可以对数据进行分页操作，通常第一页的信息来自于list，第2页及更多的信息通过数据库的形式加载</li></ul><h3 id="4-4-list-类型应用场景"><a href="#4-4-list-类型应用场景" class="headerlink" title="4-4.list 类型应用场景"></a>4-4.list 类型应用场景</h3><p><strong>业务场景：</strong>twitter、新浪微博、腾讯微博中个人用户的关注列表需要按照用户的关注顺序进行展示，粉丝列表需要将最近关注的粉丝列在前面</p><p>新闻、资讯类网站如何将最新的新闻或资讯按照发生的时间顺序展示？</p><p>企业运营过程中，系统将产生出大量的运营数据，如何保障多台服务器操作日志的统一顺序输出？</p><p><img src="../../images/rides/2/2-19.png" alt="2-19"></p><p><strong>解决方案：</strong></p><ul><li>依赖list的数据具有顺序的特征对信息进行管理</li><li>使用队列模型解决多路信息汇总合并的问题</li><li>使用栈模型解决最新消息的问题</li><li>redis 应用于最新消息展示</li></ul><p><img src="../../images/rides/2/2-16.png" alt="2-16"></p><h2 id="5-set"><a href="#5-set" class="headerlink" title="5.set"></a>5.set</h2><h3 id="5-1-set-类型"><a href="#5-1-set-类型" class="headerlink" title="5-1.set 类型"></a>5-1.set 类型</h3><ul><li>新的存储需求：存储大量的数据，在查询方面提供更高的效率</li><li>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</li><li>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的</li></ul><p><img src="../../images/rides/2/2-20.png" alt="2-20"></p><p><img src="../../images/rides/2/2-21.png" alt="2-21"></p><h3 id="5-2-set-类型数据的基本操作"><a href="#5-2-set-类型数据的基本操作" class="headerlink" title="5-2.set 类型数据的基本操作"></a>5-2.set 类型数据的基本操作</h3><ul><li>添加数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sadd key member1 [member2]</span><br><span class="line">sadd set a1 a2 a3</span><br></pre></td></tr></table></figure><ul><li>获取全部数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">smembers key</span><br><span class="line">smembers set--&gt;a3 a2 a1</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">srem key member1 [member2]</span><br><span class="line">srem set a1</span><br></pre></td></tr></table></figure><ul><li>获取集合数据总量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scard key</span><br><span class="line">scard set--&gt;2(a2 a1)</span><br></pre></td></tr></table></figure><ul><li>判断集合中是否包含指定数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sismember key member</span><br><span class="line">sismember set a2</span><br></pre></td></tr></table></figure><ul><li>随机获取集合中指定数量的数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">srandmember key [count]</span><br><span class="line"></span><br><span class="line">srandmember set</span><br><span class="line">srandmember set 3</span><br></pre></td></tr></table></figure><ul><li>随机获取集合中的某个数据并将该数据移出集合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spop key [count]</span><br><span class="line"></span><br><span class="line">spop set</span><br><span class="line">spop set 2</span><br></pre></td></tr></table></figure><ul><li>求两个集合的交、并、差集</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sinter key1 [key2]</span><br><span class="line">sunion key1 [key2]</span><br><span class="line">sdiff key1 [key2]</span><br><span class="line">交、并、差</span><br><span class="line">sadd set a1 a2 a3</span><br><span class="line">sadd set2 a1 b1 b2 a2</span><br><span class="line">sinter set set2--&gt;a1 a2</span><br><span class="line">sunion set set2--&gt;b2 a1 a2 a3 b1</span><br><span class="line">sdiff set set2--&gt;a3</span><br><span class="line">sdiff set2 set--&gt;b2 b1</span><br></pre></td></tr></table></figure><ul><li>求两个集合的交、并、差集并存储到指定集合中</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sinterstore destination key1 [key2]</span><br><span class="line">sunionstore destination key1 [key2]</span><br><span class="line">sdiffstore destination key1 [key2]</span><br><span class="line">交、并、差集并存储到指定集合中</span><br><span class="line">sadd <span class="built_in">set</span> a1 a2 a3</span><br><span class="line">sadd set2 a1 b1 b2 a2</span><br><span class="line">sinterstore set3 <span class="built_in">set</span> set2--&gt;a1 a2</span><br><span class="line">smembers set3</span><br><span class="line">sunionstore set3 <span class="built_in">set</span> set2--&gt;b2 a1 a2 a3 b1</span><br><span class="line">smembers set3</span><br><span class="line">sdiffstore set3 <span class="built_in">set</span> set2--&gt;a3</span><br><span class="line">smembers set3</span><br><span class="line">sdiffstore set3 set2 <span class="built_in">set</span>--&gt;b2 b1</span><br><span class="line">smembers set3</span><br></pre></td></tr></table></figure><ul><li>将指定数据从原始集合中移动到目标集合中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">smove source destination member</span><br><span class="line"></span><br><span class="line">sadd set a1 a2 a3</span><br><span class="line">sadd set2 a1 b1 b2 a2</span><br><span class="line">smove set2 set b1</span><br><span class="line">smembers set--&gt;a1 a2 a3 b1</span><br></pre></td></tr></table></figure><h3 id="5-3-扩展操作-业务场景"><a href="#5-3-扩展操作-业务场景" class="headerlink" title="5-3.扩展操作-业务场景"></a>5-3.扩展操作-业务场景</h3><h4 id="1-业务场景-1"><a href="#1-业务场景-1" class="headerlink" title="1.业务场景-1"></a>1.业务场景-1</h4><p>每位用户首次使用今日头条时会设置3项爱好的内容，但是后期为了增加用户的活跃度、兴趣点，必须让用户对其他信息类别逐渐产生兴趣，增加客户留存度，如何实现？</p><p><strong>业务分析：</strong></p><ul><li>系统分析出各个分类的最新或最热点信息条目并组织成set集合</li><li>随机挑选其中部分信息</li><li>配合用户关注信息分类中的热点信息组织成展示的全信息集合</li></ul><p><strong>解决方案：</strong>随机获取集合中指定数量的数据，随机获取集合中的某个数据并将该数据移出集合</p><ul><li>redis 应用于随机推荐类信息检索，例如热点歌单推荐，热点新闻推荐，热卖旅游线路，应用APP推荐，大V推荐等</li></ul><h4 id="2-业务场景-2"><a href="#2-业务场景-2" class="headerlink" title="2.业务场景-2"></a>2.业务场景-2</h4><ul><li>脉脉为了促进用户间的交流，保障业务成单率的提升，需要让每位用户拥有大量的好友，事实上职场新人不具有更多的职场好友，如何快速为用户积累更多的好友？</li><li>新浪微博为了增加用户热度，提高用户留存性，需要微博用户在关注更多的人，以此获得更多的信息或热门话题，如何提高用户关注他人的总量？</li><li>QQ新用户入网年龄越来越低，这些用户的朋友圈交际圈非常小，往往集中在一所学校甚至一个班级中，如何帮助用户快速积累好友用户带来更多的活跃度？</li><li>微信公众号是微信信息流通的渠道之一，增加用户关注的公众号成为提高用户活跃度的一种方式，如何帮助用户积累更多关注的公众号？</li><li>美团外卖为了提升成单量，必须帮助用户挖掘美食需求，如何推荐给用户最适合自己的美食？</li></ul><p><strong>解决方案：</strong>求两个集合的交、并、差集、求两个集合的交、并、差集并存储到指定集合中、将指定数据从原始集合中移动到目标集合中</p><p><img src="../../images/rides/2/2-22.png" alt="2-22"></p><p><img src="../../../images/rides/2/2-23.png" alt="2-23"></p><p><strong>解决</strong></p><ul><li>redis 应用于同类信息的关联搜索，二度关联搜索，深度关联搜索</li><li>显示共同关注（一度）</li><li>显示共同好友（一度）</li><li>由用户A出发，获取到好友用户B的好友信息列表（一度）</li><li>由用户A出发，获取到好友用户B的购物清单列表（二度）</li><li>由用户A出发，获取到好友用户B的游戏充值列表（二度）</li></ul><h3 id="5-4-set-类型数据操作的注意事项"><a href="#5-4-set-类型数据操作的注意事项" class="headerlink" title="5-4.set 类型数据操作的注意事项"></a>5-4.set 类型数据操作的注意事项</h3><ul><li>set 类型不允许数据重复，如果添加的数据在 set 中已经存在，将只保留一份</li><li>set 虽然与hash的存储结构相同，但是无法启用hash中存储值的空间</li></ul><h3 id="5-5-set-类型应用场景"><a href="#5-5-set-类型应用场景" class="headerlink" title="5-5.set 类型应用场景"></a>5-5.set 类型应用场景</h3><h4 id="1-业务场景-1-1"><a href="#1-业务场景-1-1" class="headerlink" title="1.业务场景-1"></a>1.业务场景-1</h4><p>集团公司共具有12000名员工，内部OA系统中具有700多个角色，3000多个业务操作，23000多种数据，每<br>位员工具有一个或多个角色，如何快速进行业务操作的权限校验？</p><p><img src="../../../images/rides/2/2-24.png" alt="2-24"></p><p><strong>解决方案：</strong></p><ul><li>依赖set集合数据不重复的特征，依赖set集合hash存储结构特征完成数据过滤与快速查询</li><li>根据用户id获取用户所有角色</li><li>根据用户所有角色获取用户所有操作权限放入set集合</li><li>根据用户所有角色获取用户所有数据全选放入set集合</li><li>redis 应用于同类型不重复数据的合并操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sadd rid:001 getall</span><br><span class="line">sadd rid:001 getById</span><br><span class="line">sadd rid:002 getCount</span><br><span class="line">sadd rid:002 getall</span><br><span class="line">sadd rid:002 insert</span><br><span class="line">sunionstore uid:007 rid:001 rid:002</span><br><span class="line">smembers uid:007</span><br><span class="line">&#x2F;&#x2F;业务校验在数据中处理，不鼓励</span><br><span class="line">sismember uid:007 insert</span><br></pre></td></tr></table></figure><p><strong>校验工作：redis提供基础数据还是提供校验结果？</strong></p><p>一般提供基础数据</p><h4 id="2-业务场景-2-1"><a href="#2-业务场景-2-1" class="headerlink" title="2.业务场景-2"></a>2.业务场景-2</h4><p>公司对旗下新的网站做推广，统计网站的PV（访问量）,UV（独立访客）,IP（独立IP）。<br>PV：网站被访问次数，可通过刷新页面提高访问量<br>UV：网站被不同用户访问的次数，可通过cookie统计访问量，相同用户切换IP地址，UV不变<br>IP：网站被不同IP地址访问的总次数，可通过IP地址统计访问量，相同IP不同用户访问，IP不变</p><p><strong>解决方案：</strong></p><ul><li>利用set集合的数据去重特征，记录各种访问数据</li><li>建立string类型数据，利用incr统计日访问量（PV）</li><li>建立set模型，记录不同cookie数量（UV）</li><li>建立set模型，记录不同IP数量（IP）</li><li>redis 应用于同类型数据的快速去重</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sadd ips 1.2.3.4</span><br><span class="line">sadd ips 2.3.4.5</span><br><span class="line">sadd ips 2.3.4.5</span><br><span class="line">scars ips</span><br></pre></td></tr></table></figure><h4 id="3-业务场景-3"><a href="#3-业务场景-3" class="headerlink" title="3.业务场景-3"></a>3.业务场景-3</h4><p>黑名单：</p><ul><li><p>资讯类信息类网站追求高访问量，但是由于其信息的价值，往往容易被不法分子利用，通过爬虫技术，<br>快速获取信息，个别特种行业网站信息通过爬虫获取分析后，可以转换成商业机密进行出售。例如第三方火<br>车票、机票、酒店刷票代购软件，电商刷评论、刷好评。</p></li><li><p>同时爬虫带来的伪流量也会给经营者带来错觉，产生错误的决策，有效避免网站被爬虫反复爬取成为每<br>个网站都要考虑的基本问题。在基于技术层面区分出爬虫用户后，需要将此类用户进行有效的屏蔽，这就是<br>黑名单的典型应用。</p></li><li><p>ps:不是说爬虫一定做摧毁性的工作，有些小型网站需要爬虫为其带来一些流量。</p></li></ul><p>白名单：</p><ul><li>对于安全性更高的应用访问，仅仅靠黑名单是不能解决安全问题的，此时需要设定可访问的用户群体，</li><li>依赖白名单做更为苛刻的访问验证。</li></ul><p><strong>解决方案：</strong></p><ul><li>基于经营战略设定问题用户发现、鉴别规则</li><li>周期性更新满足规则的用户黑名单，加入set集合</li><li>用户行为信息达到后与黑名单进行比对，确认行为去向</li><li>黑名单过滤IP地址：应用于开放游客访问权限的信息源</li><li>黑名单过滤设备信息：应用于限定访问设备的信息源</li><li>黑名单过滤用户：应用于基于访问权限的信息源</li><li>redis 应用于基于黑名单与白名单设定的服务控制</li></ul><h2 id="6-sorted-set"><a href="#6-sorted-set" class="headerlink" title="6.sorted_set"></a>6.sorted_set</h2><h3 id="6-1-sorted-set-类型"><a href="#6-1-sorted-set-类型" class="headerlink" title="6-1.sorted_set 类型"></a>6-1.sorted_set 类型</h3><ul><li>新的存储需求：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式</li><li>需要的存储结构：新的存储模型，可以保存可排序的数据</li><li>sorted_set类型：在set的存储结构基础上添加可排序字段</li></ul><p>![2-2../../../imagesges/rides/2/2-25.png)</p><h3 id="6-2-sorted-set-类型数据的基本操作"><a href="#6-2-sorted-set-类型数据的基本操作" class="headerlink" title="6-2.sorted_set 类型数据的基本操作"></a>6-2.sorted_set 类型数据的基本操作</h3><ul><li>添加数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zadd key score1 member1 [score2 member2]</span><br><span class="line">zadd sort 50 li 60 li2 80 li3 70 li4 10 li5</span><br></pre></td></tr></table></figure><ul><li>获取全部数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zrange key start stop [WITHSCORES]</span><br><span class="line">zrevrange key start stop [WITHSCORES]</span><br><span class="line"></span><br><span class="line">zrange sort 0 -1</span><br><span class="line">zrange sort 0 -1 withscores</span><br><span class="line">zrevrange sort 0 -1</span><br><span class="line">zrevrange sort 0 -1 withscores</span><br></pre></td></tr></table></figure><p><img src="../../images/rides/2/2-26.png" alt="2-26"></p><ul><li>删除数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrem key member [member ...]</span><br><span class="line">zrem sort li5  --&gt;删除li5 10</span><br></pre></td></tr></table></figure><p>按条件获取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore key min max [WITHSCORES] [LIMIT]</span><br><span class="line">zrevrangebyscore key max min [WITHSCORES]</span><br><span class="line"></span><br><span class="line">zadd sort2 45 wangwu 67 zhangsan 71 zhouqi 92 qianba 99 lisi 100 zhaoliu</span><br><span class="line">zrangebyscore sort2 50 80 withscores</span><br><span class="line">zrangebyscore sort2 50 99 withscores</span><br><span class="line">zrangebyscore sort2 50 99 limit 0 3 withscores</span><br></pre></td></tr></table></figure><p>条件删除数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zremrangebyrank key start stop</span><br><span class="line">zremrangebyscore key min max</span><br><span class="line"></span><br><span class="line">zremrangebyscore sort2 50 70--&gt;按排序来</span><br><span class="line">zremrangebyrank sort2 0 1--&gt;删除第一个和第二个，索引</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>min与max用于限定搜索查询的条件</li><li>start与stop用于限定查询范围，作用于索引，表示开始和结束索引</li><li>offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量</li></ul><p>获取集合数据总量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zcard key</span><br><span class="line">zcount key min max</span><br><span class="line"></span><br><span class="line">zcard sort --&gt;5</span><br><span class="line">zcount sort 50 60 --&gt;2</span><br></pre></td></tr></table></figure><p>集合交、并操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">zinterstore destination numkeys key [key ...]  [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]</span><br><span class="line">zunionstore destination numkeys key [key ...]  [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]</span><br><span class="line"></span><br><span class="line">zadd s1 50 aa 60 bb 70 cc</span><br><span class="line">zadd s2 60 aa 40 bb 90 dd</span><br><span class="line">zadd s3 70 aa 20 bb 100 dd</span><br><span class="line"></span><br><span class="line">zinterstore ss 3 s1 s2 s3--&gt;将加起来（AGGREGATE SUM）</span><br><span class="line">zrange ss 0 -1 withscores--&gt;120 bb 180 aa</span><br><span class="line"></span><br><span class="line">zinterstore ss 3 s1 s2 s3 aggregate max</span><br><span class="line">zrange ss 0 -1 withscores--&gt;60 bb 70 aa</span><br></pre></td></tr></table></figure><p>获取数据对应的索引（排名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zrank key member</span><br><span class="line">zrevrank key member</span><br><span class="line"></span><br><span class="line">zadd movies 143 aa 97 bb 201 cc</span><br><span class="line">zrank movies bb--&gt;索引 0，排序</span><br><span class="line">zrevrank moviesbb--&gt;索引 2,反向排序</span><br></pre></td></tr></table></figure><p>score值获取与修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zscore key member</span><br><span class="line">zincrby key increment member</span><br><span class="line"></span><br><span class="line">zscore movies aa</span><br><span class="line">zincrby movies 1 aa--&gt;144,加1</span><br></pre></td></tr></table></figure><p>获取当前系统时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time--&gt;秒，更小的时间单位</span><br></pre></td></tr></table></figure><h3 id="6-3-sorted-set-类型数据的扩展操作"><a href="#6-3-sorted-set-类型数据的扩展操作" class="headerlink" title="6-3.sorted_set 类型数据的扩展操作"></a>6-3.sorted_set 类型数据的扩展操作</h3><p>业务场景：</p><ul><li>票选广东十大杰出青年，各类综艺选秀海选投票</li><li>各类资源网站TOP10（电影，歌曲，文档，电商，游戏等）</li><li>聊天室活跃度统计</li><li>游戏好友亲密度</li></ul><p>业务分析：</p><ul><li>为所有参与排名的资源建立排序依据</li></ul><p>解决方案：</p><ul><li>获取数据对应的索引（排名）、score值获取与修改</li><li>redis 应用于计数器组合排序功能对应的排名</li></ul><h3 id="6-4-sorted-set-类型数据操作的注意事项"><a href="#6-4-sorted-set-类型数据操作的注意事项" class="headerlink" title="6-4.sorted_set 类型数据操作的注意事项"></a>6-4.sorted_set 类型数据操作的注意事项</h3><ul><li>score保存的数据存储空间是64位，如果是整数范围是-9007199254740992~9007199254740992</li><li>score保存的数据也可以是一个双精度的double值，基于双精度浮点数的特征，可能会丢失精度，使用时候要慎重</li><li>sorted_set 底层存储还是基于set结构的，因此数据不能重复，如果重复添加相同的数据，score值将被反复覆盖，保留最后一次修改的结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd test 11 aa</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange test 0 -1 withscores</span><br><span class="line">1) &quot;aa&quot;</span><br><span class="line">2) &quot;11&quot;</span><br><span class="line">127.0.0.1:6379&gt; zadd test 22 aa</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt;  zrange test 0 -1 withscores</span><br><span class="line">1) &quot;aa&quot;</span><br><span class="line">2) &quot;22&quot;</span><br><span class="line">127.0.0.1:6379&gt; zadd test 33 aa</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt;  zrange test 0 -1 withscores</span><br><span class="line">1) &quot;aa&quot;</span><br><span class="line">2) &quot;33&quot;</span><br></pre></td></tr></table></figure><h3 id="6-5-sorted-set-类型应用场景"><a href="#6-5-sorted-set-类型应用场景" class="headerlink" title="6-5.sorted_set 类型应用场景"></a>6-5.sorted_set 类型应用场景</h3><h4 id="1-业务场景-1-2"><a href="#1-业务场景-1-2" class="headerlink" title="1.业务场景-1"></a>1.业务场景-1</h4><p>​    基础服务+增值服务类网站会设定各位会员的试用，让用户充分体验会员优势。例如观影试用VIP、游戏VIP体验、云盘下载体验VIP、数据查看体验VIP。当VIP体验到期后，如果有效管理此类信息。即便对于正式VIP用户也存在对应的管理方式。</p><p>​    网站会定期开启投票、讨论，限时进行，逾期作废。如何有效管理此类过期信息。</p><p><strong>解决方案：</strong></p><ul><li>对于基于时间线限定的任务处理，将处理时间记录为score值，利用排序功能区分处理的先后顺序</li><li>记录下一个要处理的时间，当到期后处理对应任务，移除redis中的记录，并记录下一个要处理的时间</li><li>当新任务加入时，判定并更新当前下一个要处理的任务时间</li><li>为提升sorted_set的性能，通常将任务根据特征存储成若干个sorted_set。例如1小时内，1天内，周内，月内，季内，年度等，操作时逐级提升，将即将操作的若干个任务纳入到1小时内处理的队列中</li><li>redis 应用于定时任务执行顺序管理或任务过期管理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zadd ts 1509802345 uid:001</span><br><span class="line">zadd ts 1509802390 uid:007</span><br><span class="line">zadd ts 1509802484 uid:888</span><br><span class="line">zrange ts 0 -1 withscores</span><br></pre></td></tr></table></figure><h4 id="2-业务场景-2-2"><a href="#2-业务场景-2-2" class="headerlink" title="2.业务场景-2"></a>2.业务场景-2</h4><p>任务/消息权重设定应用：</p><p>​    当任务或者消息待处理，形成了任务队列或消息队列时，对于高优先级的任务要保障对其优先处理，如何实现任务权重管理。</p><p><strong>解决方案：</strong></p><ul><li>对于带有权重的任务，优先处理权重高的任务，采用score记录权重即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zadd tasks 4 order:id:005</span><br><span class="line">zadd tasks 1 order:id:425</span><br><span class="line">zadd tasks 9 order:id:345</span><br><span class="line">zrevrange tasks 0 -1 withscores</span><br><span class="line">zrevrange tasks 0 0</span><br><span class="line">zrem tasks order:id:345</span><br><span class="line">zrevrange tasks 0 -1 withscores</span><br></pre></td></tr></table></figure><p>多条件任务权重设定</p><p>​    如果权重条件过多时，需要对排序score值进行处理，保障score值能够兼容2条件或者多条件，例如外贸订单优先于国内订单，总裁订单优先于员工订单，经理订单优先于员工订单</p><ul><li>因score长度受限，需要对数据进行截断处理，尤其是时间设置为小时或分钟级即可（折算后）</li><li>先设定订单类别，后设定订单发起角色类别，整体score长度必须是统一的，不足位补0。第一排序规则首位不得是0<ul><li>例如外贸101，国内102，经理004，员工008。</li><li>员工下的外贸单score值为101008（优先）</li><li>经理下的国内单score值为102004</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zadd tt 203005 order:id:1</span><br><span class="line">zadd tt 101008 order:id:2</span><br><span class="line">zadd tasks 9 order:id:345</span><br><span class="line">zrevrange tt 0 -1 withscores</span><br><span class="line">越小越优先</span><br><span class="line">zrange tt 0 -1</span><br><span class="line">zadd ts 14 order:id:3单号1+岗位号4</span><br><span class="line">zadd ts 1332 order:id:4单号13+岗位号32</span><br><span class="line">排序错了，定义好长度，改为0104</span><br></pre></td></tr></table></figure><h2 id="7-数据类型实践案例"><a href="#7-数据类型实践案例" class="headerlink" title="7.数据类型实践案例"></a>7.数据类型实践案例</h2><h3 id="7-1-业务场景-1"><a href="#7-1-业务场景-1" class="headerlink" title="7-1.业务场景-1"></a>7-1.业务场景-1</h3><p>​    人工智能领域的语义识别与自动对话将是未来服务业机器人应答呼叫体系中的重要技术，百度自研用户评价语义识别服务，免费开放给企业试用，同时训练百度自己的模型。现对试用用户的使用行为进行限速，限制每个用户每分钟最多发起10次调用</p><p><img src="../../images/rides/2/2-27.png" alt="2-27"></p><p><strong>解决方案：</strong></p><ul><li><p>设计计数器，记录调用次数，用于控制业务执行次数。以用户id作为key，使用次数作为value</p></li><li><p>在调用前获取次数，判断是否超过限定次数</p><ul><li><p>不超过次数的情况下，每次调用计数+1</p></li><li><p>业务调用失败，计数-1</p></li></ul></li><li><p>为计数器设置生命周期为指定周期，例如1秒/分钟，自动清空周期内使用次数</p></li></ul><p><img src="../../images/rides/2/2-28.png" alt="2-28"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">get 415</span><br><span class="line">setex 415 60 1</span><br><span class="line">get 415</span><br><span class="line">incr 415</span><br><span class="line">get 415</span><br><span class="line">incr 415</span><br><span class="line">...--&gt;incrby  415 7</span><br><span class="line">get 415</span><br><span class="line">get 415</span><br><span class="line">get 415</span><br><span class="line">&#x2F;&#x2F;过时间清空</span><br><span class="line">setex 415 60 1</span><br></pre></td></tr></table></figure><p><strong>解决方案改良</strong></p><p><img src="../../images/rides/2/2-29.png" alt="2-29"></p><ul><li>取消最大值的判定，利用incr操作超过最大值抛出异常的形式替代每次判断是否大于最大值</li><li>判断是否为nil，<ul><li>如果是，设置为Max-次数</li><li>如果不是，计数+1</li><li>业务调用失败，计数-1</li></ul></li><li>遇到异常即+操作超过上限，视为使用达到上限</li></ul><p><img src="../../images/rides/2/2-30.png" alt="2-30"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">get 415</span><br><span class="line">setex 415 60 9223372036854775797</span><br><span class="line">get 415</span><br><span class="line">incr 415</span><br><span class="line">get 415</span><br><span class="line">incr 415</span><br><span class="line">incr 415</span><br><span class="line">incr 415</span><br><span class="line">incr 415</span><br><span class="line">incr 415</span><br><span class="line">incr 415</span><br><span class="line">incr 415</span><br><span class="line">incr 415</span><br><span class="line">incr 415</span><br><span class="line">incr 415</span><br><span class="line">--&gt;9223372036854775807</span><br><span class="line"></span><br><span class="line">incr 415</span><br><span class="line">爆了，利用数据上限</span><br></pre></td></tr></table></figure><ul><li>redis 应用于限时按次结算的服务控制</li></ul><h3 id="7-2-业务场景-2"><a href="#7-2-业务场景-2" class="headerlink" title="7-2.业务场景-2"></a>7-2.业务场景-2</h3><p>​    使用微信的过程中，当微信接收消息后，会默认将最近接收的消息置顶，当多个好友及关注的订阅号同时发送消息时，该排序会不停的进行交替。同时还可以将重要的会话设置为置顶。一旦用户离线后，再次打开微信时，消息该按照什么样的顺序显示？</p><p><img src="../../images/rides/2/2-31.png" alt="2-31"></p><p><img src="../../images/rides/2/2-32.png" alt="2-32"></p><p><img src="../../images/rides/2/2-33.png" alt="2-33"></p><p><img src="../../images/rides/2/2-34.png" alt="2-34"></p><p><strong>解决方案</strong></p><ul><li>依赖list的数据具有顺序的特征对消息进行管理，将list结构作为栈使用</li><li>对置顶与普通会话分别创建独立的list分别管理</li><li>当某个list中接收到用户消息后，将消息发送方的id从list的一侧加入list（此处设定左侧）</li><li>多个相同id发出的消息反复入栈会出现问题，在入栈之前无论是否具有当id对应的消息，先删除对应id</li><li>推送消息时先推送置顶会话list，再推送普通会话list，推送完成的list清除所有数据</li><li>消息的数量，也就是微信用户对话数量采用计数器的思想另行记录，伴随list操作同步更新</li><li>redis 应用于基于时间顺序的数据操作，而不关注具体时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lrem 100 1 200--&gt;0,失败</span><br><span class="line">lpush 100 200</span><br><span class="line">lrem 100 1 300--&gt;0,失败</span><br><span class="line">lpush 100 300</span><br><span class="line">lrem 100 1 400--&gt;0,失败</span><br><span class="line">lpush 100 400</span><br><span class="line">lrem 100 1 200--&gt;1,成功</span><br><span class="line">lpush 100 200</span><br><span class="line">lrem 100 1 300--&gt;1,成功</span><br><span class="line">lpush 100 300</span><br><span class="line">lrange 100 0 -1</span><br><span class="line">--&gt;300 200 400</span><br></pre></td></tr></table></figure><h2 id="8-解决方案列表"><a href="#8-解决方案列表" class="headerlink" title="8.解决方案列表"></a>8.解决方案列表</h2><ul><li>Tips 1：redis用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性</li><li>Tips 2：redis 控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</li><li>Tips 3：redis应用于各种结构型和非结构型高热度数据访问加速</li><li>Tips 4：redis 应用于购物车数据存储设计</li><li>Tips 5：redis 应用于抢购，限购类、限量发放优惠卷、激活码等业务的数据存储设计</li><li>Tips 6：redis 应用于具有操作先后顺序的数据控制</li><li>Tips 7：redis 应用于最新消息展示</li><li>Tips 8：redis 应用于随机推荐类信息检索，例如热点歌单推荐，热点新闻推荐，热卖旅游线路，应用APP推荐，大V推荐等</li><li>Tips 9：redis 应用于同类信息的关联搜索，二度关联搜索，深度关联搜索</li><li>Tips 10：redis 应用于同类型不重复数据的合并、取交集操作</li><li>Tips 11：redis 应用于同类型数据的快速去重</li><li>Tips 12：redis 应用于基于黑名单与白名单设定的服务控制</li><li>Tips 13：redis 应用于计数器组合排序功能对应的排名</li><li>Tips 14：redis 应用于定时任务执行顺序管理或任务过期管理</li><li>Tips 15：redis 应用于及时任务/消息队列执行管理</li><li>Tips 16：redis 应用于按次结算的服务控制</li><li>Tips 17：redis 应用于基于时间顺序的数据操作，而不关注具体时间</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rides的学习与使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="rides" scheme="https://linhuide.github.io/tags/rides/"/>
    
      <category term="JAVA" scheme="https://linhuide.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>mysql高级使用2</title>
    <link href="https://linhuide.github.io/post/ae8fce6d.html"/>
    <id>https://linhuide.github.io/post/ae8fce6d.html</id>
    <published>2020-04-07T05:07:58.000Z</published>
    <updated>2020-04-19T11:48:07.459Z</updated>
    
    <content type="html"><![CDATA[<p>mysql高级使用-存储引擎-优化SQL-索引的使用-SQL的优化</p><a id="more"></a><h1 id="1-Mysql的体系结构概览"><a href="#1-Mysql的体系结构概览" class="headerlink" title="1. Mysql的体系结构概览"></a>1. Mysql的体系结构概览</h1><p> <img src="../../images/mysql/2/2-1.jpg" alt="2-1"></p><p>整个MySQL Server由以下组成</p><ul><li>Connection Pool : 连接池组件</li><li>Management Services &amp; Utilities : 管理服务和工具组件</li><li>SQL Interface : SQL接口组件</li><li>Parser : 查询分析器组件</li><li>Optimizer : 优化器组件</li><li>Caches &amp; Buffers : 缓冲池组件</li><li>Pluggable Storage Engines : 存储引擎</li><li>File System : 文件系统</li></ul><ol><li><p>连接层</p><p>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p></li><li><p>服务层</p><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p></li><li><p>引擎层</p><p>存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。</p></li><li><p>存储层</p><p>数据存储层， 主要是将数据存储在文件系统之上，并完成与存储引擎的交互。</p></li></ol><p>​    和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p><h1 id="2-存储引擎"><a href="#2-存储引擎" class="headerlink" title="2. 存储引擎"></a>2. 存储引擎</h1><h2 id="2-1-存储引擎概述"><a href="#2-1-存储引擎概述" class="headerlink" title="2.1 存储引擎概述"></a>2.1 存储引擎概述</h2><ul><li>和大多数的数据库不同, MySQL中有一个存储引擎的概念, 针对不同的存储需求可以选择最优的存储引擎。</li><li>存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式 。存储引擎是基于表的，而不是基于库的。所以存储引擎也可被称为表类型。</li><li>Oracle，SqlServer等数据库只有一种存储引擎。MySQL提供了插件式的存储引擎架构。所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。</li><li>MySQL5.0支持的存储引擎包含 ： InnoDB 、MyISAM 、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中InnoDB和BDB提供事务安全表，其他存储引擎是非事务安全表。</li></ul><p>可以通过指定 show engines ， 来查询当前数据库支持的存储引擎 ： </p><p><img src="../../images/mysql/2/2-2.png" alt="2-2"></p><p>创建新表时如果不指定存储引擎，那么系统就会使用默认的存储引擎，MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为了InnoDB。</p><p>查看Mysql数据库默认的存储引擎 ， 指令 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%storage_engine%&#39;;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-3.png" alt="2-3"></p><h2 id="2-2-各种存储引擎特性"><a href="#2-2-各种存储引擎特性" class="headerlink" title="2.2 各种存储引擎特性"></a>2.2 各种存储引擎特性</h2><p>下面重点介绍几种常用的存储引擎， 并对比各个存储引擎之间的区别， 如下表所示 ： </p><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>MEMORY</th><th>MERGE</th><th>NDB</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td><td>没有</td><td>有</td></tr><tr><td>事务安全</td><td>==支持==</td><td></td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>==行锁(适合高并发)==</td><td>==表锁==</td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持(5.6版本之后)</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>数据索引</td><td>支持</td><td></td><td>支持</td><td></td><td>支持</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td>支持</td><td></td><td></td><td></td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td><td>低</td><td>低</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td><td>低</td><td>高</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>==支持==</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>下面我们将重点介绍最长使用的两种存储引擎： InnoDB、MyISAM ， 另外两种 MEMORY、MERGE ， 了解即可。</p><h3 id="2-2-1-InnoDB"><a href="#2-2-1-InnoDB" class="headerlink" title="2.2.1 InnoDB"></a>2.2.1 InnoDB</h3><p>​    InnoDB存储引擎是Mysql的默认存储引擎。InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引。</p><p>InnoDB存储引擎不同于其他存储引擎的特点 ： </p><h4 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table goods_innodb(</span><br><span class="line">id int NOT NULL AUTO_INCREMENT,</span><br><span class="line">name varchar(20) NOT NULL,</span><br><span class="line">    primary key(id)</span><br><span class="line">)ENGINE&#x3D;innodb DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">start transaction;</span><br><span class="line">insert into goods_innodb(id,name)values(null,&#39;Meta20&#39;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-4.png" alt="2-4"></p><p>测试，发现在InnoDB中是存在事务的 ；</p><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>​    MySQL支持外键的存储引擎只有InnoDB ， 在创建外键的时候， 要求父表必须有对应的索引 ， 子表在创建外键的时候， 也会自动的创建对应的索引。</p><p>​    下面两张表中 ， country_innodb是父表 ， country_id为主键索引，city_innodb表是子表，country_id字段为外键，对应于country_innodb表的主键country_id 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> country_innodb(</span><br><span class="line">country_id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    country_name <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(country_id)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> city_innodb(</span><br><span class="line">city_id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    city_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    country_id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(city_id),</span><br><span class="line">    <span class="keyword">key</span> idx_fk_country_id(country_id),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="string">`fk_city_country`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(country_id) <span class="keyword">REFERENCES</span> country_innodb(country_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> country_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'China'</span>),(<span class="literal">null</span>,<span class="string">'America'</span>),(<span class="literal">null</span>,<span class="string">'Japan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Xian'</span>,<span class="number">1</span>),(<span class="literal">null</span>,<span class="string">'NewYork'</span>,<span class="number">2</span>),(<span class="literal">null</span>,<span class="string">'BeiJing'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">ON <span class="keyword">DELETE</span> RESTRICT：删除主表数据时，如果有关联记录，不删除</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>：更新主表时，如果子表有关联记录，更新子表记录</span><br></pre></td></tr></table></figure><ul><li>在创建索引时， 可以指定在删除、更新父表时，对子表进行的相应操作，包括 RESTRICT、CASCADE、SET NULL 和 NO ACTION。</li><li>RESTRICT和NO ACTION相同， 是指限制在子表有关联记录的情况下， 父表不能更新；</li><li>CASCADE表示父表在更新或者删除时，更新或者删除子表对应的记录；</li><li>SET NULL 则表示父表在更新或者删除的时候，子表的对应字段被SET NULL 。</li></ul><p>​    针对上面创建的两个表， 子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。</p><p>表中数据如下图所示 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city_innodb;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> country_innodb;</span><br></pre></td></tr></table></figure><p> <img src="../../images/mysql/2/2-6.png" alt="2-6"></p><h4 id="外键信息可以使用如下两种方式查看-："><a href="#外键信息可以使用如下两种方式查看-：" class="headerlink" title="外键信息可以使用如下两种方式查看 ："></a>外键信息可以使用如下两种方式<strong>查看</strong> ：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table city_innodb;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-7.png" alt="2-7"></p><h4 id="删除country-id为1-的country数据："><a href="#删除country-id为1-的country数据：" class="headerlink" title="删除country_id为1 的country数据："></a>删除country_id为1 的country数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from country_innodb where country_id &#x3D; 1;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-8.png" alt="2-8"></p><h4 id="更新主表country表的字段-country-id"><a href="#更新主表country表的字段-country-id" class="headerlink" title="更新主表country表的字段 country_id :"></a>更新主表country表的字段 country_id :</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update country_innodb set country_id &#x3D; 100 where country_id &#x3D; 1;</span><br></pre></td></tr></table></figure><p>更新后， 子表的数据信息为 ： </p><p><img src="../../images/mysql/2/2-9.png" alt="2-9"></p><h4 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h4><p>InnoDB 存储表和索引有以下两种方式 ： </p><ul><li>使用共享表空间存储， 这种方式创建的表的表结构保存在.frm文件中， 数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。</li><li>使用多表空间存储， 这种方式创建的表的表结构仍然存在 .frm 文件中，但是每个表的数据和索引单独保存在 .ibd 中。 </li></ul><h3 id="2-2-2-MyISAM"><a href="#2-2-2-MyISAM" class="headerlink" title="2.2.2 MyISAM"></a>2.2.2 MyISAM</h3><p>​    MyISAM 不支持事务、也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表 。有以下两个比较重要的特点： </p><h4 id="不支持事务"><a href="#不支持事务" class="headerlink" title="不支持事务"></a>不支持事务</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_myisam(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=myisam <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>通过测试，我们发现，在MyISAM存储引擎中，是没有事务控制的 ；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods_myisam(<span class="keyword">id</span>,<span class="keyword">name</span>)<span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Meta20'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> goods_myisam;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-10.png" alt="2-10"></p><h4 id="文件存储方式"><a href="#文件存储方式" class="headerlink" title="文件存储方式"></a>文件存储方式</h4><p>每个MyISAM在磁盘上存储成3个文件，其文件名都和表名相同，但拓展名分别是 ： </p><ul><li>.frm (存储表定义)；</li><li>.MYD(MYData , 存储数据)；</li><li>.MYI(MYIndex , 存储索引)；</li></ul><h3 id="2-2-3-MEMORY"><a href="#2-2-3-MEMORY" class="headerlink" title="2.2.3 MEMORY"></a>2.2.3 MEMORY</h3><p>​    Memory存储引擎将表的数据存放在内存中。每个MEMORY表实际对应一个磁盘文件，格式是.frm ，该文件中只存储表的结构，而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY 类型的表访问非常地快，因为他的数据是存放在内存中的，并且默认使用HASH索引 ， 但是服务一旦关闭，表中的数据就会丢失。</p><h3 id="2-2-4-MERGE"><a href="#2-2-4-MERGE" class="headerlink" title="2.2.4 MERGE"></a>2.2.4 MERGE</h3><p>​    MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身并没有存储数据，对MERGE类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行的。</p><p>​    对于MERGE类型表的插入操作，是通过INSERT_METHOD子句定义插入的表，可以有3个不同的值，使用FIRST 或 LAST 值使得插入操作被相应地作用在第一或者最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作。</p><p>​    可以对MERGE表进行DROP操作，但是这个操作只是删除MERGE表的定义，对内部的表是没有任何影响的。</p><p><img src="../../images/mysql/2/2-11.png" alt="2-11"></p><p>下面是一个创建和使用MERGE表的示例 ： </p><ul><li>创建3个测试表 order_1990, order_1991, order_all , 其中order_all是前两个表的MERGE表 ： </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_1990(</span><br><span class="line">order_id <span class="built_in">int</span> ,</span><br><span class="line">order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">order_address <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">primary <span class="keyword">key</span> (order_id)</span><br><span class="line">)<span class="keyword">engine</span> = myisam <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_1991(</span><br><span class="line">order_id <span class="built_in">int</span> ,</span><br><span class="line">order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">order_address <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">primary <span class="keyword">key</span> (order_id)</span><br><span class="line">)<span class="keyword">engine</span> = myisam <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_all(</span><br><span class="line">order_id <span class="built_in">int</span> ,</span><br><span class="line">order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">order_address <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">primary <span class="keyword">key</span> (order_id)</span><br><span class="line">)<span class="keyword">engine</span> = <span class="keyword">merge</span> <span class="keyword">union</span> = (order_1990,order_1991) INSERT_METHOD=<span class="keyword">LAST</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><ul><li>分别向两张表中插入记录 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100.0</span>,<span class="string">'北京'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">100.0</span>,<span class="string">'上海'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">10</span>,<span class="number">200.0</span>,<span class="string">'北京'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">200.0</span>,<span class="string">'上海'</span>);</span><br></pre></td></tr></table></figure><ul><li>查询3张表中的数据。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_1990;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_1991;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> order_all;</span><br></pre></td></tr></table></figure><p>order_1990中的数据、order_1991中的数据、 order_all中的数据 ：</p><p><img src="../../images/mysql/2/2-12.png" alt="2-12"></p><ul><li>往order_all中插入一条记录 ，由于在MERGE表定义时，INSERT_METHOD 选择的是LAST，那么插入的数据会想最后一张表中插入。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_all <span class="keyword">values</span>(<span class="number">100</span>,<span class="number">10000.0</span>,<span class="string">'西安'</span>);</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-13.png" alt="2-13"></p><h2 id="2-3-存储引擎的选择"><a href="#2-3-存储引擎的选择" class="headerlink" title="2.3 存储引擎的选择"></a>2.3 存储引擎的选择</h2><p>​    在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。以下是几种常用的存储引擎的使用环境。</p><ul><li>InnoDB : 是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询意外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定， 还可以确保事务的完整提交和回滚，对于类似于计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择。</li><li>MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。</li><li>MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善MERGE表的访问效率。这对于存储诸如数据仓储等VLDB环境十分合适。</li></ul><h1 id="3-优化SQL步骤"><a href="#3-优化SQL步骤" class="headerlink" title="3. 优化SQL步骤"></a>3. 优化SQL步骤</h1><ul><li>在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要对它们进行优化，本章将详细介绍在 MySQL 中优化 SQL 语句的方法。</li><li>当面对一个有 SQL 性能问题的数据库时，我们应该从何处入手来进行系统的分析，使得能够尽快定位问题 SQL 并尽快解决问题。</li></ul><h2 id="3-1-查看SQL执行频率"><a href="#3-1-查看SQL执行频率" class="headerlink" title="3.1 查看SQL执行频率"></a>3.1 查看SQL执行频率</h2><ul><li>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。</li><li>show [session|global] status 可以根据需要加上参数“session”或者“global”来显示 session 级（当前连接）的计结果和 global 级（自数据库上次启动至今）的统计结果。</li><li>如果不写，默认使用参数是“session”。</li></ul><p>下面的命令显示了当前 session 中所有统计参数的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show status like &#39;Com_______&#39;;</span><br><span class="line">&#x2F;&#x2F;查询全部</span><br><span class="line">show global status like &#39;Com_______&#39;;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-14.png" alt="2-14"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &#39;Innodb_rows_%&#39;;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-15.png" alt="2-15"></p><p>Com_xxx 表示每个 xxx 语句执行的次数，我们通常比较关心的是以下几个统计参数。</p><table><thead><tr><th align="left">参数</th><th>含义</th></tr></thead><tbody><tr><td align="left">Com_select</td><td>执行 select 操作的次数，一次查询只累加 1。</td></tr><tr><td align="left">Com_insert</td><td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</td></tr><tr><td align="left">Com_update</td><td>执行 UPDATE 操作的次数。</td></tr><tr><td align="left">Com_delete</td><td>执行 DELETE 操作的次数。</td></tr><tr><td align="left">Innodb_rows_read</td><td>select 查询返回的行数。</td></tr><tr><td align="left">Innodb_rows_inserted</td><td>执行 INSERT 操作插入的行数。</td></tr><tr><td align="left">Innodb_rows_updated</td><td>执行 UPDATE 操作更新的行数。</td></tr><tr><td align="left">Innodb_rows_deleted</td><td>执行 DELETE 操作删除的行数。</td></tr><tr><td align="left">Connections</td><td>试图连接 MySQL 服务器的次数。</td></tr><tr><td align="left">Uptime</td><td>服务器工作时间。</td></tr><tr><td align="left">Slow_queries</td><td>慢查询的次数。</td></tr></tbody></table><ul><li>Com_***      :  这些参数对于所有存储引擎的表操作都会进行累计。_</li><li>Innodb_*** :  这几个参数只是针对InnoDB 存储引擎的，累加的算法也略有不同。</li></ul><h2 id="3-2-定位低效率执行SQL"><a href="#3-2-定位低效率执行SQL" class="headerlink" title="3.2 定位低效率执行SQL"></a>3.2 定位低效率执行SQL</h2><p>可以通过以下两种方式定位执行效率较低的 SQL 语句。</p><ul><li>慢查询日志 : 通过慢查询日志定位那些执行效率较低的 SQL 语句，用–log-slow-queries[=file_name]选项启动时，mysqld 写一个包含所有执行时间超过 long_query_time 秒的 SQL 语句的日志文件。具体可以查看本书第 26 章中日志管理的相关部分。</li><li>show processlist  : 慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</li></ul><p><img src="../../images/mysql/2/2-5.png" alt="2-5"></p><ul><li>id列，用户登录mysql时，系统分配的”connection_id”，可以使用函数connection_id()查看</li><li>user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句</li><li>host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户</li><li>db列，显示这个进程目前连接的是哪个数据库</li><li>command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等</li><li>time列，显示这个状态持续的时间，单位是秒</li><li>state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成</li><li>info列，显示这个sql语句，是判断问题语句的一个重要依据</li></ul><h2 id="3-3-explain分析执行计划"><a href="#3-3-explain分析执行计划" class="headerlink" title="3.3 explain分析执行计划"></a>3.3 explain分析执行计划</h2><p>通过以上步骤查询到效率低的 SQL 语句后，可以通过 EXPLAIN或者 DESC命令获取 MySQL如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。</p><p>查询SQL语句的执行计划 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-19.png" alt="2-19"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title = <span class="string">'阿尔卡特 (OT-979) 冰川白 联通3G手机3'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-20.png" alt="2-20"></p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等</td></tr><tr><td>table</td><td>输出结果集的表</td></tr><tr><td>type</td><td>表示表的连接类型，性能由好到差的连接类型为( system  —&gt;  const  —–&gt;  eq_ref  ——&gt;  ref  ——-&gt;  ref_or_null—-&gt;  index_merge  —&gt;  index_subquery  —–&gt;  range  —–&gt;  index  ——&gt; all )</td></tr><tr><td>possible_keys</td><td>表示查询时，可能使用的索引</td></tr><tr><td>key</td><td>表示实际使用的索引</td></tr><tr><td>key_len</td><td>索引字段的长度</td></tr><tr><td>rows</td><td>扫描行的数量</td></tr><tr><td>extra</td><td>执行情况的说明和描述</td></tr></tbody></table><h3 id="3-3-1-环境准备"><a href="#3-3-1-环境准备" class="headerlink" title="3.3.1 环境准备"></a>3.3.1 环境准备</h3><p><img src="../../images/mysql/2/2-21.png" alt="2-21"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role_code`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_role_name`</span> (<span class="string">`role_name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_user_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment ,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_ur_user_id`</span> (<span class="string">`user_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fk_ur_role_id`</span> (<span class="string">`role_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_ur_role_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`role_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fk_ur_user_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`user_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">'1'</span>,<span class="string">'super'</span>,<span class="string">'$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe'</span>,<span class="string">'超级管理员'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">'2'</span>,<span class="string">'admin'</span>,<span class="string">'$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe'</span>,<span class="string">'系统管理员'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">'3'</span>,<span class="string">'itcast'</span>,<span class="string">'$2a$10$8qmaHgUFUAmPR5pOuWhYWOr291WJYjHelUlYn07k5ELF8ZCrW0Cui'</span>,<span class="string">'test02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">'4'</span>,<span class="string">'stu1'</span>,<span class="string">'$2a$10$pLtt2KDAFpwTWLjNsmTEi.oU1yOZyIn9XkziK/y/spH5rftCpUMZa'</span>,<span class="string">'学生1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">'5'</span>,<span class="string">'stu2'</span>,<span class="string">'$2a$10$nxPKkYSez7uz2YQYUnwhR.z57km3yqKn3Hr/p1FR6ZKgc18u.Tvqm'</span>,<span class="string">'学生2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`t_user`</span> (<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="string">'6'</span>,<span class="string">'t1'</span>,<span class="string">'$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe'</span>,<span class="string">'老师1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">'5'</span>,<span class="string">'学生'</span>,<span class="string">'student'</span>,<span class="string">'学生'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">'7'</span>,<span class="string">'老师'</span>,<span class="string">'teacher'</span>,<span class="string">'老师'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">'8'</span>,<span class="string">'教学管理员'</span>,<span class="string">'teachmanager'</span>,<span class="string">'教学管理员'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">'9'</span>,<span class="string">'管理员'</span>,<span class="string">'admin'</span>,<span class="string">'管理员'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_role`</span> (<span class="string">`id`</span>, <span class="string">`role_name`</span>, <span class="string">`role_code`</span>, <span class="string">`description`</span>) <span class="keyword">VALUES</span>(<span class="string">'10'</span>,<span class="string">'超级管理员'</span>,<span class="string">'super'</span>,<span class="string">'超级管理员'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_role(<span class="keyword">id</span>,user_id,role_id) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">'1'</span>, <span class="string">'5'</span>),(<span class="literal">NULL</span>, <span class="string">'1'</span>, <span class="string">'7'</span>),(<span class="literal">NULL</span>, <span class="string">'2'</span>, <span class="string">'8'</span>),(<span class="literal">NULL</span>, <span class="string">'3'</span>, <span class="string">'9'</span>),(<span class="literal">NULL</span>, <span class="string">'4'</span>, <span class="string">'8'</span>),(<span class="literal">NULL</span>, <span class="string">'5'</span>, <span class="string">'10'</span>) ;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-explain-之-id"><a href="#3-3-2-explain-之-id" class="headerlink" title="3.3.2 explain 之 id"></a>3.3.2 explain 之 id</h3><p>id 字段是 select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。id 情况有三种 ： </p><ol><li>id 相同表示加载表的顺序是从上到下。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_role r, t_user u, user_role ur <span class="keyword">where</span> r.id = ur.role_id <span class="keyword">and</span> u.id = ur.user_id ;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-22.png" alt="2-22"></p><ol start="2"><li>id 不同id值越大，优先级越高，越先被执行。 </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role <span class="keyword">WHERE</span> <span class="keyword">id</span> = (<span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> user_role <span class="keyword">WHERE</span> user_id = (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username = <span class="string">'stu1'</span>));</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-23.png" alt="2-23"></p><ol start="3"><li>id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role r , (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_role ur <span class="keyword">WHERE</span> ur.<span class="string">`user_id`</span> = <span class="string">'2'</span>) a <span class="keyword">WHERE</span> r.id = a.role_id ;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-24.png" alt="2-24"></p><h3 id="3-3-3-explain-之-select-type"><a href="#3-3-3-explain-之-select-type" class="headerlink" title="3.3.3 explain 之 select_type"></a>3.3.3 explain 之 select_type</h3><p> 表示 SELECT 的类型，常见的取值，如下表所示：</p><table><thead><tr><th>select_type</th><th>含义</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单的select查询，查询中不包含子查询或者UNION</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子查询，最外层查询标记为该标识</td></tr><tr><td>SUBQUERY</td><td>在SELECT 或 WHERE 列表中包含了子查询</td></tr><tr><td>DERIVED</td><td>在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中</td></tr><tr><td>UNION</td><td>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED</td></tr><tr><td>UNION RESULT</td><td>从UNION表获取结果的SELECT</td></tr></tbody></table><p><img src="../../images/mysql/2/2-16.png" alt="2-16"></p><h3 id="3-3-4-explain-之-table"><a href="#3-3-4-explain-之-table" class="headerlink" title="3.3.4 explain 之 table"></a>3.3.4 explain 之 table</h3><p>展示这一行的数据是关于哪一张表的 </p><h3 id="3-3-5-explain-之-type"><a href="#3-3-5-explain-之-type" class="headerlink" title="3.3.5 explain 之 type"></a>3.3.5 explain 之 type</h3><p>type 显示的是访问类型，是较为重要的一个指标，可取值为： </p><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>MySQL不访问任何表，索引，直接返回结果</td></tr><tr><td>system</td><td>表只有一行记录(等于系统表)，这是const类型的特例，一般不会出现</td></tr><tr><td>const</td><td>表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较</td></tr><tr><td>eq_ref</td><td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td></tr><tr><td>ref</td><td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</td></tr><tr><td>range</td><td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。</td></tr><tr><td>index</td><td>index 与 ALL的区别为  index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td></tr><tr><td>all</td><td>将遍历全表以找到匹配的行</td></tr></tbody></table><p>结果值从最好到最坏以此是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure><p>一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref 。</p><p><img src="../../images/mysql/2/2-17.png" alt="2-17"></p><h3 id="3-3-6-explain-之-key"><a href="#3-3-6-explain-之-key" class="headerlink" title="3.3.6 explain 之  key"></a>3.3.6 explain 之  key</h3><ul><li>possible_keys : 显示可能应用在这张表的索引， 一个或多个。 </li><li>key ： 实际使用的索引， 如果为NULL， 则没有使用索引。</li><li>key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</li></ul><h3 id="3-3-7-explain-之-rows"><a href="#3-3-7-explain-之-rows" class="headerlink" title="3.3.7 explain 之 rows"></a>3.3.7 explain 之 rows</h3><p>扫描行的数量。</p><h3 id="3-3-8-explain-之-extra"><a href="#3-3-8-explain-之-extra" class="headerlink" title="3.3.8 explain 之 extra"></a>3.3.8 explain 之 extra</h3><p>其他的额外的执行计划信息，在该列展示 。</p><table><thead><tr><th>extra</th><th>含义</th></tr></thead><tbody><tr><td>using  filesort</td><td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “文件排序”, 效率低。</td></tr><tr><td>using  temporary</td><td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于 order by 和 group by； 效率低</td></tr><tr><td>using  index</td><td>表示相应的select操作使用了覆盖索引， 避免访问表的数据行， 效率不错。</td></tr></tbody></table><p><img src="../../images/mysql/2/2-18.png" alt="2-18"></p><h3 id="3-4-show-profile分析SQL"><a href="#3-4-show-profile分析SQL" class="headerlink" title="3.4 show profile分析SQL"></a>3.4 show profile分析SQL</h3><p>Mysql从5.0.37版本开始增加了对 show profiles 和 show profile 语句的支持。show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p><p>通过 have_profiling 参数，能够看到当前MySQL是否支持profile：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@have_profiling;</span><br><span class="line"><span class="keyword">select</span> @@profiling;</span><br></pre></td></tr></table></figure><p>默认profiling是关闭的，可以通过set语句在Session级别开启profiling：</p><p><img src="../../images/mysql/2/2-25.png" alt="2-25"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling=<span class="number">1</span>; //开启profiling 开关；</span><br></pre></td></tr></table></figure><p>通过profile，我们能够更清楚地了解SQL执行的过程。</p><p>首先，我们可以执行一系列的操作，如下图所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="keyword">use</span> db01;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">profiles</span> <span class="keyword">for</span> <span class="keyword">query</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>执行完上述命令之后，再执行show profiles 指令， 来查看SQL语句执行的耗时：</p><p><img src="../../images/mysql/2/2-26.png" alt="2-26"></p><p>通过show  profile for  query  query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间：</p><p> <img src="../../images/mysql/2/2-27.png" alt="2-27"></p><p><strong>TIP ：</strong></p><ul><li>Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。</li></ul><p>​    在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。例如，选择查看CPU的耗费时间  ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> profile cpu <span class="keyword">for</span> <span class="keyword">query</span> <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-28.png" alt="2-28"></p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Status</td><td>sql 语句执行的状态</td></tr><tr><td>Duration</td><td>sql 执行过程中每一个步骤的耗时</td></tr><tr><td>CPU_user</td><td>当前用户占有的cpu</td></tr><tr><td>CPU_system</td><td>系统占有的cpu</td></tr></tbody></table><h2 id="3-5-trace分析优化器执行计划"><a href="#3-5-trace分析优化器执行计划" class="headerlink" title="3.5 trace分析优化器执行计划"></a>3.5 trace分析优化器执行计划</h2><p>​    MySQL5.6提供了对SQL的跟踪trace, 通过trace文件能够进一步了解为什么优化器选择A计划, 而不是选择B计划。</p><p>​    打开trace ， 设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> optimizer_trace=<span class="string">"enabled=on"</span>,end_markers_in_json=<span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">set</span> optimizer_trace_max_mem_size=<span class="number">1000000</span>;</span><br></pre></td></tr></table></figure><p>执行SQL语句 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">QUERY: select * from tb_item where id &lt; 4</span><br><span class="line">TRACE: &#123;</span><br><span class="line">  "steps": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_preparation"</span>: &#123;</span><br><span class="line">        <span class="attr">"select#"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"steps"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"expanded_query"</span>: <span class="string">"/* select#1 */ select `tb_item`.`id` AS `id`,`tb_item`.`title` AS `title`,`tb_item`.`price` AS `price`,`tb_item`.`num` AS `num`,`tb_item`.`categoryid` AS `categoryid`,`tb_item`.`status` AS `status`,`tb_item`.`sellerid` AS `sellerid`,`tb_item`.`createtime` AS `createtime`,`tb_item`.`updatetime` AS `updatetime` from `tb_item` where (`tb_item`.`id` &lt; 4)"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_preparation */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_optimization"</span>: &#123;</span><br><span class="line">        <span class="attr">"select#"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"steps"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"condition_processing"</span>: &#123;</span><br><span class="line">              <span class="attr">"condition"</span>: <span class="string">"WHERE"</span>,</span><br><span class="line">              <span class="attr">"original_condition"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span>,</span><br><span class="line">              <span class="attr">"steps"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"transformation"</span>: <span class="string">"equality_propagation"</span>,</span><br><span class="line">                  <span class="attr">"resulting_condition"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"transformation"</span>: <span class="string">"constant_propagation"</span>,</span><br><span class="line">                  <span class="attr">"resulting_condition"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"transformation"</span>: <span class="string">"trivial_condition_removal"</span>,</span><br><span class="line">                  <span class="attr">"resulting_condition"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] <span class="comment">/* steps */</span></span><br><span class="line">            &#125; <span class="comment">/* condition_processing */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"table_dependencies"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`tb_item`"</span>,</span><br><span class="line">                <span class="attr">"row_may_be_null"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"map_bit"</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">"depends_on_map_bits"</span>: [</span><br><span class="line">                ] <span class="comment">/* depends_on_map_bits */</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* table_dependencies */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"ref_optimizer_key_uses"</span>: [</span><br><span class="line">            ] <span class="comment">/* ref_optimizer_key_uses */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"rows_estimation"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`tb_item`"</span>,</span><br><span class="line">                <span class="attr">"range_analysis"</span>: &#123;</span><br><span class="line">                  <span class="attr">"table_scan"</span>: &#123;</span><br><span class="line">                    <span class="attr">"rows"</span>: <span class="number">9816098</span>,</span><br><span class="line">                    <span class="attr">"cost"</span>: <span class="number">2.04e6</span></span><br><span class="line">                  &#125; <span class="comment">/* table_scan */</span>,</span><br><span class="line">                  <span class="attr">"potential_range_indices"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"index"</span>: <span class="string">"PRIMARY"</span>,</span><br><span class="line">                      <span class="attr">"usable"</span>: <span class="literal">true</span>,</span><br><span class="line">                      <span class="attr">"key_parts"</span>: [</span><br><span class="line">                        <span class="string">"id"</span></span><br><span class="line">                      ] <span class="comment">/* key_parts */</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] <span class="comment">/* potential_range_indices */</span>,</span><br><span class="line">                  <span class="attr">"setup_range_conditions"</span>: [</span><br><span class="line">                  ] <span class="comment">/* setup_range_conditions */</span>,</span><br><span class="line">                  <span class="attr">"group_index_range"</span>: &#123;</span><br><span class="line">                    <span class="attr">"chosen"</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">"cause"</span>: <span class="string">"not_group_by_or_distinct"</span></span><br><span class="line">                  &#125; <span class="comment">/* group_index_range */</span>,</span><br><span class="line">                  <span class="attr">"analyzing_range_alternatives"</span>: &#123;</span><br><span class="line">                    <span class="attr">"range_scan_alternatives"</span>: [</span><br><span class="line">                      &#123;</span><br><span class="line">                        <span class="attr">"index"</span>: <span class="string">"PRIMARY"</span>,</span><br><span class="line">                        <span class="attr">"ranges"</span>: [</span><br><span class="line">                          <span class="string">"id &lt; 4"</span></span><br><span class="line">                        ] <span class="comment">/* ranges */</span>,</span><br><span class="line">                        <span class="attr">"index_dives_for_eq_ranges"</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">"rowid_ordered"</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">"using_mrr"</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">"index_only"</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">"rows"</span>: <span class="number">3</span>,</span><br><span class="line">                        <span class="attr">"cost"</span>: <span class="number">1.6154</span>,</span><br><span class="line">                        <span class="attr">"chosen"</span>: <span class="literal">true</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    ] <span class="comment">/* range_scan_alternatives */</span>,</span><br><span class="line">                    <span class="attr">"analyzing_roworder_intersect"</span>: &#123;</span><br><span class="line">                      <span class="attr">"usable"</span>: <span class="literal">false</span>,</span><br><span class="line">                      <span class="attr">"cause"</span>: <span class="string">"too_few_roworder_scans"</span></span><br><span class="line">                    &#125; <span class="comment">/* analyzing_roworder_intersect */</span></span><br><span class="line">                  &#125; <span class="comment">/* analyzing_range_alternatives */</span>,</span><br><span class="line">                  <span class="attr">"chosen_range_access_summary"</span>: &#123;</span><br><span class="line">                    <span class="attr">"range_access_plan"</span>: &#123;</span><br><span class="line">                      <span class="attr">"type"</span>: <span class="string">"range_scan"</span>,</span><br><span class="line">                      <span class="attr">"index"</span>: <span class="string">"PRIMARY"</span>,</span><br><span class="line">                      <span class="attr">"rows"</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">"ranges"</span>: [</span><br><span class="line">                        <span class="string">"id &lt; 4"</span></span><br><span class="line">                      ] <span class="comment">/* ranges */</span></span><br><span class="line">                    &#125; <span class="comment">/* range_access_plan */</span>,</span><br><span class="line">                    <span class="attr">"rows_for_plan"</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">"cost_for_plan"</span>: <span class="number">1.6154</span>,</span><br><span class="line">                    <span class="attr">"chosen"</span>: <span class="literal">true</span></span><br><span class="line">                  &#125; <span class="comment">/* chosen_range_access_summary */</span></span><br><span class="line">                &#125; <span class="comment">/* range_analysis */</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* rows_estimation */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"considered_execution_plans"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"plan_prefix"</span>: [</span><br><span class="line">                ] <span class="comment">/* plan_prefix */</span>,</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`tb_item`"</span>,</span><br><span class="line">                <span class="attr">"best_access_path"</span>: &#123;</span><br><span class="line">                  <span class="attr">"considered_access_paths"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"access_type"</span>: <span class="string">"range"</span>,</span><br><span class="line">                      <span class="attr">"rows"</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">"cost"</span>: <span class="number">2.2154</span>,</span><br><span class="line">                      <span class="attr">"chosen"</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] <span class="comment">/* considered_access_paths */</span></span><br><span class="line">                &#125; <span class="comment">/* best_access_path */</span>,</span><br><span class="line">                <span class="attr">"cost_for_plan"</span>: <span class="number">2.2154</span>,</span><br><span class="line">                <span class="attr">"rows_for_plan"</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">"chosen"</span>: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* considered_execution_plans */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"attaching_conditions_to_tables"</span>: &#123;</span><br><span class="line">              <span class="attr">"original_condition"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span>,</span><br><span class="line">              <span class="attr">"attached_conditions_computation"</span>: [</span><br><span class="line">              ] <span class="comment">/* attached_conditions_computation */</span>,</span><br><span class="line">              <span class="attr">"attached_conditions_summary"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"table"</span>: <span class="string">"`tb_item`"</span>,</span><br><span class="line">                  <span class="attr">"attached"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] <span class="comment">/* attached_conditions_summary */</span></span><br><span class="line">            &#125; <span class="comment">/* attaching_conditions_to_tables */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"refine_plan"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`tb_item`"</span>,</span><br><span class="line">                <span class="attr">"access_type"</span>: <span class="string">"range"</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* refine_plan */</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_optimization */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_execution"</span>: &#123;</span><br><span class="line">        <span class="attr">"select#"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"steps"</span>: [</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_execution */</span></span><br><span class="line">    &#125;</span><br><span class="line">  ] /* steps */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-索引的使用"><a href="#4-索引的使用" class="headerlink" title="4. 索引的使用"></a>4. 索引的使用</h1><p>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</p><h2 id="4-1-验证索引提升查询效率"><a href="#4-1-验证索引提升查询效率" class="headerlink" title="4.1 验证索引提升查询效率"></a>4.1 验证索引提升查询效率</h2><p>在我们准备的表结构tb_item 中， 一共存储了 300 万记录；</p><ol><li>根据ID查询 </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1999</span>\G;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-29.png" alt="2-29"></p><p>查询速度很快， 接近0s ， 主要的原因是因为id为主键， 有索引；</p><p><img src="../../images/mysql/2/2-30.png" alt="2-30"></p><ol start="2"><li>根据 title 进行精确查询</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> title = <span class="string">'iphoneX 移动3G 32G941'</span>\G;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-31.png" alt="2-31"></p><p>查看SQL语句的执行计划 ： </p><p><img src="../../images/mysql/2/2-32.png" alt="2-32"></p><p><strong>处理方案</strong> ， 针对title字段， 创建索引 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_item_title <span class="keyword">on</span> tb_item(title);</span><br></pre></td></tr></table></figure><p>索引创建完成之后，再次进行查询 ： </p><p><img src="../../images/mysql/2/2-33.png" alt="2-33"></p><p>通过explain ， 查看执行计划，执行SQL时使用了刚才创建的索引 </p><p><img src="../../images/mysql/2/2-34.png" alt="2-34"></p><h2 id="4-2-索引的使用"><a href="#4-2-索引的使用" class="headerlink" title="4.2 索引的使用"></a>4.2 索引的使用</h2><h3 id="4-2-1-准备环境"><a href="#4-2-1-准备环境" class="headerlink" title="4.2.1 准备环境"></a>4.2.1 准备环境</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`tb_seller`</span> (</span><br><span class="line"><span class="string">`sellerid`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`nickname`</span> <span class="built_in">varchar</span> (<span class="number">50</span>),</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">varchar</span> (<span class="number">60</span>),</span><br><span class="line"><span class="string">`status`</span> <span class="built_in">varchar</span> (<span class="number">1</span>),</span><br><span class="line"><span class="string">`address`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`createtime`</span> datetime,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="string">`sellerid`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4; </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'alibaba'</span>,<span class="string">'阿里巴巴'</span>,<span class="string">'阿里小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'baidu'</span>,<span class="string">'百度科技有限公司'</span>,<span class="string">'百度小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'huawei'</span>,<span class="string">'华为科技有限公司'</span>,<span class="string">'华为小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'0'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'itcast'</span>,<span class="string">'传智播客教育科技有限公司'</span>,<span class="string">'传智播客'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'itheima'</span>,<span class="string">'黑马程序员'</span>,<span class="string">'黑马程序员'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'0'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'luoji'</span>,<span class="string">'罗技科技有限公司'</span>,<span class="string">'罗技小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'oppo'</span>,<span class="string">'OPPO科技有限公司'</span>,<span class="string">'OPPO官方旗舰店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'0'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'ourpalm'</span>,<span class="string">'掌趣科技股份有限公司'</span>,<span class="string">'掌趣小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'qiandu'</span>,<span class="string">'千度科技'</span>,<span class="string">'千度小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'2'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'sina'</span>,<span class="string">'新浪科技有限公司'</span>,<span class="string">'新浪官方旗舰店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'xiaomi'</span>,<span class="string">'小米科技'</span>,<span class="string">'小米官方旗舰店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'西安市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'yijia'</span>,<span class="string">'宜家家居'</span>,<span class="string">'宜家家居旗舰店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure><h3 id="4-2-2-避免索引失效"><a href="#4-2-2-避免索引失效" class="headerlink" title="4.2.2 避免索引失效"></a>4.2.2 避免索引失效</h3><h4 id="1-全值匹配-，对索引中所有列都指定具体值。"><a href="#1-全值匹配-，对索引中所有列都指定具体值。" class="headerlink" title="1.全值匹配 ，对索引中所有列都指定具体值。"></a>1.全值匹配 ，对索引中所有列都指定具体值。</h4><p>改情况下，索引生效，执行效率高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-35.png" alt="2-35"></p><h4 id="2-最左前缀法则"><a href="#2-最左前缀法则" class="headerlink" title="2.最左前缀法则"></a>2.最左前缀法则</h4><ul><li>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。</li><li>跟顺序没有关系，有就执行索引（爬楼梯一样，走一层，再走下一层，不能跳级）</li><li>匹配最左前缀法则，走索引：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-36.png" alt="2-36"></p><p>违法最左前缀法则 ， 索引失效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-37.png" alt="2-37"></p><p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-38.png" alt="2-38"></p><h4 id="3-范围查询右边的列，不能使用索引-。"><a href="#3-范围查询右边的列，不能使用索引-。" class="headerlink" title="3.范围查询右边的列，不能使用索引 。"></a>3.范围查询右边的列，不能使用索引 。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span> = <span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span> &gt; <span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-39.png" alt="2-39"></p><p>前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p><h4 id="4-不要在索引列上进行运算操作，-索引将失效。"><a href="#4-不要在索引列上进行运算操作，-索引将失效。" class="headerlink" title="4.不要在索引列上进行运算操作， 索引将失效。"></a>4.不要在索引列上进行运算操作， 索引将失效。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">3</span>,<span class="number">2</span>)=<span class="string">'科技'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">3</span>,<span class="number">2</span>)=<span class="string">'科技'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-40.png" alt="2-40"></p><h4 id="5-字符串不加单引号，造成索引失效。"><a href="#5-字符串不加单引号，造成索引失效。" class="headerlink" title="5.字符串不加单引号，造成索引失效。"></a>5.字符串不加单引号，造成索引失效。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span> = <span class="string">'1'</span> ;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span> = <span class="number">1</span> ;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-41.png" alt="2-41"></p><p>在查询时，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><h4 id="6-尽量使用覆盖索引，避免select"><a href="#6-尽量使用覆盖索引，避免select" class="headerlink" title="6.尽量使用覆盖索引，避免select *"></a>6.尽量使用覆盖索引，避免select *</h4><p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span> = <span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span> = <span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">status</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span> = <span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">status</span>,address <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span> = <span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-42.png" alt="2-42"></p><p>如果查询列，超出索引列，也会降低性能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">status</span>,address,<span class="keyword">password</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span> = <span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-43.png" alt="2-43"></p><p><strong>TIP :</strong> </p><ul><li>using index ：使用覆盖索引的时候就会出现</li><li>using where：在查找使用索引的情况下，需要回表去查询所需的数据</li><li>using index condition：查找使用了索引，但是需要回表查询数据</li><li>using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</li></ul><h4 id="7-用or分割开的条件，-如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。"><a href="#7-用or分割开的条件，-如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。" class="headerlink" title="7.用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。"></a>7.用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</h4><p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'黑马程序员'</span> <span class="keyword">and</span> createtime = <span class="string">'2088-01-01 12:00:00'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'黑马程序员'</span> <span class="keyword">or</span> createtime = <span class="string">'2088-01-01 12:00:00'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-44.png" alt="2-44"></p><h4 id="8-以-开头的Like模糊查询，索引失效。"><a href="#8-以-开头的Like模糊查询，索引失效。" class="headerlink" title="8.以%开头的Like模糊查询，索引失效。"></a>8.以%开头的Like模糊查询，索引失效。</h4><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'黑马程序员%'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%黑马程序员'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%黑马程序员%'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-45.png" alt="2-45"></p><p><strong>解决方案 ：</strong> </p><p>通过覆盖索引来解决 （索引的字段，id为自动创建的索引）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'科技%'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> sellerid,<span class="keyword">name</span>,<span class="keyword">status</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%科技%'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-46.png" alt="2-46"></p><h4 id="9-如果MySQL评估使用索引比全表更慢，则不使用索引。"><a href="#9-如果MySQL评估使用索引比全表更慢，则不使用索引。" class="headerlink" title="9.如果MySQL评估使用索引比全表更慢，则不使用索引。"></a>9.如果MySQL评估使用索引比全表更慢，则不使用索引。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_address <span class="keyword">on</span> tb_seller(address);</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'西安市'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-47.png" alt="2-47"></p><h4 id="10-is-NULL-，-is-NOT-NULL-有时索引失效。"><a href="#10-is-NULL-，-is-NOT-NULL-有时索引失效。" class="headerlink" title="10.is  NULL ， is NOT NULL  有时索引失效。"></a>10.is  NULL ， is NOT NULL  <font color="red">有时</font>索引失效。</h4><p>看数据量，第9点，如果全表快，就走全表，不走索引（多数为null，全表快，不走索引）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">is</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-48.png" alt="2-48"></p><h4 id="11-in-走索引，-not-in-索引失效。"><a href="#11-in-走索引，-not-in-索引失效。" class="headerlink" title="11.in 走索引， not in 索引失效。"></a>11.in 走索引， not in 索引失效。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> sellerid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'oppo'</span>,<span class="string">'xiaomi'</span>,<span class="string">'sina'</span>);</span><br></pre></td></tr></table></figure><p>学习版：出现</p><p><img src="../../images/mysql/2/2-49.png" alt="2-49"> </p><p>测试版：没有出现</p><p><img src="../../images/mysql/2/2-50.png" alt="2-50"></p><h4 id="12-单列索引和复合索引。"><a href="#12-单列索引和复合索引。" class="headerlink" title="12.单列索引和复合索引。"></a>12.单列索引和复合索引。</h4><p>尽量使用复合索引，而少使用单列索引 。</p><p>创建复合索引 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_name_sta_address <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>, <span class="keyword">status</span>, address);</span><br><span class="line">就相当于创建了三个索引 ： </span><br><span class="line">name</span><br><span class="line">name + status</span><br><span class="line">name + status + address</span><br></pre></td></tr></table></figure><p>创建单列索引 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">create index idx_seller_status on tb_seller(status);</span><br><span class="line">create index idx_seller_address on tb_seller(address);</span><br></pre></td></tr></table></figure><p>数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">' '</span> <span class="keyword">and</span> address=<span class="string">'西安市'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-51.png" alt="2-51"></p><h2 id="4-3-查看索引使用情况"><a href="#4-3-查看索引使用情况" class="headerlink" title="4.3 查看索引使用情况"></a>4.3 查看索引使用情况</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;</span><br><span class="line">全局</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;</span><br></pre></td></tr></table></figure><p> <img src="../../images/mysql/2/2-52.png" alt="2-52"></p><ul><li>Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。</li><li>Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。</li><li>Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</li><li>Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY … DESC。</li><li>Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。</li><li>Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</li></ul><h1 id="5-SQL优化"><a href="#5-SQL优化" class="headerlink" title="5. SQL优化"></a>5. SQL优化</h1><h2 id="5-1-大批量插入数据"><a href="#5-1-大批量插入数据" class="headerlink" title="5.1 大批量插入数据"></a>5.1 大批量插入数据</h2><p>环境准备 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user_1`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`qq`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户状态'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`update_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_user_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</span><br></pre></td></tr></table></figure><p>当使用load 命令导入数据的时候，适当的设置可以提高导入的效率。</p><p><img src="../../images/mysql/2/2-53.png" alt="2-53"></p><p>对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</p><ol><li>主键顺序插入<ol><li>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。</li><li>如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</li></ol></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">脚本文件介绍 :</span><br><span class="line">sql1.log  <span class="comment">----&gt; 主键有序</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'C:\\sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> tb_user_1 <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_1;</span><br><span class="line">sql2.log  <span class="comment">----&gt; 主键无序</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'C:\\sql2.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> tb_user_2 <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_2;</span><br><span class="line"></span><br><span class="line">过程</span><br><span class="line">mysql <span class="comment">--local-infile=1 -u root -p</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'local_infile'</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile = <span class="string">'ON'</span>;</span><br></pre></td></tr></table></figure><p>插入ID顺序排列数据：</p><p><img src="../../images/mysql/2/2-56.png" alt="2-56"></p><p>插入ID无序排列数据：（学习版，测试时系统崩了）</p><p><img src="../../images/mysql/2/2-59.png" alt="2-59"></p><ol start="2"><li>关闭唯一性校验</li></ol><p>在导入数据前执行 SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。</p><p><img src="../../images/mysql/2/2-60.png" alt="2-60"></p><ol start="3"><li>手动提交事务</li></ol><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。</p><p><img src="../../images/mysql/2/2-61.png" alt="2-61"></p><h2 id="5-2-优化insert语句"><a href="#5-2-优化insert语句" class="headerlink" title="5.2 优化insert语句"></a>5.2 优化insert语句</h2><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。</p><ul><li><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。</p><p>示例， 原始方式为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure><p>优化后的方案为 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tom'</span>),(<span class="number">2</span>,<span class="string">'Cat'</span>)，(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure></li><li><p>在事务中进行数据插入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p>数据有序插入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Tim'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Rose'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Cat'</span>);</span><br></pre></td></tr></table></figure><p>优化后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Tim'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Rose'</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-3-优化order-by语句"><a href="#5-3-优化order-by语句" class="headerlink" title="5.3 优化order by语句"></a>5.3 优化order by语句</h2><h3 id="5-3-1-环境准备"><a href="#5-3-1-环境准备" class="headerlink" title="5.3.1 环境准备"></a>5.3.1 环境准备</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`emp2`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'1'</span>,<span class="string">'Tom'</span>,<span class="string">'25'</span>,<span class="string">'2300'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'2'</span>,<span class="string">'Jerry'</span>,<span class="string">'30'</span>,<span class="string">'3500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'3'</span>,<span class="string">'Luci'</span>,<span class="string">'25'</span>,<span class="string">'2800'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'4'</span>,<span class="string">'Jay'</span>,<span class="string">'36'</span>,<span class="string">'3500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'5'</span>,<span class="string">'Tom2'</span>,<span class="string">'21'</span>,<span class="string">'2200'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'6'</span>,<span class="string">'Jerry2'</span>,<span class="string">'31'</span>,<span class="string">'3300'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'7'</span>,<span class="string">'Luci2'</span>,<span class="string">'26'</span>,<span class="string">'2700'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'8'</span>,<span class="string">'Jay2'</span>,<span class="string">'33'</span>,<span class="string">'3500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'9'</span>,<span class="string">'Tom3'</span>,<span class="string">'23'</span>,<span class="string">'2400'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'10'</span>,<span class="string">'Jerry3'</span>,<span class="string">'32'</span>,<span class="string">'3100'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'11'</span>,<span class="string">'Luci3'</span>,<span class="string">'26'</span>,<span class="string">'2900'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp2`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'12'</span>,<span class="string">'Jay3'</span>,<span class="string">'37'</span>,<span class="string">'4500'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp2(age,salary);</span><br></pre></td></tr></table></figure><h3 id="5-3-2-两种排序方式"><a href="#5-3-2-两种排序方式" class="headerlink" title="5.3.2 两种排序方式"></a>5.3.2 两种排序方式</h3><ol><li>第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp2 <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp2 <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p> <img src="../../images/mysql/2/2-54.png" alt="2-54"></p><ol start="2"><li>第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> emp2 <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age <span class="keyword">from</span> emp2 <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age,salary <span class="keyword">from</span> emp2 <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-55.png" alt="2-55"></p><ol start="3"><li>多字段排序（排序的名字与索引的顺序保持一致）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age,salary <span class="keyword">from</span> emp2 <span class="keyword">order</span> <span class="keyword">by</span> age,salary;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age,salary <span class="keyword">from</span> emp2 <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age,salary <span class="keyword">from</span> emp2 <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>,age <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age,salary <span class="keyword">from</span> emp2 <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-57.png" alt="2-57"></p><p>了解了MySQL的排序方式，优化目标就清晰了：</p><ul><li>尽量减少额外的排序，通过索引直接返回有序数据。</li><li>where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order  by 的字段都是升序，或者都是降序。</li><li>否则肯定需要额外的操作，这样就会出现FileSort。</li></ul><h3 id="5-3-3-Filesort-的优化"><a href="#5-3-3-Filesort-的优化" class="headerlink" title="5.3.3 Filesort 的优化"></a>5.3.3 Filesort 的优化</h3><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 有两种排序算法：</p><ul><li>两次扫描算法 ：MySQL4.1 之前，使用该方式排序。首先根据条件取出排序字段和行指针信息，然后在排序区 sort buffer 中排序，如果sort buffer不够，则在临时表 temporary table 中存储排序结果。完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</li><li>一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</li></ul><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</p><p>可以适当提高 sort_buffer_size  和 max_length_for_sort_data  系统变量，来增大排序区的大小，提高排序的效率。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'sort_buffer_size'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_length_for_sort_data'</span>;</span><br></pre></td></tr></table></figure><p> <img src="../../images/mysql/2/2-58.png" alt="2-58"></p><h2 id="5-4-优化group-by-语句（学习版，测试版没有做到）"><a href="#5-4-优化group-by-语句（学习版，测试版没有做到）" class="headerlink" title="5.4 优化group by 语句（学习版，测试版没有做到）"></a>5.4 优化group by 语句（学习版，测试版没有做到）</h2><p>​    由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY 相比，GROUP BY 主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p><p>​    如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。如下 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp2(age,salary);</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp2;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp2 <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-62.png" alt="2-62"></p><p>优化后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp2 <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-63.png" alt="2-63"></p><p>从上面的例子可以看出，第一个SQL语句需要进行”filesort”，而第二个SQL由于order  by  null 不需要进行 “filesort”， 而上文提过Filesort往往非常耗费时间。</p><p>创建索引 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp2(age,salary);</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-64.png" alt="2-64"></p><h2 id="5-5-优化嵌套查询"><a href="#5-5-优化嵌套查询" class="headerlink" title="5.5 优化嵌套查询"></a>5.5 优化嵌套查询</h2><p>Mysql4.1版本之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。</p><p>示例 ，查找有角色的所有的用户信息 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> user_role );</span><br></pre></td></tr></table></figure><p>优化后 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user u , user_role ur <span class="keyword">where</span> u.id = ur.user_id;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-65.png" alt="2-65"></p><p>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上需要两个步骤的查询工作。</p><h2 id="5-6-优化OR条件"><a href="#5-6-优化OR条件" class="headerlink" title="5.6 优化OR条件"></a>5.6 优化OR条件</h2><p>对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索引； 如果没有索引，则应该考虑增加索引。</p><p>获取 emp2 表中的所有的索引 ： show index from emp2;</p><p><img src="../../images/mysql/2/2-66.png" alt="2-66"></p><p>示例 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp2 <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">or</span> age = <span class="number">30</span>\G;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp2 <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">or</span> <span class="keyword">id</span> =<span class="number">10</span>\G;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-67.png" alt="2-67"></p><p><img src="../../images/mysql/2/2-68.png" alt="2-68"></p><p>建议使用 union 替换 or ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp2 <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp2 <span class="keyword">where</span> age = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-69.png" alt="2-69"></p><p>我们来比较下重要指标，发现主要差别是 type 和 ref 这两项</p><p>type 显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null  &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure><ul><li>UNION 语句的 type 值为 ref，OR 语句的 type 值为 range，可以看到这是一个很明显的差距</li><li>UNION 语句的 ref 值为 const，OR 语句的 type 值为 null，const 表示是常量值引用，非常快</li><li>这两项的差距就说明了 UNION 要优于 OR 。</li></ul><h2 id="5-7-优化分页查询"><a href="#5-7-优化分页查询" class="headerlink" title="5.7 优化分页查询"></a>5.7 优化分页查询</h2><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见又非常头疼的问题就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item t,(<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> tb_item <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">limit</span> <span class="number">2000000</span>,<span class="number">10</span>) a <span class="keyword">where</span> t.id=a.id;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">2000000</span> <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-70.png" alt="2-70"></p><h3 id="5-7-1-优化思路一"><a href="#5-7-1-优化思路一" class="headerlink" title="5.7.1 优化思路一"></a>5.7.1 优化思路一</h3><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><p><img src="../../images/mysql/2/2-71.png" alt="2-71"></p><h3 id="5-7-2-优化思路二"><a href="#5-7-2-优化思路二" class="headerlink" title="5.7.2 优化思路二"></a>5.7.2 优化思路二</h3><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p><p><img src="../../images/mysql/2/2-72.png" alt="2-72"></p><h2 id="5-8-使用SQL提示"><a href="#5-8-使用SQL提示" class="headerlink" title="5.8 使用SQL提示"></a>5.8 使用SQL提示</h2><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><h3 id="5-8-1-USE-INDEX"><a href="#5-8-1-USE-INDEX" class="headerlink" title="5.8.1 USE INDEX"></a>5.8.1 USE INDEX</h3><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_stta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">use</span> <span class="keyword">index</span>(idx_seller_name) <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-73.png" alt="2-73"></p><h3 id="5-8-2-IGNORE-INDEX"><a href="#5-8-2-IGNORE-INDEX" class="headerlink" title="5.8.2 IGNORE INDEX"></a>5.8.2 IGNORE INDEX</h3><p>如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">ignore</span> <span class="keyword">index</span>(idx_seller_name) <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'小米科技'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-74.png" alt="2-74"></p><h3 id="5-8-3-FORCE-INDEX"><a href="#5-8-3-FORCE-INDEX" class="headerlink" title="5.8.3 FORCE INDEX"></a>5.8.3 FORCE INDEX</h3><p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint 。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address = <span class="string">'北京市'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">use</span> <span class="keyword">index</span>(idx_seller_address) <span class="keyword">where</span> address = <span class="string">'北京市'</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">force</span> <span class="keyword">index</span>(idx_seller_address) <span class="keyword">where</span> address = <span class="string">'北京市'</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/2/2-75.png" alt="2-75"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql高级使用-存储引擎-优化SQL-索引的使用-SQL的优化&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://linhuide.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://linhuide.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql高级使用1</title>
    <link href="https://linhuide.github.io/post/51ce57fc.html"/>
    <id>https://linhuide.github.io/post/51ce57fc.html</id>
    <published>2020-04-06T07:15:42.000Z</published>
    <updated>2020-04-17T11:53:26.120Z</updated>
    
    <content type="html"><![CDATA[<p>mysql高级使用-索引，视图，存储过程，触发器</p><a id="more"></a><h1 id="1-Linux-系统安装MySQL"><a href="#1-Linux-系统安装MySQL" class="headerlink" title="1.Linux 系统安装MySQL"></a>1.Linux 系统安装MySQL</h1><h2 id="1-1-准备安装包"><a href="#1-1-准备安装包" class="headerlink" title="1-1.准备安装包"></a>1-1.准备安装包</h2><p> <a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">MySQL Community Downloads</a></p><p><img src="../../images/mysql/1-2.png" alt="1-2"></p><h2 id="1-2-安装MySQL"><a href="#1-2-安装MySQL" class="headerlink" title="1-2.安装MySQL"></a>1-2.安装MySQL</h2><p>直接将安装包推动到linux虚拟机</p><ul><li>卸载 centos 中预安装的 mysql</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep -i mysql</span><br><span class="line">rpm -e （版本） --nodeps</span><br></pre></td></tr></table></figure><ul><li>解压 mysql 的安装包 </li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> mysql</span><br><span class="line"><span class="comment">//解压到</span></span><br><span class="line">tar -xvf MySQL<span class="number">-5.6</span><span class="number">.22</span><span class="number">-1.</span>el6.i686.rpm-bundle.tar -C /root/mysql</span><br></pre></td></tr></table></figure><ul><li>安装依赖包 </li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libaio.so<span class="number">.1</span> libgcc_s.so<span class="number">.1</span> libstdc++.so<span class="number">.6</span> libncurses.so<span class="number">.5</span> --setopt=protected_multilib=<span class="literal">false</span></span><br><span class="line">yum  update libstdc++<span class="number">-4.4</span><span class="number">.7</span><span class="number">-4.</span>el6.x86_64</span><br></pre></td></tr></table></figure><ul><li>安装 mysql-client</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh MySQL-client<span class="number">-5.6</span><span class="number">.22</span><span class="number">-1.</span>el6.i686.rpm</span><br></pre></td></tr></table></figure><ul><li>安装 mysql-server</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh MySQL-server<span class="number">-5.6</span><span class="number">.22</span><span class="number">-1.</span>el6.i686.rpm</span><br></pre></td></tr></table></figure><h2 id="1-3-启动-MySQL-服务"><a href="#1-3-启动-MySQL-服务" class="headerlink" title="1.3 启动 MySQL 服务"></a>1.3 启动 MySQL 服务</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">开启</span><br><span class="line">service mysql <span class="keyword">start</span></span><br><span class="line">停止</span><br><span class="line">service mysql <span class="keyword">stop</span></span><br><span class="line">查看状态</span><br><span class="line">service mysql <span class="keyword">status</span></span><br><span class="line">重启</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h2 id="1-4-登录MySQL"><a href="#1-4-登录MySQL" class="headerlink" title="1.4 登录MySQL"></a>1.4 登录MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql 安装完成之后, 会自动生成一个随机的密码, 并且保存在一个密码文件中 : </span><br><span class="line">打开： cat &#x2F;root&#x2F;.mysql_secret</span><br><span class="line">进入mysql</span><br><span class="line">mysql -u root -p </span><br><span class="line">登录之后, 修改密码 :</span><br><span class="line">set password &#x3D; password(&#39;1234&#39;);</span><br><span class="line">退出：Ctrl+c</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/linux-mysql%E5%AF%86%E7%A0%81.png" alt="linux-mysql密码"></p><p><img src="../../images/mysql/linux-mysql%E5%AF%86%E7%A0%812.png" alt="linux-mysql密码2"></p><h1 id="2-索引"><a href="#2-索引" class="headerlink" title="2.索引"></a>2.索引</h1><h2 id="2-1-索引概述"><a href="#2-1-索引概述" class="headerlink" title="2.1 索引概述"></a>2.1 索引概述</h2><p>​    MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。如下面的==示意图==所示 : </p><p><img src="../../images/mysql/1-3.png" alt="1-3"></p><p>​    左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。</p><p>​    一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具。</p><p>例子：</p><p><img src="../../images/mysql/1-1.png" alt="1-1"></p><h2 id="2-2-索引优势劣势"><a href="#2-2-索引优势劣势" class="headerlink" title="2.2 索引优势劣势"></a>2.2 索引优势劣势</h2><ul><li><p>优势</p><ul><li>类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。</li></ul></li><li><p>劣势</p><ul><li>实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间的。</li><li>虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li></ul></li></ul><h2 id="2-3-索引结构"><a href="#2-3-索引结构" class="headerlink" title="2.3 索引结构"></a>2.3 索引结构</h2><p>​    索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：</p><ul><li>BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。</li><li>HASH 索引：只有Memory引擎支持 ， 使用场景简单 。</li><li>R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。</li><li>Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。</li></ul><center><b>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</b></center><table><thead><tr><th>索引</th><th>InnoDB引擎</th><th>MyISAM引擎</th><th>Memory引擎</th></tr></thead><tbody><tr><td>BTREE索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>HASH 索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree 索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本之后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><p>​    我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引。</p><h3 id="2-3-1-BTREE-结构"><a href="#2-3-1-BTREE-结构" class="headerlink" title="2.3.1 BTREE 结构"></a>2.3.1 BTREE 结构</h3><p>BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：</p><ul><li>树中每个节点最多包含m个孩子。</li><li>除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子。</li><li>若根节点不是叶子节点，则至少有两个孩子。</li><li>所有的叶子节点都在同一层。</li><li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] &lt;= n &lt;= m-1 </li></ul><p>​    以5叉BTree为例，key的数量：公式推导[ceil(m/2)-1] &lt;= n &lt;= m-1。所以 2 &lt;= n &lt;=4 。当n&gt;4时，中间节点分裂到父节点，两边节点分裂。</p><p>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例。</p><p>演变过程如下：</p><p>1). 插入前4个字母 C N G A </p><p><img src="../../images/mysql/1-4.png" alt="1-4"> </p><p>2). 插入H，n&gt;4，中间元素G字母向上分裂到新的节点</p><p><img src="../../images/mysql/1-5.png" alt="1-5"> </p><p>3). 插入E，K，Q不需要分裂</p><p><img src="../../images/mysql/1-6.png" alt="1-6"> </p><p>4). 插入M，中间元素M字母向上分裂到父节点G</p><p><img src="../../images/mysql/1-7.png" alt="1-7"> </p><p>5). 插入F，W，L，T不需要分裂</p><p><img src="../../images/mysql/1-8.png" alt="1-8"> </p><p>6). 插入Z，中间元素T向上分裂到父节点中 </p><p><img src="../../images/mysql/1-9.png" alt="1-9"> </p><p>7). 插入D，中间元素D向上分裂到父节点中。然后插入P，R，X，Y不需要分裂</p><p> <img src="../../images/mysql/1-10.png" alt="1-10"></p><p>8). 最后插入S，NPQR节点n&gt;5，中间节点Q向上分裂，但分裂后父节点DGMT的n&gt;5，中间节点M向上分裂</p><p> <img src="../../images/mysql/1-11.png" alt="1-11"></p><p>到此，该BTREE树就已经构建完成了， BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快。</p><h3 id="2-3-3-B-TREE-结构"><a href="#2-3-3-B-TREE-结构" class="headerlink" title="2.3.3 B+TREE 结构"></a>2.3.3 B+TREE 结构</h3><p>B+Tree为BTree的变种，B+Tree与BTree的区别为：</p><p>1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key。</p><p>2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。</p><p>3). 所有的非叶子节点都可以看作是key的索引部分。</p><p><img src="../../images/mysql/1-12.JPG" alt="1-12"></p><p>由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定。</p><p><img src="../../images/mysql/1-30.png" alt="1-30"></p><p><img src="../../images/mysql/1-31.png" alt="1-31"></p><h3 id="2-3-3-MySQL中的B-Tree"><a href="#2-3-3-MySQL中的B-Tree" class="headerlink" title="2.3.3 MySQL中的B+Tree"></a>2.3.3 MySQL中的B+Tree</h3><p>MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能。</p><p>MySQL中的 B+Tree 索引结构示意图: <img src="../../images/mysql/1-13.png" alt="1-13"></p><h2 id="2-4-索引分类"><a href="#2-4-索引分类" class="headerlink" title="2.4 索引分类"></a>2.4 索引分类</h2><ol><li>单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引</li><li>唯一索引 ：索引列的值必须唯一，但允许有空值</li><li>复合索引 ：即一个索引包含多个列</li></ol><h2 id="2-5-索引语法"><a href="#2-5-索引语法" class="headerlink" title="2.5 索引语法"></a>2.5 索引语法</h2><p>索引在创建表的时候，可以同时创建， 也可以随时增加新的索引。</p><p>准备环境:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//创建数据库</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> demo_01 <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4;</span><br><span class="line">//使用数据库</span><br><span class="line"><span class="keyword">use</span> demo_01;</span><br><span class="line">//创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`city`</span> (</span><br><span class="line">  <span class="string">`city_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`city_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`country_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`city_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`country`</span> (</span><br><span class="line">  <span class="string">`country_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`country_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`country_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line">//插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'西安'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'NewYork'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'北京'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'上海'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'China'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'America'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Japan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'UK'</span>);</span><br></pre></td></tr></table></figure><h3 id="2-5-1-创建索引"><a href="#2-5-1-创建索引" class="headerlink" title="2.5.1 创建索引"></a>2.5.1 创建索引</h3><p>语法 ：     </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>|FULLTEXT|SPATIAL]  <span class="keyword">INDEX</span> index_name </span><br><span class="line">[<span class="keyword">USING</span>  index_type]</span><br><span class="line"><span class="keyword">ON</span> tbl_name(index_col_name,...)</span><br><span class="line"></span><br><span class="line">index_col_name : column_name[(<span class="keyword">length</span>)][<span class="keyword">ASC</span> | <span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure><p>示例 ：</p><p> 为city表中的city_name字段创建索引 ；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_city_name <span class="keyword">on</span> city(city_name);</span><br></pre></td></tr></table></figure><h3 id="2-5-2-查看索引"><a href="#2-5-2-查看索引" class="headerlink" title="2.5.2 查看索引"></a>2.5.2 查看索引</h3><p>语法： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index  from  table_name;</span><br></pre></td></tr></table></figure><p>示例：</p><p>查看city表中的索引信息；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span>  <span class="keyword">from</span> city;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-14.png" alt="1-14"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span>  <span class="keyword">from</span> city\G;</span><br></pre></td></tr></table></figure><p> <img src="../../images/mysql/1-15.png" alt="1-15"></p><h3 id="2-5-3-删除索引"><a href="#2-5-3-删除索引" class="headerlink" title="2.5.3 删除索引"></a>2.5.3 删除索引</h3><p>语法 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP  INDEX  index_name  ON  tbl_name;</span><br></pre></td></tr></table></figure><p>示例 ： </p><p>想要删除city表上的索引idx_city_name，可以操作如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_city_name <span class="keyword">on</span> city;</span><br></pre></td></tr></table></figure><h3 id="2-5-4-ALTER命令"><a href="#2-5-4-ALTER命令" class="headerlink" title="2.5.4 ALTER命令"></a>2.5.4 ALTER命令</h3><ul><li>该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL（主键索引）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  primary  <span class="keyword">key</span>(column_list);</span><br></pre></td></tr></table></figure><ul><li>这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）（唯一索引）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  <span class="keyword">unique</span> index_name(column_list);</span><br></pre></td></tr></table></figure><ul><li>添加普通索引， 索引值可以出现多次。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  <span class="keyword">index</span> index_name(column_list);</span><br></pre></td></tr></table></figure><ul><li>该语句指定了索引为FULLTEXT， 用于全文索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span>  <span class="keyword">table</span>  tb_name  <span class="keyword">add</span>  fulltext  index_name(column_list);</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="2-6-索引设计原则"><a href="#2-6-索引设计原则" class="headerlink" title="2.6 索引设计原则"></a>2.6 索引设计原则</h2><p>​    索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p><ul><li><p>对查询频次较高，且数据量比较大的表建立索引。</p></li><li><p>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</p></li><li><p>使用唯一索引，区分度越高，使用索引的效率越高。</p></li><li><p>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</p></li><li><p>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I/O效率。</p></li><li><p>利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建复合索引:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_name_email_status <span class="keyword">ON</span> tb_seller(<span class="keyword">NAME</span>,email,<span class="keyword">STATUS</span>);</span><br><span class="line"></span><br><span class="line">就相当于</span><br><span class="line">对name 创建索引 ;</span><br><span class="line">对name , email 创建了索引 ;</span><br><span class="line">对name , email, status 创建了索引 ;</span><br></pre></td></tr></table></figure><h1 id="3-视图"><a href="#3-视图" class="headerlink" title="3. 视图"></a>3. 视图</h1><h2 id="3-1-视图概述"><a href="#3-1-视图概述" class="headerlink" title="3.1 视图概述"></a>3.1 视图概述</h2><p>​    视图（View）是一种虚拟存在的表。视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。通俗的讲，视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</p><p>视图相对于普通的表的优势主要包括以下几项。</p><ul><li>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。</li><li>安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</li><li>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</li></ul><h2 id="3-2-创建或者修改视图"><a href="#3-2-创建或者修改视图" class="headerlink" title="3.2 创建或者修改视图"></a>3.2 创建或者修改视图</h2><p>创建视图的语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>] [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;]</span><br><span class="line"><span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure><p>修改视图的语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;]</span><br><span class="line"><span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选项 : </span><br><span class="line">WITH [CASCADED | LOCAL] CHECK OPTION 决定了是否允许更新数据使记录不再满足视图的条件。</span><br><span class="line">LOCAL ： 只要满足本视图的条件就可以更新。</span><br><span class="line">CASCADED ： 必须满足所有针对该视图的所有视图的条件才可以更新。 默认值.</span><br></pre></td></tr></table></figure><p>示例：</p><p>创建city_country_view视图 , 执行如下SQL : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> city_country_view </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> t.*,c.country_name <span class="keyword">from</span> country c , city t <span class="keyword">where</span> c.country_id = t.country_id;</span><br></pre></td></tr></table></figure><p>查询视图 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city_country_view;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-16.png" alt="1-16"></p><p>修改视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> city_country_view <span class="keyword">set</span> city_name=<span class="string">'西安市'</span> <span class="keyword">where</span> city_id=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>更新视图，也会相应更新表的数据</p><p><img src="../../images/mysql/1-17.png" alt="1-17"></p><h2 id="3-3-查看视图"><a href="#3-3-查看视图" class="headerlink" title="3.3 查看视图"></a>3.3 查看视图</h2><p>​    从 MySQL 5.1 版本开始，使用 SHOW TABLES 命令的时候不仅显示表的名字，同时也会显示视图的名字，而不存在单独显示视图的 SHOW VIEWS 命令。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-18.png" alt="1-18"></p><p>同样，在使用 SHOW TABLE STATUS 命令的时候，不但可以显示表的信息，同时也可以显示视图的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'city_country_view'</span>\G;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-19.png" alt="1-19"></p><p>如果需要查询某个视图的定义，可以使用 SHOW CREATE VIEW 命令进行查看 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> city_country_view \G;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-20.png" alt="1-20"></p><h2 id="3-4-删除视图"><a href="#3-4-删除视图" class="headerlink" title="3.4 删除视图"></a>3.4 删除视图</h2><p>语法 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] view_name [, view_name] ...[RESTRICT | <span class="keyword">CASCADE</span>]</span><br></pre></td></tr></table></figure><p>示例 </p><p>删除视图city_country_view :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> city_country_view ;</span><br><span class="line">//没有这个视图也不会出错，if exists</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="keyword">if</span> <span class="keyword">exists</span> city_country_view ;</span><br></pre></td></tr></table></figure><h1 id="4-存储过程和函数"><a href="#4-存储过程和函数" class="headerlink" title="4. 存储过程和函数"></a>4. 存储过程和函数</h1><h2 id="4-1-存储过程和函数概述"><a href="#4-1-存储过程和函数概述" class="headerlink" title="4.1 存储过程和函数概述"></a>4.1 存储过程和函数概述</h2><p>​    存储过程和函数是  事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。    </p><p>​    存储过程和函数的区别在于函数必须有返回值，而存储过程没有。</p><p>​    函数 ： 是一个有返回值的过程 ；</p><p>​    过程 ： 是一个没有返回值的函数 ；</p><h2 id="4-2-创建存储过程"><a href="#4-2-创建存储过程" class="headerlink" title="4.2 创建存储过程"></a>4.2 创建存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> procedure_name ([proc_parameter[,...]])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">end</span> ;</span><br></pre></td></tr></table></figure><p>示例 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'Hello Mysql'</span> ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p><strong><font color="red">知识小贴士</font></strong></p><p><strong>DELIMITER</strong></p><p>​    该关键字用来声明SQL语句的分隔符 , 告诉 MySQL 解释器，该段命令是否已经结束了，mysql是否可以执行了。默认情况下，delimiter是分号;。在命令行客户端中，如果有一行命令以分号结束，那么回车后，mysql将会执行该命令。</p><h2 id="4-3-调用存储过程"><a href="#4-3-调用存储过程" class="headerlink" title="4.3 调用存储过程"></a>4.3 调用存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> procedure_name() ;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> pro_test1();</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-21.png" alt="1-21"></p><h2 id="4-4-查看存储过程"><a href="#4-4-查看存储过程" class="headerlink" title="4.4 查看存储过程"></a>4.4 查看存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询demo_01数据库中的所有的存储过程</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">'demo_01'</span>;</span><br><span class="line"><span class="comment">-- 查询存储过程的状态信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">procedure</span> <span class="keyword">status</span>;</span><br><span class="line"><span class="comment">-- 查询某个存储过程的定义</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> pro_test1 \G;</span><br></pre></td></tr></table></figure><h2 id="4-5-删除存储过程"><a href="#4-5-删除存储过程" class="headerlink" title="4.5 删除存储过程"></a>4.5 删除存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span>  [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] sp_name ；</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> pro_test1;</span><br></pre></td></tr></table></figure><h2 id="4-6-语法"><a href="#4-6-语法" class="headerlink" title="4.6 语法"></a>4.6 语法</h2><p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构 ， 来完成比较复杂的功能。</p><h3 id="4-6-1-变量"><a href="#4-6-1-变量" class="headerlink" title="4.6.1 变量"></a>4.6.1 变量</h3><ul><li><p>DECLARE</p><p>通过 DECLARE 可以定义一个局部变量，该变量的作用范围只能在 BEGIN…END 块中。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> var_name[,...] <span class="keyword">type</span> [<span class="keyword">DEFAULT</span> <span class="keyword">value</span>]</span><br></pre></td></tr></table></figure><p>示例 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test2() </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">num</span>+ <span class="number">10</span>; </span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ; </span><br><span class="line">查看</span><br><span class="line"><span class="keyword">call</span> pro_test2();</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-22.png" alt="1-22"></p><ul><li>SET</li></ul><p>直接赋值使用 SET，可以赋常量或者赋表达式，具体语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET var_name &#x3D; expr [, var_name &#x3D; expr] ...</span><br></pre></td></tr></table></figure><p>示例 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">procedure</span> pro_test3()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">SET</span> <span class="keyword">NAME</span> = <span class="string">'MYSQL'</span>;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">NAME</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> pro_test3();</span><br></pre></td></tr></table></figure><p>也可以通过select … into 方式进行赋值操作 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> pro_test4()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">declare</span>  countnum <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> countnum <span class="keyword">from</span> city;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'city表中的记录数为：'</span>,countnum);</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">call</span> pro_test4();</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-23.png" alt="1-23"></p><h3 id="4-6-2-if条件判断"><a href="#4-6-2-if条件判断" class="headerlink" title="4.6.2 if条件判断"></a>4.6.2 if条件判断</h3><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if search_condition then statement_list</span><br><span class="line">[elseif search_condition then statement_list] ...</span><br><span class="line">[else statement_list]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure><p>需求： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型 </span><br><span class="line">180 及以上 ----------&gt; 身材高挑</span><br><span class="line">170 - 180  ---------&gt; 标准身材</span><br><span class="line">170 以下  ----------&gt; 一般身材</span><br></pre></td></tr></table></figure><p>示例 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test5()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span>  height  <span class="built_in">int</span>  <span class="keyword">default</span>  <span class="number">175</span>; </span><br><span class="line">  <span class="keyword">declare</span>  description  <span class="built_in">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  if  height &gt;= 180  then</span><br><span class="line">    <span class="keyword">set</span> description = <span class="string">'身材高挑'</span>;</span><br><span class="line">  elseif height &gt;= 170 and height &lt; 180  then</span><br><span class="line">    <span class="keyword">set</span> description = <span class="string">'标准身材'</span>;</span><br><span class="line">  else</span><br><span class="line">    <span class="keyword">set</span> description = <span class="string">'一般身材'</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'身高：'</span>,height,<span class="string">'   对应的身材类型为：'</span>,description);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> pro_test5();</span><br></pre></td></tr></table></figure><p>调用结果为 : </p><p> <img src="../../images/mysql/1-24.png" alt="1-24"></p><h3 id="4-6-3-传递参数"><a href="#4-6-3-传递参数" class="headerlink" title="4.6.3 传递参数"></a>4.6.3 传递参数</h3><p>语法格式 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create procedure procedure_name([in&#x2F;out&#x2F;inout] 参数名   参数类型)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">IN :   该参数可以作为输入，也就是需要调用方传入值 , 默认</span><br><span class="line">OUT:   该参数作为输出，也就是该参数可以作为返回值</span><br><span class="line">INOUT: 既可以作为输入参数，也可以作为输出参数</span><br></pre></td></tr></table></figure><p><strong>IN - 输入</strong></p><p>需求 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型</span><br></pre></td></tr></table></figure><p>示例  : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test6(<span class="keyword">in</span> height <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> description <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="string">''</span>;</span><br><span class="line">  if height &gt;= 180 then</span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">'身材高挑'</span>;</span><br><span class="line">  elseif height &gt;= 170 and height &lt; 180 then</span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">'标准身材'</span>;</span><br><span class="line">  else</span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">'一般身材'</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'身高 '</span>, height , <span class="string">'对应的身材类型为:'</span>,description);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> pro_test6(<span class="number">168</span>);</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-25.png" alt="1-25"></p><p><strong>OUT-输出</strong></p><p> 需求 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据传入的身高变量，获取当前身高的所属的身材类型</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test7(<span class="keyword">in</span> height <span class="built_in">int</span> , <span class="keyword">out</span> description <span class="built_in">varchar</span>(<span class="number">100</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> height &gt;= <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">'身材高挑'</span>;</span><br><span class="line">  elseif height &gt;= 170 and height &lt; 180 then</span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">'标准身材'</span>;</span><br><span class="line">  else</span><br><span class="line">    <span class="keyword">set</span> description=<span class="string">'一般身材'</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>调用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call pro_test7(168, @description);</span><br><span class="line"></span><br><span class="line">select @description;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-26.png" alt="1-26"></p><p><font color="red"><strong>小知识</strong> </font></p><p>@description :  这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用的，这个类似于全局变量一样。</p><p>@@global.sort_buffer_size : 这种在变量前加上 “@@” 符号, 叫做 系统变量 </p><h3 id="4-6-4-case结构"><a href="#4-6-4-case结构" class="headerlink" title="4.6.4 case结构"></a>4.6.4 case结构</h3><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">方式一 : 有值，等于执行后面</span><br><span class="line">CASE case_value</span><br><span class="line">  WHEN when_value THEN statement_list</span><br><span class="line">  [WHEN when_value THEN statement_list] ...</span><br><span class="line">  [ELSE statement_list]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line">方式二 : 没有值，当条件判断成立，执行后面</span><br><span class="line">CASE</span><br><span class="line">  WHEN search_condition THEN statement_list</span><br><span class="line">  [WHEN search_condition THEN statement_list] ...</span><br><span class="line">  [ELSE statement_list]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure><p>需求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个月份, 然后计算出所在的季度</span><br></pre></td></tr></table></figure><p>示例  :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test8(<span class="keyword">month</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> <span class="keyword">result</span> <span class="built_in">varchar</span>(<span class="number">20</span>);</span><br><span class="line">  case </span><br><span class="line">    when month &gt;= 1 and month &lt;=3 then </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> = <span class="string">'第一季度'</span>;</span><br><span class="line">    when month &gt;= 4 and month &lt;=6 then </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> = <span class="string">'第二季度'</span>;</span><br><span class="line">    when month &gt;= 7 and month &lt;=9 then </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> = <span class="string">'第三季度'</span>;</span><br><span class="line">    when month &gt;= 10 and month &lt;=12 then </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> = <span class="string">'第四季度'</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'您输入的月份为 :'</span>, <span class="keyword">month</span> , <span class="string">' , 该月份为 : '</span> , <span class="keyword">result</span>) <span class="keyword">as</span> <span class="keyword">content</span> ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> pro_test8(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="4-6-5-while循环"><a href="#4-6-5-while循环" class="headerlink" title="4.6.5 while循环"></a>4.6.5 while循环</h3><p>语法结构: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while search_condition <span class="keyword">do</span></span><br><span class="line">statement_list</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>;</span><br></pre></td></tr></table></figure><p>需求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算从1加到n的值</span><br></pre></td></tr></table></figure><p>示例  : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test9(n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">  while num&lt;=n do</span><br><span class="line">    <span class="keyword">set</span> total = total + <span class="keyword">num</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">num</span> = <span class="keyword">num</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line">  <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> pro_test9(<span class="number">100</span>);</span><br><span class="line">删除</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span>  pro_test9;</span><br></pre></td></tr></table></figure><h3 id="4-6-6-repeat结构"><a href="#4-6-6-repeat结构" class="headerlink" title="4.6.6 repeat结构"></a>4.6.6 repeat结构</h3><p>有条件的循环控制语句, 当满足条件的时候退出循环 。while 是满足条件才执行，repeat 是满足条件就退出循环。</p><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REPEAT</span><br><span class="line">  statement_list</span><br><span class="line">  UNTIL search_condition</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">REPEAT</span>;</span><br></pre></td></tr></table></figure><p>需求: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算从1加到n的值</span><br></pre></td></tr></table></figure><p>示例  : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test10(n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  repeat </span><br><span class="line">    <span class="keyword">set</span> total = total + n;</span><br><span class="line">    <span class="keyword">set</span> n = n - <span class="number">1</span>;</span><br><span class="line">    until n=0  </span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">  <span class="keyword">select</span> total ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> pro_test10(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">注意：until n=0  不加；，加；报错</span><br></pre></td></tr></table></figure><h3 id="4-6-7-loop语句"><a href="#4-6-7-loop语句" class="headerlink" title="4.6.7 loop语句"></a>4.6.7 loop语句</h3><p>LOOP 实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用 LEAVE 语句实现，具体语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] LOOP</span><br><span class="line">  statement_list</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span> [end_label]</span><br></pre></td></tr></table></figure><p>如果不在 statement_list 中增加退出循环的语句，那么 LOOP 语句可以用来实现简单的死循环。</p><h3 id="4-6-8-leave语句"><a href="#4-6-8-leave语句" class="headerlink" title="4.6.8 leave语句"></a>4.6.8 leave语句</h3><p>用来从标注的流程构造中退出，通常和 BEGIN … END 或者循环一起使用。下面是一个使用 LOOP 和 LEAVE 的简单例子 , 退出循环：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_test11(n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  ins: LOOP   </span><br><span class="line">    IF n &lt;= 0 then</span><br><span class="line">      leave ins;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    <span class="keyword">set</span> total = total + n;</span><br><span class="line">    <span class="keyword">set</span> n = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">LOOP</span> ins;</span><br><span class="line">  <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> pro_test11(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="4-6-9-游标-光标"><a href="#4-6-9-游标-光标" class="headerlink" title="4.6.9 游标/光标"></a>4.6.9 游标/光标</h3><p>游标是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用光标对结果集进行循环的处理。光标的使用包括光标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。</p><p>声明光标：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> select_statement ;</span><br></pre></td></tr></table></figure><p>OPEN 光标：打开</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPEN cursor_name ;</span><br></pre></td></tr></table></figure><p>FETCH 光标：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FETCH cursor_name INTO var_name [, var_name] ...</span><br></pre></td></tr></table></figure><p>CLOSE 光标：关闭</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLOSE cursor_name ;</span><br></pre></td></tr></table></figure><p>示例 : </p><p>初始化脚本:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment ,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'姓名'</span>,</span><br><span class="line">  age <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">comment</span> <span class="string">'年龄'</span>,</span><br><span class="line">  salary <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">comment</span> <span class="string">'薪水'</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,age,salary) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'金毛狮王'</span>,<span class="number">55</span>,<span class="number">3800</span>),(<span class="literal">null</span>,<span class="string">'白眉鹰王'</span>,<span class="number">60</span>,<span class="number">4000</span>),(<span class="literal">null</span>,<span class="string">'青翼蝠王'</span>,<span class="number">38</span>,<span class="number">2800</span>),(<span class="literal">null</span>,<span class="string">'紫衫龙王'</span>,<span class="number">42</span>,<span class="number">1800</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表中数据, 并逐行获取进行展示</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test11()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> e_id <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_name <span class="built_in">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_age <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_salary <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">  open emp_result;</span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id='</span>,e_id , <span class="string">', name='</span>,e_name, <span class="string">', age='</span>, e_age, <span class="string">', 薪资为: '</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id='</span>,e_id , <span class="string">', name='</span>,e_name, <span class="string">', age='</span>, e_age, <span class="string">', 薪资为: '</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id='</span>,e_id , <span class="string">', name='</span>,e_name, <span class="string">', age='</span>, e_age, <span class="string">', 薪资为: '</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id='</span>,e_id , <span class="string">', name='</span>,e_name, <span class="string">', age='</span>, e_age, <span class="string">', 薪资为: '</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id='</span>,e_id , <span class="string">', name='</span>,e_name, <span class="string">', age='</span>, e_age, <span class="string">', 薪资为: '</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  close emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><p>声明：declare XXX cursor for XXX;</p><p>当抓取不到数据时，设置变量</p><p>定义变量：declare exit handler for not found set XXX;</p><p>通过循环结构 , 获取游标中的数据 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test12()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> age <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> salary <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> has_data <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> emp_result <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">EXIT</span> <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="keyword">FOUND</span> <span class="keyword">set</span> has_data = <span class="number">0</span>;</span><br><span class="line">  open emp_result;</span><br><span class="line">  repeat</span><br><span class="line">    fetch emp_result into id , name , age , salary;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id为'</span>,<span class="keyword">id</span>, <span class="string">', name 为'</span> ,<span class="keyword">name</span> , <span class="string">', age为 '</span> ,age , <span class="string">', 薪水为: '</span>, salary);</span><br><span class="line">    until has_data = 0</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">  close emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ; </span><br><span class="line"><span class="keyword">call</span> pro_test12();</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-27.png" alt="1-27"></p><h2 id="4-7-存储函数"><a href="#4-7-存储函数" class="headerlink" title="4.7 存储函数"></a>4.7 存储函数</h2><p>语法结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION function_name([param type ... ]) </span><br><span class="line">RETURNS type </span><br><span class="line">BEGIN</span><br><span class="line">...</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>案例 : </p><p>定义一个存储过程, 请求满足条件的总记录数 ;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> count_city(countryId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> cnum <span class="built_in">int</span> ;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> cnum <span class="keyword">from</span> city <span class="keyword">where</span> country_id = countryId;</span><br><span class="line">  return cnum;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>调用: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select count_city(1);</span><br><span class="line">select count_city(2);</span><br><span class="line">删除</span><br><span class="line">drop function count_city();</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-28.png" alt="1-28"></p><p>出现错误：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)</span><br></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_bin_trust_function_creators=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><a href="https://www.jb51.net/article/97037.htm" target="_blank" rel="noopener">mysql 报错This function has none of DETERMINISTIC解决方案</a></p><h1 id="5-触发器"><a href="#5-触发器" class="headerlink" title="5. 触发器"></a>5. 触发器</h1><h2 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h2><p>触发器是与表有关的数据库对象，指在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性 , 日志记录 , 数据校验等操作 。</p><p>使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD的使用</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><h2 id="5-2-创建触发器"><a href="#5-2-创建触发器" class="headerlink" title="5.2 创建触发器"></a>5.2 创建触发器</h2><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name </span><br><span class="line"><span class="keyword">before</span>/<span class="keyword">after</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> tbl_name </span><br><span class="line">[ <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> ]  <span class="comment">-- 行级触发器</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">trigger_stmt ;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>示例 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过触发器记录 emp 表的数据变更日志 , 包含增加, 修改 , 删除 ;</span><br></pre></td></tr></table></figure><p>首先创建一张日志表 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_logs(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  operation <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作类型, insert/update/delete'</span>,</span><br><span class="line">  operate_time datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作时间'</span>,</span><br><span class="line">  operate_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作表的ID'</span>,</span><br><span class="line">  operate_params <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">comment</span> <span class="string">'操作参数'</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><p>创建 insert 型触发器，完成插入数据时的日志记录 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_insert_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">insert</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (<span class="keyword">id</span>,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'insert'</span>,<span class="keyword">now</span>(),new.id,<span class="keyword">concat</span>(<span class="string">'插入后(id:'</span>,new.id,<span class="string">', name:'</span>,new.name,<span class="string">', age:'</span>,new.age,<span class="string">', salary:'</span>,new.salary,<span class="string">')'</span>));</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>创建 update 型触发器，完成更新数据时的日志记录 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_update_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">update</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (<span class="keyword">id</span>,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'update'</span>,<span class="keyword">now</span>(),new.id,<span class="keyword">concat</span>(<span class="string">'修改前(id:'</span>,old.id,<span class="string">', name:'</span>,old.name,<span class="string">', age:'</span>,old.age,<span class="string">', salary:'</span>,old.salary,<span class="string">') , 修改后(id'</span>,new.id, <span class="string">'name:'</span>,new.name,<span class="string">', age:'</span>,new.age,<span class="string">', salary:'</span>,new.salary,<span class="string">')'</span>));</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>创建delete 行的触发器 , 完成删除数据时的日志记录 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_delete_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">delete</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (<span class="keyword">id</span>,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'delete'</span>,<span class="keyword">now</span>(),old.id,<span class="keyword">concat</span>(<span class="string">'删除前(id:'</span>,old.id,<span class="string">', name:'</span>,old.name,<span class="string">', age:'</span>,old.age,<span class="string">', salary:'</span>,old.salary,<span class="string">')'</span>));</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,age,salary) <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">'光明左使'</span>,<span class="number">30</span>,<span class="number">3500</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,age,salary) <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">'光明右使'</span>,<span class="number">33</span>,<span class="number">3200</span>);</span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> age = <span class="number">39</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><img src="../../images/mysql/1-29.png" alt="1-29"></p><h2 id="5-3-删除触发器"><a href="#5-3-删除触发器" class="headerlink" title="5.3 删除触发器"></a>5.3 删除触发器</h2><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [schema_name.]trigger_name</span><br></pre></td></tr></table></figure><p>如果没有指定 schema_name，默认为当前数据库 。</p><h2 id="5-4-查看触发器"><a href="#5-4-查看触发器" class="headerlink" title="5.4 查看触发器"></a>5.4 查看触发器</h2><p>可以通过执行 SHOW TRIGGERS 命令查看触发器的状态、语法等信息。</p><p>语法结构 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">triggers</span> ；</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql高级使用-索引，视图，存储过程，触发器&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://linhuide.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://linhuide.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux的安装</title>
    <link href="https://linhuide.github.io/post/a2918a76.html"/>
    <id>https://linhuide.github.io/post/a2918a76.html</id>
    <published>2020-04-06T07:15:03.000Z</published>
    <updated>2020-04-06T07:33:50.487Z</updated>
    
    <content type="html"><![CDATA[<p>VMware15虚拟机的安装和Linux的安装</p><a id="more"></a><h1 id="1-下载虚拟机"><a href="#1-下载虚拟机" class="headerlink" title="1.下载虚拟机"></a>1.下载虚拟机</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&mid=502715453&idx=1&sn=f08535e26e03d71589f405b663b2ce0b&chksm=0ee174d13996fdc7523236ce503a76dd85a71cb04cfa20013bc2e1b0bdd6aa813157c2116951&mpshare=1&scene=1&srcid=&sharer_sharetime=1586086410573&sharer_shareid=00eea3a26ac4fddadd3fa5b3a756a18a&key=b112a119ee94d5a08ecd5718883901159a366854de22a1d0fab4ca324e093b776fe869cddf1171b33974485d91d9397046ed6918b639a2ee17b1dc1dbe76f9455e75dc31a7c7cb0220f4a21a5e64c361&ascene=1&uin=MjI5NzAyNTcwNA%3D%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=A5q7S6WeY750bFB9gMgXOZk%3D&pass_ticket=WYA3RU%2BMpXrRlJCd0hS%2BAyjJiQHODsGe0ktghsN%2FJlfmVEmVQ0vzrCsv9ofCpNow" target="_blank" rel="noopener">VMware15虚拟机安装教程</a></p><h1 id="2-找好目录，安装虚拟机"><a href="#2-找好目录，安装虚拟机" class="headerlink" title="2.找好目录，安装虚拟机"></a>2.找好目录，安装虚拟机</h1><h1 id="3-最重要，许可证秘钥"><a href="#3-最重要，许可证秘钥" class="headerlink" title="3.最重要，许可证秘钥"></a>3.最重要，许可证秘钥</h1><p>许可证密钥输入：UY758-0RXEQ-M81WP-8ZM7Z-Y3HDA</p><h1 id="4-安装完成"><a href="#4-安装完成" class="headerlink" title="4.安装完成"></a>4.安装完成</h1><h1 id="5-个人找Linux-CentOS安装包"><a href="#5-个人找Linux-CentOS安装包" class="headerlink" title="5.个人找Linux  CentOS安装包"></a>5.个人找Linux  CentOS安装包</h1><h1 id="6-在虚拟机上安装"><a href="#6-在虚拟机上安装" class="headerlink" title="6.在虚拟机上安装"></a>6.在虚拟机上安装</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMjE1MjMyMw==&mid=502716093&idx=3&sn=3f240cd8e722e34e4b3d7bb1ab695cc3&chksm=0ee176513996ff47cb6842f777d6ffcd6f05880e35f8de5900686796150083b3f3a0e9c70689&mpshare=1&scene=1&srcid=&sharer_sharetime=1586093264959&sharer_shareid=00eea3a26ac4fddadd3fa5b3a756a18a&key=9b8298cd804d9d6f130eef24891416fdb6d920b99fbe8ac008c8f2c3b26e8a48de43c76b50b6da67f557e7c59afe8f41e48676572491ad0383579f0e816cbf13148a52e82c1bbd151789e49938e766e3&ascene=1&uin=MjI5NzAyNTcwNA%3D%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=AzgLKkH5jMTuRR%2BHpMuuToE%3D&pass_ticket=tLeqXemrkkNLr6zzulu1SnD2PiVWaH0C1TpV7VRcuzCCC68AhteAK3kDUJffRC%2Fh" target="_blank" rel="noopener">Linux CentOS安装教程</a></p><p><a href="https://www.runoob.com/w3cnote/vmware-install-centos7.html" target="_blank" rel="noopener">VMware 安装 Centos7 超详细过程</a></p><h1 id="7-开启Linux"><a href="#7-开启Linux" class="headerlink" title="7.开启Linux"></a>7.开启Linux</h1><p><img src="../images/linux/1.png" alt="1"></p><h1 id="8-开启中文"><a href="#8-开启中文" class="headerlink" title="8.开启中文"></a>8.开启中文</h1><p><img src="../images/linux/2.png" alt="2"></p><p><img src="../images/linux/3.png" alt="3"></p><h1 id="9-开网"><a href="#9-开网" class="headerlink" title="9.开网"></a>9.开网</h1><p><img src="../images/linux/4-linux%E5%BC%80%E7%BD%91-2.png" alt="4-linux开网-2"></p><p>还不行：</p><p>打开终端后我们就可以通过命令来操作</p><p>vim /etc/sysconfig/network-scripts/ifcfg-ens33</p><p>网卡的默认路径，ifcfg-ens33是Linux的默认网卡配置文件</p><p>进入后页面</p><p><img src="../images/linux/6.png" alt="6"></p><p>退出后，输入命令service network restart重启网络服务,点击回车…</p><p>输入命令ifconfig查看IP地址,我们能看到ens33网卡成功获取网络地址…</p><p>退出终端，打开火狐浏览器，输入百度网址，成功访问4399…</p><p><img src="../images/linux/7.png" alt="7"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VMware15虚拟机的安装和Linux的安装&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Linux" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/Linux/"/>
    
    
      <category term="Linux" scheme="https://linhuide.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>rides的学习与使用</title>
    <link href="https://linhuide.github.io/post/2c753e03.html"/>
    <id>https://linhuide.github.io/post/2c753e03.html</id>
    <published>2020-04-04T14:35:52.000Z</published>
    <updated>2020-04-17T11:46:14.260Z</updated>
    
    <content type="html"><![CDATA[<p>rides的学习与使用</p><a id="more"></a><h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h1><p>​    redis是一款高性能的NOSQL系列的非关系型数据库</p><ul><li>关系型数据库：mysql，oracle<ul><li>数据之间有关联关系</li><li>数据存储在硬盘的文件上</li></ul></li><li>非关系型数据库（NoSQL）：redis，hbase<ul><li>存储 Key：value</li><li>数据之间没有关联关系</li><li>数据存储在内存中</li></ul></li></ul><p>如果经常查询一些不太经常发生变化的数据</p><p><img src="../../images/rides/1.png" alt="1"></p><h2 id="1-1-什么是NOSQL"><a href="#1-1-什么是NOSQL" class="headerlink" title="1.1.什么是NOSQL"></a>1.1.什么是NOSQL</h2><p>​    NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</p><p>​    随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><h3 id="1-1-1-NOSQL和关系型数据库比较"><a href="#1-1-1-NOSQL和关系型数据库比较" class="headerlink" title="1.1.1.NOSQL和关系型数据库比较"></a>1.1.1.NOSQL和关系型数据库比较</h3><ul><li>优点：<ul><li>成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</li><li>查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。</li><li>存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。</li><li>扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</li></ul></li><li>缺点：<ul><li>维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。</li><li>不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。</li><li>不提供关系型数据库对事务的处理。</li></ul></li></ul><h3 id="1-1-2-非关系型数据库的优势："><a href="#1-1-2-非关系型数据库的优势：" class="headerlink" title="1.1.2.非关系型数据库的优势："></a>1.1.2.非关系型数据库的优势：</h3><ul><li>性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</li><li>可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</li></ul><h3 id="1-1-3-关系型数据库的优势："><a href="#1-1-3-关系型数据库的优势：" class="headerlink" title="1.1.3.关系型数据库的优势："></a>1.1.3.关系型数据库的优势：</h3><ul><li>复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li>事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</li></ul><h3 id="1-1-4-总结"><a href="#1-1-4-总结" class="headerlink" title="1.1.4.总结"></a>1.1.4.总结</h3><ul><li>关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，让NoSQL数据库对关系型数据库的不足进行弥补。</li><li>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</li></ul><h2 id="1-2-主流的NOSQL产品"><a href="#1-2-主流的NOSQL产品" class="headerlink" title="1.2.主流的NOSQL产品"></a>1.2.主流的NOSQL产品</h2><ul><li>键值(Key-Value)存储数据库<ul><li>相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB</li><li>典型应用： 内容缓存，主要用于处理大量数据的高访问负载。 </li><li>数据模型： 一系列键值对</li><li>优势： 快速查询</li><li>劣势： 存储的数据缺少结构化</li></ul></li><li>列存储数据库<ul><li>相关产品：Cassandra, HBase, Riak</li><li>典型应用：分布式的文件系统</li><li>数据模型：以列簇式存储，将同一列数据存在一起</li><li>优势：查找速度快，可扩展性强，更容易进行分布式扩展</li><li>劣势：功能相对局限</li></ul></li><li>文档型数据库<ul><li>相关产品：CouchDB、MongoDB</li><li>典型应用：Web应用（与Key-Value类似，Value是结构化的）</li><li>数据模型： 一系列键值对</li><li>优势：数据结构要求不严格</li><li>劣势： 查询性能不高，而且缺乏统一的查询语法</li></ul></li><li>图形(Graph)数据库<ul><li>相关数据库：Neo4J、InfoGrid、Infinite Graph</li><li>典型应用：社交网络</li><li>数据模型：图结构</li><li>优势：利用图结构相关算法。</li><li>劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</li></ul></li></ul><h2 id="1-3-什么是Redis"><a href="#1-3-什么是Redis" class="headerlink" title="1.3 什么是Redis"></a>1.3 什么是Redis</h2><p>​    Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：</p><ul><li>字符串类型 string</li><li>哈希类型 hash</li><li>列表类型 list</li><li>集合类型 set</li><li>有序集合类型 sortedset</li></ul><h3 id="1-3-1-redis的应用场景"><a href="#1-3-1-redis的应用场景" class="headerlink" title="1.3.1 redis的应用场景"></a>1.3.1 redis的应用场景</h3><ol><li>缓存（数据查询、短连接、新闻内容、商品内容等等）</li><li>聊天室的在线好友列表</li><li>任务队列。（秒杀、抢购、12306等等）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒</li><li>分布式集群架构中的session分离</li></ol><h1 id="2-下载安装"><a href="#2-下载安装" class="headerlink" title="2.下载安装"></a>2.下载安装</h1><ol><li>官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a></li><li>中文网：<a href="http://www.redis.net.cn/" target="_blank" rel="noopener">http://www.redis.net.cn/</a></li><li>解压直接可以使用：<ul><li>redis.windows.conf：配置文件</li><li>redis-cli.exe：redis的客户端</li><li>redis-server.exe：redis服务器端</li></ul></li></ol><h1 id="3-命令操作"><a href="#3-命令操作" class="headerlink" title="3.命令操作"></a>3.命令操作</h1><h2 id="1-redis的数据结构："><a href="#1-redis的数据结构：" class="headerlink" title="1.redis的数据结构："></a>1.redis的数据结构：</h2><ul><li>redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构<ul><li>value的数据结构：<br>1) 字符串类型 string<br>2) 哈希类型 hash ： map格式<br>3) 列表类型 list ： linkedlist格式。支持重复元素<br>4) 集合类型 set  ： 不允许重复元素<br>5) 有序集合类型 sortedset：不允许重复元素，且元素有顺序</li></ul></li></ul><p><img src="../../images/rides/2.png" alt="2"></p><h2 id="2-字符串类型-string"><a href="#2-字符串类型-string" class="headerlink" title="2.字符串类型 string"></a>2.字符串类型 string</h2><ol><li>存储： set key value<br>127.0.0.1:6379&gt; set username zhangsan<br>OK</li><li>获取： get key<br>127.0.0.1:6379&gt; get username<br>“zhangsan”</li><li>删除： del key<br>127.0.0.1:6379&gt; del age<br>(integer) 1</li></ol><h2 id="3-哈希类型-hash"><a href="#3-哈希类型-hash" class="headerlink" title="3.哈希类型 hash"></a>3.哈希类型 hash</h2><ol><li>存储： hset key field value<br>127.0.0.1:6379&gt; hset myhash username list<br>(integer) 1<br>127.0.0.1:6379&gt; hset myhash password 123<br>(integer) 1</li><li>获取： <ul><li>hget key field: 获取指定的field对应的值<br>127.0.0.1:6379&gt; hget myhash username<br>“lisi”</li><li>hgetall key：获取所有的field和value<br>127.0.0.1:6379&gt; hgetall myhash<br>1) “username”<br>2) “list”<br>3) “password”<br>4) “123”</li></ul></li><li>删除： hdel key field<br>127.0.0.1:6379&gt; hdel myhash username<br>(integer) 1</li></ol><h2 id="4-列表类型-list"><a href="#4-列表类型-list" class="headerlink" title="4.列表类型 list"></a>4.列表类型 list</h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><ol><li><p>添加：</p><ol><li><p>lpush key value: 将元素加入列表左表</p></li><li><p>rpush key value：将元素加入列表右边</p><p>127.0.0.1:6379&gt; lpush myList a<br>(integer) 1<br>127.0.0.1:6379&gt; lpush myList b<br>(integer) 2<br>127.0.0.1:6379&gt; rpush myList c<br>(integer) 3</p></li></ol></li><li><p>获取：</p><ul><li>lrange key start end ：范围获取<br>127.0.0.1:6379&gt; lrange myList 0 -1（所有元素）<br>1) “b”<br>2) “a”<br>3) “c”</li></ul></li><li><p>删除：</p><ul><li>lpop key： 删除列表最左边的元素，并将元素返回</li><li>rpop key： 删除列表最右边的元素，并将元素返回</li></ul></li></ol><p><img src="../../images/rides/3.png" alt="3"></p><h2 id="5-集合类型-set-：-不允许重复元素"><a href="#5-集合类型-set-：-不允许重复元素" class="headerlink" title="5.集合类型 set ： 不允许重复元素"></a>5.集合类型 set ： 不允许重复元素</h2><p>Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><ol><li>存储：sadd key value<br>127.0.0.1:6379&gt; sadd myset a<pre><code>(integer) 1127.0.0.1:6379&gt; sadd myset a(integer) 0</code></pre></li><li>获取：smembers key:获取set集合中所有元素<br>127.0.0.1:6379&gt; smembers myset<pre><code>1) &quot;a&quot;</code></pre></li><li>删除：srem key value:删除set集合中的某个元素<br>127.0.0.1:6379&gt; srem myset a<pre><code>(integer) 1</code></pre></li></ol><h2 id="6-有序集合类型-sortedset"><a href="#6-有序集合类型-sortedset" class="headerlink" title="6.有序集合类型 sortedset"></a>6.有序集合类型 sortedset</h2><p>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>有序集合的成员是唯一的,但分数(score)却可以重复。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1</p><p>不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><ol><li><p>存储：zadd key score value<br>127.0.0.1:6379&gt; zadd mysort 60 zhangsan</p><pre><code>(integer) 1127.0.0.1:6379&gt; zadd mysort 50 lisi(integer) 1127.0.0.1:6379&gt; zadd mysort 80 wangwu(integer) 1</code></pre></li><li><p>获取：zrange key start end [withscores]<br>127.0.0.1:6379&gt; zrange mysort 0 -1</p><pre><code> 1) &quot;lisi&quot; 2) &quot;zhangsan&quot; 3) &quot;wangwu&quot;127.0.0.1:6379&gt; zrange mysort 0 -1 withscores1) &quot;zhangsan&quot;2) &quot;60&quot;3) &quot;wangwu&quot;4) &quot;80&quot;5) &quot;lisi&quot;6) &quot;500&quot;</code></pre></li><li><p>删除：zrem key value<br>127.0.0.1:6379&gt; zrem mysort lisi</p><pre><code>(integer) 1</code></pre></li></ol><h2 id="7-通用命令"><a href="#7-通用命令" class="headerlink" title="7.通用命令"></a>7.通用命令</h2><ol><li>keys * : 查询所有的键</li><li>type key ： 获取键对应的value的类型</li><li>del key：删除指定的key value</li></ol><h1 id="4-持久化"><a href="#4-持久化" class="headerlink" title="4.持久化"></a>4.持久化</h1><ol><li><p>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</p></li><li><p>redis持久化机制：</p><ol><li><p>RDB：默认方式，不需要进行配置，默认就使用这种机制</p><ul><li>在一定的间隔时间中，检测key的变化情况，然后持久化数据</li></ul><ol><li><p>编辑redis.windwos.conf文件</p><p>after 900 sec (15 min) if at least 1 key changed</p><p>save 900 1（15分钟后有1个key发生改变，持久化一次）</p><p>after 300 sec (5 min) if at least 10 keys changed</p><p>save 300 10（5分钟后大于10个key发生改变，持久化一次）</p><p>after 60 sec if at least 10000 keys changed</p><p>save 60 10000（60秒后大于10000个key发生改变，持久化一次）</p></li><li><p>重新启动redis服务器，并指定配置文件名称<br>D:\redis-2.8.9&gt;redis-server.exe redis.windows.conf    </p></li></ol></li><li><p>AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p><ol><li><p>编辑redis.windwos.conf文件<br>appendonly no（关闭aof） –&gt; appendonly yes （开启aof）</p><p>appendfsync always ： 每一次操作都进行持久化</p><p>appendfsync everysec ： 每隔一秒进行一次持久化</p><p>appendfsync no     ： 不进行持久化</p></li></ol></li></ol></li></ol><h1 id="5-Java客户端-Jedis"><a href="#5-Java客户端-Jedis" class="headerlink" title="5.Java客户端 Jedis"></a>5.Java客户端 Jedis</h1><p>Jedis: 一款java操作redis数据库的工具.</p><p>使用步骤：</p><h2 id="1-下载jedis的jar包"><a href="#1-下载jedis的jar包" class="headerlink" title="1.下载jedis的jar包"></a>1.下载jedis的jar包</h2><p>地址：<a href="https://mvnrepository.com/artifact/redis.clients/jedis" target="_blank" rel="noopener">https://mvnrepository.com/artifact/redis.clients/jedis</a></p><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>,<span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    jedis.set(<span class="string">"username"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br><span class="line">rides：keys *</span><br></pre></td></tr></table></figure><h2 id="3-Jedis操作各种redis中的数据结构"><a href="#3-Jedis操作各种redis中的数据结构" class="headerlink" title="3.Jedis操作各种redis中的数据结构"></a>3.Jedis操作各种redis中的数据结构</h2><h3 id="3-1-字符串类型-string：set、get"><a href="#3-1-字符串类型-string：set、get" class="headerlink" title="3-1.字符串类型 string：set、get"></a>3-1.字符串类型 string：set、get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * string 数据结构操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">    <span class="comment">//如果使用空参构造，默认值 "localhost",6379端口</span></span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    <span class="comment">//存储</span></span><br><span class="line">    jedis.set(<span class="string">"username"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String username = jedis.get(<span class="string">"username"</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="comment">//可以使用setex()方法存储可以指定过期时间的 key value</span></span><br><span class="line">    jedis.setex(<span class="string">"activecode"</span>,<span class="number">20</span>,<span class="string">"hehe"</span>);</span><br><span class="line">    <span class="comment">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span></span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-哈希类型-hash-：-map格式"><a href="#3-2-哈希类型-hash-：-map格式" class="headerlink" title="3-2.哈希类型 hash ： map格式"></a>3-2.哈希类型 hash ： map格式</h3><p>操作：hset、hget、hgetAll</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    <span class="comment">// 存储hash</span></span><br><span class="line">    jedis.hset(<span class="string">"user"</span>,<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">    jedis.hset(<span class="string">"user"</span>,<span class="string">"age"</span>,<span class="string">"23"</span>);</span><br><span class="line">    jedis.hset(<span class="string">"user"</span>,<span class="string">"gender"</span>,<span class="string">"female"</span>);</span><br><span class="line">    <span class="comment">// 获取hash</span></span><br><span class="line">    String name = jedis.hget(<span class="string">"user"</span>, <span class="string">"name"</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="comment">// 获取hash的所有map中的数据</span></span><br><span class="line">    Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">"user"</span>);</span><br><span class="line">    <span class="comment">// keyset</span></span><br><span class="line">    Set&lt;String&gt; keySet = user.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">        <span class="comment">//获取value</span></span><br><span class="line">        String value = user.get(key);</span><br><span class="line">        System.out.println(key + <span class="string">":"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-列表类型-list-：-linkedlist格式、支持重复元素"><a href="#3-3-列表类型-list-：-linkedlist格式、支持重复元素" class="headerlink" title="3-3.列表类型 list ： linkedlist格式、支持重复元素"></a>3-3.列表类型 list ： linkedlist格式、支持重复元素</h3><p>操作：lpush / rpush、lpop / rpop、lrange start end : 范围获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    <span class="comment">// list 存储</span></span><br><span class="line">    <span class="comment">//从左边存</span></span><br><span class="line">    jedis.lpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</span><br><span class="line">    <span class="comment">//从右边存</span></span><br><span class="line">    jedis.rpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</span><br><span class="line">    <span class="comment">// list 范围获取</span></span><br><span class="line">    List&lt;String&gt; mylist = jedis.lrange(<span class="string">"mylist"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(mylist);</span><br><span class="line">    <span class="comment">//[c, b, a, a, b, c]</span></span><br><span class="line">    <span class="comment">// list 弹出</span></span><br><span class="line">    String element1 = jedis.lpop(<span class="string">"mylist"</span>);</span><br><span class="line">    System.out.println(element1);</span><br><span class="line">    <span class="comment">//c</span></span><br><span class="line">    String element2 = jedis.rpop(<span class="string">"mylist"</span>);</span><br><span class="line">    System.out.println(element2);</span><br><span class="line">    <span class="comment">//c</span></span><br><span class="line">    <span class="comment">// list 范围获取</span></span><br><span class="line">    List&lt;String&gt; mylist2 = jedis.lrange(<span class="string">"mylist"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(mylist2);</span><br><span class="line">    <span class="comment">//[b, a, a, b]</span></span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-集合类型-set-：-不允许重复元素"><a href="#3-4-集合类型-set-：-不允许重复元素" class="headerlink" title="3-4.集合类型 set  ： 不允许重复元素"></a>3-4.集合类型 set  ： 不允许重复元素</h3><p>操作：sadd、smembers:获取所有元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    <span class="comment">// set 存储</span></span><br><span class="line">    jedis.sadd(<span class="string">"myset"</span>,<span class="string">"java"</span>,<span class="string">"php"</span>,<span class="string">"c++"</span>);</span><br><span class="line">    <span class="comment">// set 获取</span></span><br><span class="line">    Set&lt;String&gt; myset = jedis.smembers(<span class="string">"myset"</span>);</span><br><span class="line">    System.out.println(myset);</span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-有序集合类型-sortedset：不允许重复元素，且元素有顺序"><a href="#3-5-有序集合类型-sortedset：不允许重复元素，且元素有顺序" class="headerlink" title="3-5.有序集合类型 sortedset：不允许重复元素，且元素有顺序"></a>3-5.有序集合类型 sortedset：不允许重复元素，且元素有顺序</h3><p>操作：zadd、zrange</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    <span class="comment">// sortedset 存储</span></span><br><span class="line">    jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">3</span>,<span class="string">"亚瑟"</span>);</span><br><span class="line">    jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">30</span>,<span class="string">"后裔"</span>);</span><br><span class="line">    jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">55</span>,<span class="string">"孙悟空"</span>);</span><br><span class="line">    <span class="comment">// sortedset 获取</span></span><br><span class="line">    Set&lt;String&gt; mysortedset = jedis.zrange(<span class="string">"mysortedset"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(mysortedset);</span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-jedis连接池：-JedisPool"><a href="#3-6-jedis连接池：-JedisPool" class="headerlink" title="3-6. jedis连接池： JedisPool"></a>3-6. jedis连接池： JedisPool</h3><p>使用：</p><ol><li>创建JedisPool连接池对象</li><li>调用方法 getResource()方法获取Jedis连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//0.创建一个配置对象</span></span><br><span class="line">    JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    <span class="comment">//最大活动对象数</span></span><br><span class="line">    config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//最大能够保持idel状态的对象数</span></span><br><span class="line">    config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//1.创建Jedis连接池对象</span></span><br><span class="line">    JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config,<span class="string">"localhost"</span>,<span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//2.获取连接</span></span><br><span class="line">    Jedis jedis = jedisPool.getResource();</span><br><span class="line">    <span class="comment">//3. 使用</span></span><br><span class="line">    jedis.set(<span class="string">"hehe"</span>,<span class="string">"heihei"</span>);</span><br><span class="line">    <span class="comment">//4. 关闭 归还到连接池中</span></span><br><span class="line">    jedis.close();;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jedis详细配置"><a href="#jedis详细配置" class="headerlink" title="jedis详细配置"></a>jedis详细配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最大活动对象数     </span></span><br><span class="line"><span class="meta">redis.pool.maxTotal</span>=<span class="string">1000    </span></span><br><span class="line"><span class="comment">#最大能够保持idel状态的对象数      </span></span><br><span class="line"><span class="meta">redis.pool.maxIdle</span>=<span class="string">100  </span></span><br><span class="line"><span class="comment">#最小能够保持idel状态的对象数   </span></span><br><span class="line"><span class="meta">redis.pool.minIdle</span>=<span class="string">50    </span></span><br><span class="line"><span class="comment">#当池内没有返回对象时，最大等待时间    </span></span><br><span class="line"><span class="meta">redis.pool.maxWaitMillis</span>=<span class="string">10000    </span></span><br><span class="line"><span class="comment">#当调用borrow Object方法时，是否进行有效性检查    </span></span><br><span class="line"><span class="meta">redis.pool.testOnBorrow</span>=<span class="string">true    </span></span><br><span class="line"><span class="comment">#当调用return Object方法时，是否进行有效性检查    </span></span><br><span class="line"><span class="meta">redis.pool.testOnReturn</span>=<span class="string">true  </span></span><br><span class="line"><span class="comment">#“空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1.  </span></span><br><span class="line"><span class="meta">redis.pool.timeBetweenEvictionRunsMillis</span>=<span class="string">30000  </span></span><br><span class="line"><span class="comment">#向调用者输出“链接”对象时，是否检测它的空闲超时；  </span></span><br><span class="line"><span class="meta">redis.pool.testWhileIdle</span>=<span class="string">true  </span></span><br><span class="line"><span class="comment"># 对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3.  </span></span><br><span class="line"><span class="meta">redis.pool.numTestsPerEvictionRun</span>=<span class="string">50  </span></span><br><span class="line"><span class="comment">#redis服务器的IP    </span></span><br><span class="line"><span class="meta">redis.ip</span>=<span class="string">xxxxxx  </span></span><br><span class="line"><span class="comment">#redis服务器的Port    </span></span><br><span class="line"><span class="meta">redis1.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure><h3 id="3-7-Jedis连接池工具类"><a href="#3-7-Jedis连接池工具类" class="headerlink" title="3-7.Jedis连接池工具类"></a>3-7.Jedis连接池工具类</h3><p>JedisPool工具类:</p><ul><li>加载配置文件，配置连接池的参数</li><li>提供获取连接的方法</li></ul><p>jedis.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">maxTotal</span>=<span class="string">50</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream("jedis.properties");</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据，设置到JedisPoolConfig中</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">"maxTotal"</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">"maxIdle"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化JedisPool</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config,pro.getProperty(<span class="string">"host"</span>),Integer.parseInt(pro.getProperty(<span class="string">"port"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过连接池工具类获取</span></span><br><span class="line">    Jedis jedis = JedisPoolUtils.getJedis();</span><br><span class="line">    <span class="comment">//2. 使用</span></span><br><span class="line">    jedis.set(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br><span class="line">    <span class="comment">//3. 关闭 归还到连接池中</span></span><br><span class="line">    jedis.close();;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><ol><li>提供index.html页面，页面中有一个省份 下拉列表</li><li>当页面加载完成后 发送ajax请求，加载所有省份</li></ol><ul><li>注意：使用redis缓存一些不经常发生变化的数据。<ul><li>数据库的数据一旦发生改变，则需要更新缓存。<ul><li>数据库的表执行增删改的相关操作，需要将redis缓存数据情况，再次存入</li><li>在service对应的增删改方法中，将redis数据删除。</li></ul></li></ul></li></ul><p><img src="../../images/rides/5.png" alt="5"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//domain</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Province</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProvinceDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>druif.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/redis?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工具类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类 使用Durid连接池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//使用ClassLoader加载配置文件，获取字节输入流</span></span><br><span class="line">            InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">            pro.load(is);</span><br><span class="line">            <span class="comment">//2.初始化连接池对象</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接Connection对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dao/impl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvinceDaoImpl</span> <span class="keyword">implements</span> <span class="title">ProvinceDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.声明成员变量 jdbctemplement</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.定义sql</span></span><br><span class="line">        String sql = <span class="string">"select * from province "</span>;</span><br><span class="line">        <span class="comment">//2.执行sql</span></span><br><span class="line">        List&lt;Province&gt; list = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Province&gt;(Province<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProvinceService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//redis+数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllJson</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//service/impl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvinceServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProvinceService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明dao</span></span><br><span class="line">    <span class="keyword">private</span> ProvinceDao dao = <span class="keyword">new</span> ProvinceDaoImpl();</span><br><span class="line">    <span class="comment">//查询数据库</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用redis缓存，工具类JedisPoolUtils之前有写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.先从redis中查询数据</span></span><br><span class="line">        <span class="comment">//1.1获取redis客户端连接</span></span><br><span class="line">        Jedis jedis = JedisPoolUtils.getJedis();</span><br><span class="line">        String province_json = jedis.get(<span class="string">"province"</span>);</span><br><span class="line">        <span class="comment">//2判断 province_json 数据是否为null</span></span><br><span class="line">        <span class="keyword">if</span>(province_json == <span class="keyword">null</span> || province_json.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//redis中没有数据</span></span><br><span class="line">            System.out.println(<span class="string">"redis中没数据，查询数据库..."</span>);</span><br><span class="line">            <span class="comment">//2.1从数据中查询</span></span><br><span class="line">            List&lt;Province&gt; ps = dao.findAll();</span><br><span class="line">            <span class="comment">//2.2将list序列化为json</span></span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                province_json = mapper.writeValueAsString(ps);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.3 将json数据存入redis</span></span><br><span class="line">            jedis.set(<span class="string">"province"</span>,province_json);</span><br><span class="line">            <span class="comment">//归还连接</span></span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"redis中有数据，查询缓存..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> province_json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/provinceServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvinceServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//数据库</span></span><br><span class="line">        <span class="comment">//1.调用service查询</span></span><br><span class="line">        ProvinceService service = <span class="keyword">new</span> ProvinceServiceImpl();</span><br><span class="line">        List&lt;Province&gt; list = service.findAll();</span><br><span class="line">        <span class="comment">//2.序列化list为json</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = mapper.writeValueAsString(list);</span><br><span class="line">        <span class="comment">//reids</span></span><br><span class="line">        <span class="comment">//1.调用service查询</span></span><br><span class="line">        ProvinceService service2 = <span class="keyword">new</span> ProvinceServiceImpl();</span><br><span class="line">        String json2 = service.findAllJson();</span><br><span class="line">        System.out.println(json2);</span><br><span class="line">        <span class="comment">//3.响应结果</span></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().write(json2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//发送ajax请求，加载所有省份数据</span></span></span><br><span class="line"><span class="javascript">            $.<span class="keyword">get</span>("provinceServlet",&#123;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//1.获取select</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> province = $(<span class="string">"#province"</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//2.遍历json数组</span></span></span><br><span class="line"><span class="javascript">                $(data).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//3.创建&lt;option&gt;</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> option = <span class="string">"&lt;option name='"</span>+<span class="keyword">this</span>.id+<span class="string">"'&gt;"</span>+<span class="keyword">this</span>.name+<span class="string">"&lt;/option&gt;"</span>;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//4.调用select的append追加option</span></span></span><br><span class="line">                    province.append(option);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择省份--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码实现成功</p><p><img src="../../images/rides/4.png" alt="4"></p><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rides的学习与使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="https://linhuide.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="rides" scheme="https://linhuide.github.io/tags/rides/"/>
    
      <category term="JAVA" scheme="https://linhuide.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>线程进阶-JUC的学习</title>
    <link href="https://linhuide.github.io/post/ca16add5.html"/>
    <id>https://linhuide.github.io/post/ca16add5.html</id>
    <published>2020-04-02T14:32:45.000Z</published>
    <updated>2020-04-03T13:43:36.820Z</updated>
    
    <content type="html"><![CDATA[<p>线程进阶-JUC的学习</p><a id="more"></a><h2 id="1-Java-JUC-简介"><a href="#1-Java-JUC-简介" class="headerlink" title="1.Java JUC 简介"></a>1.Java JUC 简介</h2><p>​    在 Java 5.0 提供了 java.util.concurrent （简称JUC ）包，在此包中增加了在并发编程中很常用的实用工具类，用于定义类似于线程的自定义子系统，包括线程池、异步 IO 和轻量级任务框架。提供可调的、灵活的线程池。还提供了设计用于多线程上下文中的 Collection 实现等。</p><h2 id="2-volatile-关键字-内存可见性"><a href="#2-volatile-关键字-内存可见性" class="headerlink" title="2.volatile 关键字-内存可见性"></a>2.volatile 关键字-内存可见性</h2><ul><li>内存可见性（Memory Visibility）：是指当某个线程正在使用对象状态而另一个线程在同时修改该状态，需要确保当一个线程修改了对象状态后，其他线程能够看到发生的状态变化。</li><li>可见性错误：是指当读操作与写操作在不同的线程中执行时，我们无法确保执行读操作的线程能适时地看到其他线程写入的值，有时甚至是根本不可能的事情。</li><li>我们可以通过同步来保证对象被安全地发布。除此之外我们也可以<br>使用一种更加轻量级的 volatile 变量。</li><li>Java 提供了一种稍弱的同步机制，即 volatile 变量，用来确保将变量的更新操作通知到其他线程。可以将 volatile 看做一个轻量级的锁，但是又与<br>锁有些不同<ul><li>对于多线程，不是一种互斥关系</li><li>不能保证变量状态的“原子性操作”</li></ul></li></ul><p><strong>例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVolatile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo td = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        <span class="keyword">new</span> Thread(td).start();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (td.isFlag()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"发生错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"flag="</span> + isFlag());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：flag=true</p><p>与预期不符：——————    没有打印出来</p><h3 id="内存可见性问题："><a href="#内存可见性问题：" class="headerlink" title="内存可见性问题："></a>内存可见性问题：</h3><ul><li>当多个线程操作共享数据时，彼此不可见</li></ul><p>main线程中，while (true)，很快， 可以读了flag=false，随后，线程1才把flag改为true，内存可见性问题</p><p><img src="../images/%E7%BA%BF%E7%A8%8B/7.png" alt="7"></p><h3 id="改1：同步锁"><a href="#改1：同步锁" class="headerlink" title="改1：同步锁"></a>改1：同步锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVolatile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo td = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        <span class="keyword">new</span> Thread(td).start();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(td)&#123;</span><br><span class="line">                <span class="keyword">if</span> (td.isFlag()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，效率低，如果多个线程的话，会产生效率问题，但是不加锁，会出现内存可见性问题</p><h3 id="改2：volatile"><a href="#改2：volatile" class="headerlink" title="改2：volatile"></a>改2：volatile</h3><p>volatile 关键字：</p><ul><li>当多个线程进行操作共享数据时，可以保证内存中的数据可见。</li><li>相较于 synchronized 是一种较为轻量级的同步策略。</li></ul><ul><li>注意：<ul><li>volatile 不具备“互斥性”（synchronized 互斥锁，一个线程访问，另一个线程访问不了）</li><li>volatile 不能保证变量的“原子性”（原子：不可分割）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVolatile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo td = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        <span class="keyword">new</span> Thread(td).start();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (td.isFlag()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"flag="</span> + isFlag());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个线程操作直接在主存中操作，效率要比锁的高</p><p><img src="../images/%E7%BA%BF%E7%A8%8B/8.png" alt="8"></p><p>volatile的性能低，在于jvm的底层优化，重排序。使用volatile后，不能重排序。</p><h2 id="3-原子变量-CAS算法"><a href="#3-原子变量-CAS算法" class="headerlink" title="3.原子变量-CAS算法"></a>3.原子变量-CAS算法</h2><h3 id="原子变量"><a href="#原子变量" class="headerlink" title="原子变量"></a>原子变量</h3><ul><li>Java类的小工具包，支持在单个变量上解除锁的线程安全编程。事实上，此包中的类可将 volatile 值、字段和数组元素的概念扩展到那些也提供原子条件更新操作的类。</li><li>有类 AtomicBoolean、AtomicInteger、AtomicLong 和 AtomicReference 的实例各自提供对相应类型单个变量的访问和更新。每个类也为该类型提供适当的实用工具方法。</li><li>AtomicIntegerArray、AtomicLongArray 和 AtomicReferenceArray 类进一步扩展了原子操作，对这些类型的数组提供了支持。这些类在为其数组元素提供 volatile 访问语义方面也引人注目，这对于普通数组来说是不受支持的。</li><li>核心方法：boolean compareAndSet(expectedValue, updateValue)</li><li>java.util.concurrent.atomic 包下提供了一些原子操作的常用类:<ul><li>AtomicBoolean 、AtomicInteger 、AtomicLong 、 AtomicReference</li><li>AtomicIntegerArray 、AtomicLongArray</li><li>AtomicMarkableReference</li><li>AtomicReferenceArray</li><li>AtomicStampedReference</li></ul></li></ul><p><strong>例子：i++ 的原子性问题：i++ 的操作实际上分为三个步骤“读-改-写”</strong></p><ul><li>int i = 10;</li><li>i = i++;   </li><li>i++底层操作：<ul><li>int temp = i;</li><li>i = i + 1;</li><li>i = temp;</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAtomicDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AtomicDemo ad = <span class="keyword">new</span> AtomicDemo();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(ad).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> serialNumber = <span class="number">0</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getSerialNumber());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSerialNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> serialNumber++；</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="产生重复数据，多线程问题（原子性问题）"><a href="#产生重复数据，多线程问题（原子性问题）" class="headerlink" title="产生重复数据，多线程问题（原子性问题）"></a>产生重复数据，多线程问题（原子性问题）</h3><p>线程1获取数据，改数据，但这时候线程2获取了数据，改了数据，当线程1改写数据，线程2又改写数据，发生错误</p><p><img src="../images/%E7%BA%BF%E7%A8%8B/9.png" alt="9"></p><h3 id="用volatile去改"><a href="#用volatile去改" class="headerlink" title="用volatile去改"></a>用volatile去改</h3><p>在内存中解决，虽然保证内存可见性，但是因为没有互斥性，不能保证原子性问题</p><p><img src="../images/%E7%BA%BF%E7%A8%8B/10.png" alt="10"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> serialNumber = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="解决方法：原子变量"><a href="#解决方法：原子变量" class="headerlink" title="解决方法：原子变量"></a>解决方法：原子变量</h3><p><strong>在 java.util.concurrent.atomic 包下提供了一些原子变量</strong></p><pre><code>1. volatile 保证内存可见性，里面包装封装的值都有volatile 2. CAS（Compare-And-Swap） 算法保证数据变量的原子性        1. CAS 算法是硬件对于并发操作的支持        2. CAS 包含了三个操作数：                1. 内存值  V                2. 预估值  A                3. 更新值  B                4. 当且仅当 V == A 时，赋值： V = B；否则，不会执行任何操作。</code></pre><p>CAS算法，如果当多个线程并发了，对主存中数据进行修改时，有且只有一个线程能成功，其他线程失败时，下一次不会阻塞，不会CPU争权，立即尝试</p><p><img src="../images/%E7%BA%BF%E7%A8%8B/11.png" alt="11"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAtomicDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AtomicDemo ad = <span class="keyword">new</span> AtomicDemo();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(ad).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> AtomicInteger serialNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(getSerialNumber());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSerialNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//i++，获取并自增</span></span><br><span class="line"><span class="keyword">return</span> serialNumber.getAndIncrement();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟CAS算法"><a href="#模拟CAS算法" class="headerlink" title="模拟CAS算法"></a>模拟CAS算法</h3><ul><li>CAS (Compare-And-Swap) 是一种硬件对并发的支持，针对多处理器操作而设计的处理器中的一种特殊指令，用于管理对共享数据的并发访问。</li><li>CAS 是一种无锁的非阻塞算法的实现。</li><li>CAS 包含了 3 个操作数：<ul><li>需要读写的内存值 V</li><li>进行比较的值 A</li><li>拟写入的新值 B</li></ul></li><li>当且仅当 V 的值等于 A 时，CAS 通过原子方式用新值 B 来更新 V 的值，否则不会执行任何操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 模拟 CAS 算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompareAndSwap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CompareAndSwap cas = <span class="keyword">new</span> CompareAndSwap();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> expectedValue = cas.get();</span><br><span class="line">                    <span class="keyword">boolean</span> b = cas.compareAndSet(expectedValue, (<span class="keyword">int</span>)(Math.random() * <span class="number">101</span>));</span><br><span class="line">                    System.out.println(b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompareAndSwap</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">//获取内存值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//比较（预估值，新值）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">compareAndSwap</span><span class="params">(<span class="keyword">int</span> expectedValue, <span class="keyword">int</span> newValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldValue = value;</span><br><span class="line">        <span class="keyword">if</span>(oldValue == expectedValue)&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expectedValue, <span class="keyword">int</span> newValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expectedValue == compareAndSwap(expectedValue, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-ConcurrentHashMap-锁分段机制"><a href="#4-ConcurrentHashMap-锁分段机制" class="headerlink" title="4.ConcurrentHashMap 锁分段机制"></a>4.ConcurrentHashMap 锁分段机制</h2><ul><li>Java 5.0 在 java.util.concurrent 包中提供了多种并发容器类来改进同步容器<br>的性能。</li><li>ConcurrentHashMap 同步容器类是Java 5 增加的一个线程安全的哈希表。对与多线程的操作，介于 HashMap 与 Hashtable 之间。内部采用“锁分段”机制替代 Hashtable 的独占锁。进而提高性能。</li><li>此包还提供了设计用于多线程上下文中的 Collection 实现：<ul><li>ConcurrentHashMap、ConcurrentSkipListMap、ConcurrentSkipListSet、CopyOnWriteArrayList 和 CopyOnWriteArraySet。</li><li>当期望许多线程访问一个给定 collection 时，ConcurrentHashMap 通常优于同步的 HashMap，ConcurrentSkipListMap 通常优于同步的 TreeMap。当期望的读数和遍历远远大于列表的更新数时，CopyOnWriteArrayList 优于同步的 ArrayList。</li></ul></li></ul><p>HashMap是线程不安全的，HashTable是线程安全的，HashTable有锁，并行转换为串行，效率低</p><p><img src="../images/%E7%BA%BF%E7%A8%8B/12.png" alt="12"></p><p>ConcurrentHashMap，采用锁分段机制，concurrentLeve，l默认有16个段，长度16，每个段是独立的锁，当多个线程并发访问时，并行，支持多个线程同时访问，效率高，也提供复合操作</p><p>JDK1.8，升级，Segment取消了，采用CAS算法</p><p><img src="../images/%E7%BA%BF%E7%A8%8B/13.png" alt="13"></p><p>例子：</p><p>CopyOnWriteArrayList/CopyOnWriteArraySet : “写入并复制”</p><p>注意：</p><ul><li>添加操作多时，效率低，因为每次添加时都会进行复制，开销非常的大。并发迭代操作多时可以选择。</li><li>适合迭代，又有并发问题，适合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCopyOnWriteArrayList</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">HelloThread ht = <span class="keyword">new</span> HelloThread();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(ht).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="comment">//线程安全的集合</span></span><br><span class="line"><span class="comment">//并发修改异常</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list2 = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line"><span class="comment">//改法，CopyOnWriteArrayList当每次写入时，都会在底层完成复制，复制一个新的链表，再继续添加</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">list.add(<span class="string">"AA"</span>);</span><br><span class="line">list.add(<span class="string">"BB"</span>);</span><br><span class="line">list.add(<span class="string">"CC"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">list.add(<span class="string">"AA"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Collections.synchronizedList，在线程-1中最后可以看</p><h2 id="5-CountDownLatch-闭锁"><a href="#5-CountDownLatch-闭锁" class="headerlink" title="5.CountDownLatch 闭锁"></a>5.CountDownLatch 闭锁</h2><ul><li>Java 5.0 在 java.util.concurrent 包中提供了多种并发容器类来改进同步容器<br>的性能。</li><li>CountDownLatch 一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</li><li>闭锁可以延迟线程的进度直到其到达终止状态，闭锁可以用来确保某些活动直到其他活动都完成才继续执行：<ul><li>确保某个计算在其需要的所有资源都被初始化之后才继续执行;</li><li>确保某个服务在其依赖的所有其他服务都已经启动之后才启动;</li><li>等待直到某个操作所有参与者都准备就绪再继续执行。</li></ul></li></ul><p>CountDownLatch ：闭锁，在完成某些运算是，只有其他所有线程的运算全部完成，当前运算才继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCountDownLatch</span> </span>&#123;</span><br><span class="line"><span class="comment">//10个线程，主线程，没有办法计算出时间，主线程等待10个分线程执行完在计算</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//10，CountDownLatch(10)，线程执行完后会-1</span></span><br><span class="line"><span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">LatchDemo ld = <span class="keyword">new</span> LatchDemo(latch);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(ld).start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//不为0时，等待</span></span><br><span class="line">latch.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"耗费时间为："</span> + (end - start));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LatchDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LatchDemo</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.latch = latch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//CountDownLatch，-1操作</span></span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-实现-Callable-接口"><a href="#6-实现-Callable-接口" class="headerlink" title="6.实现 Callable 接口"></a>6.实现 Callable 接口</h2><ul><li>Java 5.0 在 java.util.concurrent 提供了一个新的创建执行线程的方式：Callable 接口</li><li>Callable 接口类似于 Runnable，两者都是为那些其实例可能被另一个线程执行的类设计的。但是 Runnable 不会返回结果，并且无法抛出经过检查的异常。</li><li>Callable 需要依赖FutureTask ，FutureTask 也可以用作闭锁。</li></ul><p><strong>例子：</strong></p><p>创建执行线程的方式三：实现 Callable 接口。 </p><ul><li>相较于实现 Runnable 接口的方式，方法可以有返回值，并且可以抛出异常。</li><li>执行 Callable 方式，需要 FutureTask 实现类的支持，用于接收运算结果。  FutureTask 是  Future 接口的实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ThreadDemo td = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line"><span class="comment">//1.执行 Callable 方式，需要 FutureTask 实现类的支持，用于接收运算结果。</span></span><br><span class="line">FutureTask&lt;Integer&gt; result = <span class="keyword">new</span> FutureTask&lt;&gt;(td);</span><br><span class="line"><span class="keyword">new</span> Thread(result).start();</span><br><span class="line"><span class="comment">//2.接收线程运算后的结果</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Integer sum = result.get();  <span class="comment">//FutureTask 可用于 闭锁</span></span><br><span class="line">System.out.println(sum);</span><br><span class="line">System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class ThreadDemo implements Runnable&#123;</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void run() &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="../images/%E7%BA%BF%E7%A8%8B/14.png" alt="14"></p><h2 id="7-Lock-同步锁"><a href="#7-Lock-同步锁" class="headerlink" title="7.Lock 同步锁"></a>7.Lock 同步锁</h2><ul><li>在 Java 5.0 之前，协调共享对象的访问时可以使用的机制只有 synchronized 和 volatile 。Java 5.0 后增加了一些新的机制，但并不是一种替代内置锁的方法，而是当内置锁不适用时，作为一种可选择的高级功能。</li><li>ReentrantLock 实现了 Lock 接口，并提供了与synchronized 相同的互斥性和内存可见性。但相较于synchronized 提供了更高的处理锁的灵活性。</li></ul><h3 id="用于解决多线程安全问题的方式："><a href="#用于解决多线程安全问题的方式：" class="headerlink" title="用于解决多线程安全问题的方式："></a>用于解决多线程安全问题的方式：</h3><ul><li><p>synchronized:隐式锁</p><ul><li>同步代码块</li><li>同步方法</li></ul><p>jdk 1.5 后：</p></li><li><p>同步锁 Lock</p></li><li><p>注意</p><ul><li>是一个显示锁，需要通过 lock() 方法上锁，必须通过 unlock() 方法进行释放锁</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line"><span class="keyword">new</span> Thread(ticket, <span class="string">"1号窗口"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(ticket, <span class="string">"2号窗口"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(ticket, <span class="string">"3号窗口"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tick = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">lock.lock(); <span class="comment">//上锁</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tick &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" 完成售票，余票为："</span> + --tick);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">lock.unlock(); <span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者和消费者案例-虚假唤醒"><a href="#生产者和消费者案例-虚假唤醒" class="headerlink" title="生产者和消费者案例-虚假唤醒"></a>生产者和消费者案例-虚假唤醒</h3><p>因为有共享数据，所以使用同步代码，synchronized</p><p>因为当生产者进货后，消费者要消费，所以两个循环，要等待唤醒机制。</p><p><strong>出现问题：</strong></p><h4 id="1-当出现延迟，product-gt-1来回交替，程序没有停止"><a href="#1-当出现延迟，product-gt-1来回交替，程序没有停止" class="headerlink" title="1.当出现延迟，product &gt;= 1来回交替，程序没有停止"></a>1.当出现延迟，product &gt;= 1来回交替，程序没有停止</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">product &gt;= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span>(product &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"产品已满！"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + ++product);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者：product = 0; 循环次数：1–&gt;0，wait（）–&gt;停止了</p><p>生产者：product = 0–&gt;1; 循环次数：2–&gt;1，notifyAll（）–&gt;唤醒消费者</p><p>消费者：product = 1; 循环次数：0，从wait（）往下走，所以消费者结束了</p><p>生产者：product = 1; 循环次数：1–&gt;0，wait（）–&gt;停止了，但是没人唤醒，程序没结束</p><p>所以，去掉else</p><h4 id="2-wait（）方法可能会出现虚假唤醒问题"><a href="#2-wait（）方法可能会出现虚假唤醒问题" class="headerlink" title="2.wait（）方法可能会出现虚假唤醒问题"></a>2.wait（）方法可能会出现虚假唤醒问题</h4><p>虚假唤醒问题，文档中建议应该总是使用在循环中</p><p><img src="../images/%E7%BA%BF%E7%A8%8B/15.png" alt="15"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProductorAndConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clerk clerk = <span class="keyword">new</span> Clerk();</span><br><span class="line">        Productor pro = <span class="keyword">new</span> Productor(clerk);</span><br><span class="line">        Consumer cus = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        <span class="keyword">new</span> Thread(pro, <span class="string">"生产者 A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(cus, <span class="string">"消费者 B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(pro, <span class="string">"生产者 C"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(cus, <span class="string">"消费者 D"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//店员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> product = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//进货</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;<span class="comment">//循环次数：0</span></span><br><span class="line">        <span class="keyword">while</span>(product &gt;= <span class="number">1</span>)&#123;<span class="comment">//为了避免虚假唤醒问题，应该总是使用在循环中</span></span><br><span class="line">            System.out.println(<span class="string">"产品已满！"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + ++product);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//卖货</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;<span class="comment">//product = 0; 循环次数：0</span></span><br><span class="line">        <span class="keyword">while</span>(product &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"缺货！"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + --product);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            clerk.sale();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-Condition-控制线程通信"><a href="#8-Condition-控制线程通信" class="headerlink" title="8.Condition 控制线程通信"></a>8.Condition 控制线程通信</h2><ul><li>Condition 接口描述了可能会与锁有关联的条件变量。这些变量在用法上与使用 Object.wait 访问的隐式监视器类似，但提供了更强大的功能。需要特别指出的是，单个 Lock 可能与多个 Condition 对象关联。为了避免兼容性问题，Condition 方法的名称与对应的 Object 版本中的不同。</li><li>在 Condition 对象中，与 wait、notify 和 notifyAll 方法对应的分别是await、signal 和 signalAll。</li><li>Condition 实例实质上被绑定到一个锁上。要为特定 Lock 实例获得Condition 实例，请使用其 newCondition() 方法。</li></ul><h3 id="生产者和消费者案例-Lock改良"><a href="#生产者和消费者案例-Lock改良" class="headerlink" title="生产者和消费者案例-Lock改良"></a>生产者和消费者案例-Lock改良</h3><ul><li>this.wait()——&gt;condition.await();</li><li>this.notifyAll()——&gt; condition.signalAll();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProductorAndConsumerForLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clerk clerk = <span class="keyword">new</span> Clerk();</span><br><span class="line">        Productor pro = <span class="keyword">new</span> Productor(clerk);</span><br><span class="line">        Consumer con = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        <span class="keyword">new</span> Thread(pro, <span class="string">"生产者 A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(con, <span class="string">"消费者 B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(pro, <span class="string">"生产者 C"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(con, <span class="string">"消费者 D"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> product = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">//调用控制线程通信，等待唤醒机制</span></span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="comment">// 进货</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (product &gt;= <span class="number">1</span>) &#123; <span class="comment">// 为了避免虚假唤醒，应该总是使用在循环中。</span></span><br><span class="line">                System.out.println(<span class="string">"产品已满！"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span></span><br><span class="line">                               + ++product);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 卖货</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (product &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"缺货！"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span></span><br><span class="line">                               + --product);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            clerk.sale();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-线程按序交替"><a href="#9-线程按序交替" class="headerlink" title="9.线程按序交替"></a>9.线程按序交替</h2><p>编写一个程序，开启 3 个线程，这三个线程的 ID 分别为A、B、C，每个线程将自己的 ID 在屏幕上打印 10 遍，要求输出的结果必须按顺序显示。</p><p>如：ABCABCABC…… 依次递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestABCAlternate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AlternateDemo ad = <span class="keyword">new</span> AlternateDemo();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    ad.loopA(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    ad.loopB(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"B"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    ad.loopC(i);</span><br><span class="line">                    System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"C"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlternateDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当前正在执行线程的标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition1 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition condition2 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition condition3 = lock.newCondition();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> totalLoop : 循环第几轮</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loopA</span><span class="params">(<span class="keyword">int</span> totalLoop)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 判断</span></span><br><span class="line">            <span class="keyword">if</span> (number != <span class="number">1</span>) &#123;</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2. 打印</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + i + <span class="string">"\t"</span> + totalLoop);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3. 唤醒</span></span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loopB</span><span class="params">(<span class="keyword">int</span> totalLoop)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 判断</span></span><br><span class="line">            <span class="keyword">if</span> (number != <span class="number">2</span>) &#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2. 打印</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + i + <span class="string">"\t"</span> + totalLoop);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3. 唤醒</span></span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loopC</span><span class="params">(<span class="keyword">int</span> totalLoop)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 判断</span></span><br><span class="line">            <span class="keyword">if</span> (number != <span class="number">3</span>) &#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2. 打印</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + i + <span class="string">"\t"</span> + totalLoop);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3. 唤醒</span></span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A    1    1<br>B    1    1</p><p>C    1    1</p><hr><p>A    1    2<br>B    1    2<br>C    1    2</p><h2 id="10ReadWriteLock-读写锁"><a href="#10ReadWriteLock-读写锁" class="headerlink" title="10ReadWriteLock 读写锁"></a>10ReadWriteLock 读写锁</h2><ul><li>ReadWriteLock 维护了一对相关的锁，一个用于只读操作，另一个用于写入操作。只要没有 writer，读取锁可以由多个 reader 线程同时保持。写入锁是独占的。。</li><li>ReadWriteLock 读取操作通常不会改变共享资源，但执行写入操作时，必须独占方式来获取锁。对于读取操作占多数的数据结构。 ReadWriteLock 能提供比独占锁更高的并发性。而对于只读的数据结构，其中包含的不变性可以完全不需要考虑加锁操作。</li></ul><p>ReadWriteLock : 读写锁</p><ul><li>写写/读写：需要“互斥”</li><li>读读：不需要互斥</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReadWriteLock</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ReadWriteLockDemo rw = <span class="keyword">new</span> ReadWriteLockDemo();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rw.set((<span class="keyword">int</span>)(Math.random() * <span class="number">101</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">"Write:"</span>).start();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rw.get();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> ReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"><span class="comment">//读</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//上锁</span></span><br><span class="line">lock.readLock().lock(); </span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + number);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">lock.readLock().unlock(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">lock.writeLock().lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line"><span class="keyword">this</span>.number = number;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">lock.writeLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-线程八锁"><a href="#11-线程八锁" class="headerlink" title="11.线程八锁"></a>11.线程八锁</h2><ul><li>一个对象里面如果有多个synchronized方法，某一个时刻内，只要一个线程去调用其中的一个synchronized方法了，其它的线程都只能等待，换句话说，某一个时刻内，只能有唯一一个线程去访问这些synchronized方法</li><li>锁的是当前对象this，被锁定后，其它的线程都不能进入到当前对象的其它的<br>synchronized方法</li><li>加个普通方法后发现和同步锁无关</li><li>换成两个对象后，不是同一把锁了，情况立刻变化。</li><li>都换成静态同步方法后，情况又变化</li><li>所有的非静态同步方法用的都是同一把锁  ——  实例对象本身，也就是说如果一个实例对象的非静态同步方法获取锁后，该实例对象的其他非静态同步方法必须等待获取锁的方法释放锁后才能获取锁，可是别的实例对象的非静态同步方法因为跟该实例对象的非静态同步方法用的是不同的锁，所以毋须等待该实例对象已获取锁的非静态同步方法释放锁就可以获取他们自己的锁。</li><li>所有的静态同步方法用的也是同一把锁  ——  类对象本身，这两把锁是两个不同的对象，所以静态同步方法与非静态同步方法之间是不会有竞态条件的。但是一旦一个静态同步方法获取锁后，其他的静态同步方法都必须等待该方法释放锁后才能获取锁，而不管是同一个实例对象的静态同步方法之间，还是不同的实例对象的静态同步方法之间，只要它们同一个类的实例对象！</li></ul><h3 id="题目：判断打印的-“one”-or-“two”-？"><a href="#题目：判断打印的-“one”-or-“two”-？" class="headerlink" title="题目：判断打印的 “one” or “two” ？"></a>题目：判断打印的 “one” or “two” ？</h3><ol><li><h4 id="两个普通同步方法，两个线程，标准打印，-打印-one-two"><a href="#两个普通同步方法，两个线程，标准打印，-打印-one-two" class="headerlink" title="两个普通同步方法，两个线程，标准打印， 打印? //one  two"></a>两个普通同步方法，两个线程，标准打印， 打印? //one  two</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread8Monitor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Number number = <span class="keyword">new</span> Number();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable () &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getOne();</span><br><span class="line">&#125; </span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getTwo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"one"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"two"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><h4 id="新增-Thread-sleep-给-getOne-打印-one-two"><a href="#新增-Thread-sleep-给-getOne-打印-one-two" class="headerlink" title="新增 Thread.sleep() 给 getOne() ,打印? //one  two"></a>新增 Thread.sleep() 给 getOne() ,打印? //one  two</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread8Monitor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Number number = <span class="keyword">new</span> Number();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable () &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getOne();</span><br><span class="line">&#125; </span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getTwo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"one"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"two"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><h4 id="新增普通方法-getThree-打印-three-one-two"><a href="#新增普通方法-getThree-打印-three-one-two" class="headerlink" title="新增普通方法 getThree() , 打印? //three  one   two"></a>新增普通方法 getThree() , 打印? //three  one   two</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread8Monitor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Number number = <span class="keyword">new</span> Number();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable () &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getOne();</span><br><span class="line">&#125; </span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getTwo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getThree();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"one"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"two"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getThree</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"three"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><h4 id="两个普通同步方法，两个-Number-对象，打印-two-one"><a href="#两个普通同步方法，两个-Number-对象，打印-two-one" class="headerlink" title="两个普通同步方法，两个 Number 对象，打印?  //two  one"></a>两个普通同步方法，两个 Number 对象，打印?  //two  one</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread8Monitor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Number number = <span class="keyword">new</span> Number();</span><br><span class="line">Number number2 = <span class="keyword">new</span> Number();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable () &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getOne();</span><br><span class="line">&#125; </span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//number.getTwo();</span></span><br><span class="line">number2.getTwo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"one"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"two"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><h4 id="修改-getOne-为静态同步方法，打印-two-one"><a href="#修改-getOne-为静态同步方法，打印-two-one" class="headerlink" title="修改 getOne() 为静态同步方法，打印?  //two   one"></a>修改 getOne() 为静态同步方法，打印?  //two   one</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread8Monitor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Number number = <span class="keyword">new</span> Number();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable () &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getOne();</span><br><span class="line">&#125; </span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getTwo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"one"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"two"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><h4 id="修改两个方法均为静态同步方法，一个-Number-对象-one-two"><a href="#修改两个方法均为静态同步方法，一个-Number-对象-one-two" class="headerlink" title="修改两个方法均为静态同步方法，一个 Number 对象?  //one   two"></a>修改两个方法均为静态同步方法，一个 Number 对象?  //one   two</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread8Monitor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Number number = <span class="keyword">new</span> Number();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable () &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getOne();</span><br><span class="line">&#125; </span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getTwo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"one"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"two"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><h4 id="一个静态同步方法，一个非静态同步方法，两个-Number-对象-two-one"><a href="#一个静态同步方法，一个非静态同步方法，两个-Number-对象-two-one" class="headerlink" title="一个静态同步方法，一个非静态同步方法，两个 Number 对象?  //two  one"></a>一个静态同步方法，一个非静态同步方法，两个 Number 对象?  //two  one</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread8Monitor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Number number = <span class="keyword">new</span> Number();</span><br><span class="line">Number number2 = <span class="keyword">new</span> Number();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable () &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getOne();</span><br><span class="line">&#125; </span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number2.getTwo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"one"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"two"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><h4 id="两个静态同步方法，两个-Number-对象-one-two"><a href="#两个静态同步方法，两个-Number-对象-one-two" class="headerlink" title="两个静态同步方法，两个 Number 对象?   //one  two"></a>两个静态同步方法，两个 Number 对象?   //one  two</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread8Monitor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Number number = <span class="keyword">new</span> Number();</span><br><span class="line">Number number2 = <span class="keyword">new</span> Number();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable () &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number.getOne();</span><br><span class="line">&#125; </span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number2.getTwo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"one"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">getTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"two"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程八锁的关键："><a href="#线程八锁的关键：" class="headerlink" title="线程八锁的关键："></a>线程八锁的关键：</h3><ul><li>非静态方法的锁默认为  this</li><li>静态方法的锁为 对应的 Class 实例</li><li>某一个时刻内，只能有一个线程持有锁，无论几个方法。</li></ul><h2 id="12-线程池"><a href="#12-线程池" class="headerlink" title="12.线程池"></a>12.线程池</h2><ul><li>第四种获取线程的方法：线程池，一个 ExecutorService，它使用可能的几个池线程之一执行每个提交的任务，通常使用 Executors 工厂方法配置。</li><li>线程池可以解决两个不同问题：由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源（包括执行任务集时使用的线程）的方法。每个 ThreadPoolExecutor 还维护着一些基本的统计数据，如完成的任务数。</li><li>为了便于跨大量上下文使用，此类提供了很多可调整的参数和扩展钩子 (hook)。但<br>是，强烈建议程序员使用较为方便的 Executors 工厂方法 ：<ul><li>Executors.newCachedThreadPool()（无界线程池，可以进行自动线程回收）</li><li>Executors.newFixedThreadPool(int)（固定大小线程池）</li><li>Executors.newSingleThreadExecutor()（单个后台线程）</li></ul></li><li>它们均为大多数使用场景预定义了设置。</li></ul><p>线程池：提供了一个线程队列，队列中保存着所有等待状态的线程。避免了创建与销毁额外开销，提高了响应的速度。</p><h3 id="线程池的体系结构："><a href="#线程池的体系结构：" class="headerlink" title="线程池的体系结构："></a>线程池的体系结构：</h3><ul><li><p>java.util.concurrent.Executor : 负责线程的使用与调度的根接口</p><ul><li><p>|–**ExecutorService 子接口: 线程池的主要接口</p><ul><li><p>|–ThreadPoolExecutor 线程池的实现类</p></li><li><p>|–ScheduledExecutorService 子接口：负责线程的调度</p><ul><li>|–ScheduledThreadPoolExecutor ：继承 ThreadPoolExecutor， 实现 ScheduledExecutorService</li></ul></li></ul></li></ul></li><li><p>工具类 : Executors</p><ul><li>ExecutorService newFixedThreadPool() : 创建固定大小的线程池</li><li>ExecutorService newCachedThreadPool() : 缓存线程池，线程池的数量不固定，可以根据需求自动的更改数量。</li><li>ExecutorService newSingleThreadExecutor() : 创建单个线程池。线程池中只有一个线程</li><li>ScheduledExecutorService newScheduledThreadPool() : 创建固定大小的线程，可以延迟或定时的执行任务。</li></ul></li></ul><h3 id="1-Runnable"><a href="#1-Runnable" class="headerlink" title="1.Runnable"></a>1.Runnable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建线程池</span></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">ThreadPoolDemo tpd = <span class="keyword">new</span> ThreadPoolDemo();</span><br><span class="line"><span class="comment">//2. 为线程池中的线程分配任务</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">pool.submit(tpd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 关闭线程池</span></span><br><span class="line"><span class="comment">//shutdown,平和方式关闭，等待线程结束再关闭</span></span><br><span class="line">pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Callable"><a href="#2-Callable" class="headerlink" title="2.Callable"></a>2.Callable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建线程池</span></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        List&lt;Future&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Future&lt;Integer&gt; future = pool.submit(<span class="keyword">new</span> &lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">                        sum += i;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> sum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            list.add(future);</span><br><span class="line">        &#125;</span><br><span class="line">        pool.shutdown();</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Integer&gt; future : list) &#123;</span><br><span class="line">            System.out.println(future.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-线程调度"><a href="#13-线程调度" class="headerlink" title="13.线程调度"></a>13.线程调度</h2><p>ScheduledExecutorService</p><p>一个 ExecutorService，可安排在给定的延迟后运行或定期执行的命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScheduledThreadPool</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">      <span class="comment">//任务，数值，单位（天，秒，小时...）</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">         Future&lt;Integer&gt; result = pool.schedule(<span class="keyword">new</span> Callable&lt;Integer&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">               <span class="keyword">int</span> num = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);<span class="comment">//生成随机数</span></span><br><span class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + num);</span><br><span class="line">               <span class="keyword">return</span> num;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">         System.out.println(result.get());</span><br><span class="line">      &#125;</span><br><span class="line">      pool.shutdown();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-ForkJoinPool-分支-合并框架-工作窃取"><a href="#14-ForkJoinPool-分支-合并框架-工作窃取" class="headerlink" title="14.ForkJoinPool 分支/合并框架 工作窃取"></a>14.ForkJoinPool 分支/合并框架 工作窃取</h2><p>Fork/Join 框架：就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务（拆到不可再拆时），再将一个个的小任务运算的结果进行 join 汇总。</p><p><img src="../images/%E7%BA%BF%E7%A8%8B/16.png" alt="16"></p><p>Fork/Join 框架与线程池的区别</p><ul><li>采用 “工作窃取”模式（work-stealing）：当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。</li><li>相对于一般的线程池实现，fork/join框架的优势体现在对其中包含的任务的处理方式上.在一般的线程池中，如果一个线程正在执行的任务由于某些原因无法继续运行，那么该线程会处于等待状态。</li><li>而在fork/join框架实现中，如果某个子问题由于等待另外一个子问题的完成而无法继续运行。那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行.这种方式减少了线程的等待时间，提高了性能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestForkJoinPool</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ForkJoin框架</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Instant start = Instant.now();</span><br><span class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> ForkJoinSumCalculate(<span class="number">0L</span>, <span class="number">50000000000L</span>);</span><br><span class="line">        Long sum = pool.invoke(task);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        Instant end = Instant.now();</span><br><span class="line">        System.out.println(<span class="string">"耗费时间为："</span> + Duration.between(start, end).toMillis());<span class="comment">//166-1996-10590</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 普通for</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Instant start = Instant.now();</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0L</span>; i &lt;= <span class="number">50000000000L</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        Instant end = Instant.now();</span><br><span class="line">        System.out.println(<span class="string">"耗费时间为："</span> + Duration.between(start, end).toMillis());<span class="comment">//35-3142-15704</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *     java8 新特性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Instant start = Instant.now();</span><br><span class="line">        Long sum = LongStream.rangeClosed(<span class="number">0L</span>, <span class="number">50000000000L</span>)</span><br><span class="line">            .parallel()</span><br><span class="line">            .reduce(<span class="number">0L</span>, Long::sum);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        Instant end = Instant.now();</span><br><span class="line">        System.out.println(<span class="string">"耗费时间为："</span> + Duration.between(start, end).toMillis());<span class="comment">//1536-8118</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Recursive，递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkJoinSumCalculate</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">259195479995561737L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> end;</span><br><span class="line">    <span class="comment">//临界值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> THURSHOLD = <span class="number">10000L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinSumCalculate</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> length = end - start;</span><br><span class="line">        <span class="comment">//临界值不拆</span></span><br><span class="line">        <span class="keyword">if</span> (length &lt;= THURSHOLD) &#123;</span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line">            ForkJoinSumCalculate left = <span class="keyword">new</span> ForkJoinSumCalculate(start, middle);</span><br><span class="line">            <span class="comment">//进行拆分，同时压入线程队列</span></span><br><span class="line">            left.fork();</span><br><span class="line">            ForkJoinSumCalculate right = <span class="keyword">new</span> ForkJoinSumCalculate(middle + <span class="number">1</span>, end);</span><br><span class="line">            right.fork();</span><br><span class="line">            <span class="keyword">return</span> left.join() + right.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线程进阶-JUC的学习&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JUC" scheme="https://linhuide.github.io/tags/JUC/"/>
    
  </entry>
  
</feed>
