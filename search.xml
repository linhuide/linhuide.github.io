<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>全部面试笔记-2</title>
    <url>/post/c0e5897b.html</url>
    <content><![CDATA[<p>​    Java面试的笔记-2，全面回忆</p>
<a id="more"></a>

<p>4.前端部分</p>
<p>5.后端部分</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Java面试</tag>
      </tags>
  </entry>
  <entry>
    <title>全部面试笔记-1</title>
    <url>/post/448efa24.html</url>
    <content><![CDATA[<p>​    Java面试的笔记，全面回忆</p>
<a id="more"></a>

<h1 id="1-java基础"><a href="#1-java基础" class="headerlink" title="1.java基础"></a>1.java基础</h1><h2 id="1-1-java的跨平台原理"><a href="#1-1-java的跨平台原理" class="headerlink" title="1-1.java的跨平台原理"></a>1-1.java的跨平台原理</h2><p>​    由于各操作系统支持的指令集，不是完全一致。不同的操作系统上要执行不同程序代码，但相同代码会使程序执行不了。所以，java开发了适用于不同操作系统及位数的java虚拟机(jvm)来屏蔽各个系统之间的差异，提供统一的接口(java API)。</p>
<p>​    对于java开发者而言，只需要在不同系统上安装对应不同的虚拟机。只要java程序遵循java规范，可以在所有操作系统上运行java程序</p>
<p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B01/1.png" alt="1"></p>
<h2 id="1-2-搭建java开发环境的步骤"><a href="#1-2-搭建java开发环境的步骤" class="headerlink" title="1-2.搭建java开发环境的步骤"></a>1-2.搭建java开发环境的步骤</h2><p>​    1、适用于我们开发环境的jdk</p>
<p>​    2、对应开发环境eclipse或idea</p>
<p>​    3、还需要web服务器(tomcat)</p>
<h2 id="1-3-int占几个字节"><a href="#1-3-int占几个字节" class="headerlink" title="1-3.int占几个字节"></a>1-3.int占几个字节</h2><p>​    java有8个基本数据类型：byte，shot，int，long，float，double，char，boolean</p>
<p>byte：8位    shot：16位    int：32位，占4个字节    </p>
<p>long：64位    float：32位    double：64位    </p>
<p>char：16位    boolean：1位    </p>
<h2 id="1-4-面向对象的特征有哪些方面"><a href="#1-4-面向对象的特征有哪些方面" class="headerlink" title="1-4.面向对象的特征有哪些方面"></a>1-4.面向对象的特征有哪些方面</h2><p>​    四大基本特征：封装，抽象，继承，多态</p>
<ul>
<li>封装：将对象封装成一个高度自治和相对封闭的个体，对象状态（属性由这个对象自己的行为（方法）来读取和改变。</li>
<li>抽象：做出一些事物的相似和共性之处，归为一个类。（把现实生活中的对象，抽象为类）</li>
<li>继承：在一个已经存在的类的基础之上进行，将其定义的内容作为自己的，可以加入若干新内容，或修改原来的方法，符合需求。</li>
<li>多态：<ul>
<li>程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定。</li>
<li>即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</li>
<li>引用变量所指向的具体实例对象的方法，也就是内存里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。 </li>
</ul>
</li>
</ul>
<h2 id="1-5-基本数据类型，为什么还需要包装类型"><a href="#1-5-基本数据类型，为什么还需要包装类型" class="headerlink" title="1-5.基本数据类型，为什么还需要包装类型"></a>1-5.基本数据类型，为什么还需要包装类型</h2><p>​    每一个基本数据类型会对于一个包装类型：boolean–&gt;Boolean    int–&gt;Integer</p>
<ul>
<li>基本数据类型，包装类型–&gt;装箱和拆箱</li>
</ul>
<p>​    装箱：把基本的数据类型转换成对应的包装类型</p>
<p>​        Integer i = 1–&gt;Integer .valueOf(1)</p>
<p>​        自动装箱，实际上在编译时会调用Integer .valueOf方法来装箱</p>
<p>​    拆箱：把包装类型转换为基本数据类型.基本数据类型</p>
<p>​        Integer i = 1;</p>
<p>​        int j = i–&gt;自动拆箱</p>
<p>​        int j = i.intValue()i–&gt;手动拆箱</p>
<p>​        自动拆箱：实际上会在编译调用intValue    （源码）</p>
<ul>
<li><p>Java是一个面向对象的语言，而基本的数据类型，不具备面向对象的特性</p>
<p>面向对象特性：null，max，min</p>
<p>例子：Integer和int分别表示Person这个类的ID，可以null，判断一下</p>
</li>
<li><p>包装类型：对象有缓存–&gt;Integer i=1、Integer j= 1、i ==j</p>
</li>
</ul>
<h2 id="1-6-和equals有什么区别"><a href="#1-6-和equals有什么区别" class="headerlink" title="1-6.==和equals有什么区别"></a>1-6.==和equals有什么区别</h2><p>​    ==，用来判断两个变量之间的的值是否相等。</p>
<p>​    变量就可以分为基本数据类型变量，引用类型。</p>
<p>​    如果是基本数据类型的变量直接比较值，而引用类型要比较对应的引用的内存的首地址。</p>
<p>​    equals 用来比较两个对象长得是否一样。</p>
<p>​    判断两个对象的某些特征是否一样。实际上就是调用对象的equals方法进行比较。</p>
<h2 id="1-7-String和StringBuilder的区别？StringBuffer和StringBuilder的区别"><a href="#1-7-String和StringBuilder的区别？StringBuffer和StringBuilder的区别" class="headerlink" title="1-7.String和StringBuilder的区别？StringBuffer和StringBuilder的区别?"></a>1-7.String和StringBuilder的区别？StringBuffer和StringBuilder的区别?</h2><p>​    String、StringBuillder、StringBuffer三个类是来表示和操作字符串：字符串就是多个字符的集合。</p>
<p>​    String是内容不可变的字符串。String底层使用了一个不可变的字符数组(final char[])</p>
<p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B01/2.png" alt="2"></p>
<p>​    StringBuillder、StringBuffer：是内容可以改变的字符串。StringBuillder、StringBuffer底层使用的可变的字符数组（没有使用final来修饰） </p>
<p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B01/3.png" alt="3"></p>
<p><strong>拼接字符串：</strong></p>
<p>​    String进行拼接：String c = “a”+”b”</p>
<p>​    StringBuilder或者StringBuffer ：</p>
<p>​        StringBuilder sb = new StringBuilder();    </p>
<p>​        sb.apend(“a”).apend(“b”)</p>
<p>​    拼接字符串不能使用String进行拼接，要使用StringBuilder或者StringBuffer</p>
<p><strong>区别：</strong></p>
<p>​    StringBuilder是线程不安全的，效率较高    而StringBuffer是线程安全的，效率较低。</p>
<h2 id="1-8-java中的集合"><a href="#1-8-java中的集合" class="headerlink" title="1-8.java中的集合?"></a>1-8.java中的集合?</h2><p>​    Java中的集合为两种：Conllection：value，Map：key–vale</p>
<p>Conllection：存储值有分为List 和Set</p>
<ul>
<li>List是有序的，可以重复的。</li>
<li>Set是无序的，不可以重复的。根据equals和hashcode判断，也就是如果一个对象要存储在Set中，必须重写equals和hashCode方法。</li>
</ul>
<p>map：存储key-value</p>
<h2 id="1-9-ArrayList和LinkedList的区别"><a href="#1-9-ArrayList和LinkedList的区别" class="headerlink" title="1-9.ArrayList和LinkedList的区别?"></a>1-9.ArrayList和LinkedList的区别?</h2><ul>
<li><p>ArrayList底层使用时数组。LinkedList使用的是链表。</p>
</li>
<li><p>数组查询具有所有查询特定元素比较快，而插入和删除和修改比较慢(数组在内存中是一块连续的内存，如果插入或删除是需要移动内存)。</p>
</li>
<li><p>链表不要求内存是连续的，在当前元素中存放下一个或上一个元素的地址。查询时需要从头部开始，一个一个的找。所以查询效率低。插入时不需要移动内存，只需改变引用指向即可。所以插入或者删除的效率高。</p>
</li>
</ul>
<p><strong>区别：</strong></p>
<p>​      ArrayList使用在查询比较多，但是插入和删除比较少的情况</p>
<p>​      而LinkedList使用在查询比较少而插入和删除比较多的情况。</p>
<h2 id="1-10-HashMap哈HashTable的区别-HashTable和ConcurrentHashMap的区别"><a href="#1-10-HashMap哈HashTable的区别-HashTable和ConcurrentHashMap的区别" class="headerlink" title="1-10.HashMap哈HashTable的区别?HashTable和ConcurrentHashMap的区别?"></a>1-10.HashMap哈HashTable的区别?HashTable和ConcurrentHashMap的区别?</h2><ul>
<li>HashMap和HasheTalbe都可以使用来存储key–value的数据。</li>
<li>HashMap是可以把null作为key或者value的，而HashTable是不可以的。</li>
<li>HashMap是线程不安全的，效率较高。而HashTalbe是线程安全的，效率较低。</li>
</ul>
<p><strong>提高：</strong></p>
<p>​    我想线程安全但是我又想效率高？</p>
<p>​        通过把整个Map分为N个Segment（类似HashTable），可以提供相同的线程安全，但是效率提升N倍，默认提升16倍。    </p>
<p>​    </p>
<h2 id="1-11-实现一个拷贝文件的工具类使用字节流还是字符流"><a href="#1-11-实现一个拷贝文件的工具类使用字节流还是字符流" class="headerlink" title="1-11.实现一个拷贝文件的工具类使用字节流还是字符流?"></a>1-11.实现一个拷贝文件的工具类使用字节流还是字符流?</h2><p>​    拷贝的文件不确定是只包含字符流，有可以能有字节流(图片、声音、图像等)，为考虑到通用性，要使用字节流。</p>
<h2 id="1-12-线程的几种实现方式-启动方式？区分方式？"><a href="#1-12-线程的几种实现方式-启动方式？区分方式？" class="headerlink" title="1-12.线程的几种实现方式?启动方式？区分方式？"></a>1-12.线程的几种实现方式?启动方式？区分方式？</h2><ol>
<li><p>实现方式</p>
<ul>
<li>通过继承Thread类实现一个线程</li>
<li>通过实现Runnable接口实现一个线程：继承扩展性不强，java总只支持单继承，如果一个类继承Thread就不能继承其他的类了。</li>
</ul>
</li>
<li><p>启动方式</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread</span><br><span class="line"><span class="comment">//(继承了Thread的对象/实现了Runnable的对象)</span></span><br><span class="line">thread.setName(“设置一个线程名称”);</span><br><span class="line">thread.start();</span><br><span class="line"><span class="comment">//启动线程使用start方法，而启动了以后执行的是run方法。</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>区分方式</li>
</ol>
<p>​        在一个系统中有很多线程，每个线程都会打印日志，我想区分是哪个线程打印的怎么办？</p>
<p>​     thread.setName(“设置一个线程名称”);</p>
<p>​    这是一种规范，在创建线程完成后，都需要设置名称。</p>
<h2 id="1-13-线程并发库"><a href="#1-13-线程并发库" class="headerlink" title="1-13.线程并发库?"></a>1-13.线程并发库?</h2><p>​    JDK5中增加了Doug Lea的并发库，这一引进给Java线程的管理和使用提供了强大的便利性。</p>
<p>​     java.util.current包中提供了对线程优化、管理的各项操作，使得线程的使用变得的心应手。该包提供了线程的运行，线程池的创建，线程生命周期的控制.</p>
<p>​    Java通过Executors提供四个静态方法创建四种线程池，分别为：</p>
<ul>
<li><p><strong>newCachedThreadPool</strong>创建一个<strong>可缓存</strong>线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p>
</li>
<li><p><strong>newFixedThreadPool</strong> 创建一个<strong>定长线</strong>程池，可控制线程最大并发数，超出的线程会在队列中等待。</p>
</li>
<li><p><strong>newScheduledThreadPool</strong> 创建一个<strong>定长线</strong>程池，支持定时及周期性任务执行。</p>
</li>
<li><p><strong>newSingleThreadExecutor</strong> 创建一个<strong>单线程化</strong>的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行</p>
</li>
</ul>
<h2 id="1-14-线程池的作用？"><a href="#1-14-线程池的作用？" class="headerlink" title="1-14.线程池的作用？"></a>1-14.线程池的作用？</h2><p>1、限定线程的个数，不会导致由于线程过多导致系统运行缓慢或崩溃</p>
<p>2、线程池不需要每次都去创建或销毁，节约了资源、</p>
<p>3、线程池不需要每次都去创建，响应时间更快。</p>
<h2 id="1-15-什么是设计模式？常用的设计模式有哪些？"><a href="#1-15-什么是设计模式？常用的设计模式有哪些？" class="headerlink" title="1-15.什么是设计模式？常用的设计模式有哪些？"></a>1-15.什么是设计模式？常用的设计模式有哪些？</h2><p>​    设计模式就是经过前人无数次的实践总结出的，设计过程中可以反复使用的、可以解决特定问题的设计方法。</p>
<p><strong>常用的设计模式：</strong></p>
<ul>
<li><p>单例(饱汉模式、饥汉模式)</p>
<ul>
<li>构造方法私有化，让出了自己类中能创建外其他地方都不能创建</li>
<li>在自己的类中创建一个单实例（饱汉模式是一出来就创建创建单实例，而饥汉模式需要的时候才创建）</li>
<li>提供一个方法获取该实例对象(创建时需要进行方法同步)</li>
</ul>
</li>
<li><p>工厂模式：Spring IOC就是使用了工厂模式.</p>
<ul>
<li>对象的创建交给一个工厂去创建。</li>
</ul>
</li>
<li><p>代理模式</p>
<ul>
<li>Spring AOP就是使用的动态代理。</li>
</ul>
</li>
</ul>
<h1 id="2-javaweb"><a href="#2-javaweb" class="headerlink" title="2.javaweb"></a>2.javaweb</h1><h2 id="2-1-http中get和post请求的区别"><a href="#2-1-http中get和post请求的区别" class="headerlink" title="2-1.http中get和post请求的区别?"></a>2-1.http中get和post请求的区别?</h2><p>​    GET和POST请求都是http的请求方式，用户通过不同的http的请求方式完成对资源（url）的不同操作。</p>
<p>​    GET，POST，PUT，DELETE就对应着对这个资源的查 ，改 ，增 ，删 4个操作，具体点来讲GET一般用于获取/查询资源信息，而POST一般用于更新资源信息</p>
<ul>
<li><p>Get请求提交的数据会在地址栏显示出来，而post请求不会再地址栏显示出来.</p>
<ul>
<li>GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接。</li>
<li>POST提交：把提交的数据放置在是HTTP包的包体中。 因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</li>
</ul>
</li>
<li><p>传输数据的大小</p>
<ul>
<li>Get请求由于浏览器对地址长度的限制而导致传输的数据有限制</li>
<li>POST请求不会因为地址长度限制而导致传输数据限制</li>
</ul>
</li>
<li><p>安全性</p>
<ul>
<li>POST的安全性要比GET的安全性高：由于数据是会在地址中呈现，所以可以通过历史记录找到密码等关键信息</li>
</ul>
</li>
</ul>
<h2 id="2-2-对servlet的理解？或者servlet是什么？"><a href="#2-2-对servlet的理解？或者servlet是什么？" class="headerlink" title="2-2.对servlet的理解？或者servlet是什么？"></a>2-2.对servlet的理解？或者servlet是什么？</h2><p>​    <strong>Servlet</strong>（Server Applet），全称<strong>Java Servlet</strong>， 是用Java编写的服务器端程序。而这些Sevlet都要实现Servlet这个借口。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。Servlet运行于支持Java的应用服务器中。</p>
<p>​    HttpServlet 重写doGet和doPost方法，或者你也可以重写service方法完成对get和post请求的响应。</p>
<h2 id="2-3-servlet的生命周期"><a href="#2-3-servlet的生命周期" class="headerlink" title="2-3.servlet的生命周期?"></a>2-3.servlet的生命周期?</h2><p>​    servlet有良好的生存期的定义，包括加载和实例化、初始化、处理请求以及服务结束。</p>
<p>​    这个生存期由javax.servlet.Servlet接口的init,service和destroy方法表达。</p>
<p>加载Servlet的class—-&gt;实例化Servlet—–&gt;调用Servlet的init完成初始化</p>
<p>—-&gt;响应请求（Servlet的service方法）—–&gt;Servlet容器关闭时(Servlet的destory方法)</p>
<ul>
<li>Servlet启动时，开始加载servlet生命周期开始。</li>
<li>Servlet被服务器实例化后，容器运行其init方法，请求到达时运行其service方法</li>
<li>service方法自动派遣运行与请求对应的doXXX方法（doGet，doPost）等。</li>
<li>当服务器决定将实例销毁的时候(服务器关闭)调用其destroy方法。</li>
</ul>
<h2 id="2-4-Servlet-API中forward-与redirect-的区别？"><a href="#2-4-Servlet-API中forward-与redirect-的区别？" class="headerlink" title="2-4.Servlet API中forward() 与redirect()的区别？"></a>2-4.Servlet API中forward() 与redirect()的区别？</h2><p>1、forward是服务器端的转向而redirect是客户端的跳转。</p>
<p>2、使用forward浏览器的地址不会发生改变。而redirect会发生改变。</p>
<p>3、Forward是一次请求中完成。而redirect是重新发起请求。</p>
<p>4、Forward是在服务器端完成，而不用客户端重新发起请求，效率较高。</p>
<h2 id="2-5-JSP和Servlet有哪些相同点和不同点"><a href="#2-5-JSP和Servlet有哪些相同点和不同点" class="headerlink" title="2-5.JSP和Servlet有哪些相同点和不同点?"></a>2-5.JSP和Servlet有哪些相同点和不同点?</h2><p>​    JSP是Servlet技术的扩展，所有的jsp文件都会被翻译为一个继承HttpServlet的类。也就是jsp最终也是一个Servlet.这个Servlet对外提供服务。</p>
<p>​    JSP是Servlet技术的扩展，所有的jsp文件都会被翻译为一个继承HttpServlet的类。也就是jsp最终也是一个Servlet.这个Servlet对外提供服务。</p>
<p>​    Servlet如果要实现html的功能，必须使用Writer输出对应的html，比较麻烦。</p>
<p>​    JSP的情况是Java和HTML，可以组合成一个扩展名为.jsp的文件，做界面展示比较方便而嵌入逻辑比较复杂。</p>
<p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B01/4.png" alt="4"></p>
<h2 id="2-6-jsp有哪些内置对象-作用分别是什么"><a href="#2-6-jsp有哪些内置对象-作用分别是什么" class="headerlink" title="2-6.jsp有哪些内置对象?作用分别是什么?"></a>2-6.jsp有哪些内置对象?作用分别是什么?</h2><p>9个内置的对象： </p>
<ul>
<li><p>request 用户端请求，此请求会包含来自GET/POST请求的参数 </p>
</li>
<li><p>response 网页传回用户端的回应 </p>
</li>
<li><p>pageContext 网页的属性是在这里管理 </p>
</li>
<li><p>session 与请求有关的会话期 </p>
</li>
<li><p>application servlet正在执行的内容 </p>
</li>
<li><p>out 用来传送回应的输出 </p>
</li>
<li><p>config servlet的构架部件 </p>
</li>
<li><p>page JSP网页本身 </p>
</li>
<li><p>exception 针对错误网页，未捕捉的例外 </p>
<p>四大作用域：pageContext 、request 、session 、application 可以通过jstl从四大作用域中取值.</p>
<p>Jsp传递值request、session 、application 、cookie也能传值</p>
</li>
</ul>
<h2 id="2-7-session和cookie的区别？你在项目中都有哪些地方使用了？"><a href="#2-7-session和cookie的区别？你在项目中都有哪些地方使用了？" class="headerlink" title="2-7.session和cookie的区别？你在项目中都有哪些地方使用了？"></a>2-7.session和cookie的区别？你在项目中都有哪些地方使用了？</h2><p>​    Session和cookie都是会话(Seesion)跟踪技术。</p>
<p>​    Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。</p>
<p>​    但是Session的实现依赖于Cookie,sessionId(session的唯一标识需要存放在客户端).</p>
<p><strong>区别：</strong></p>
<p>​    1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>
<p>​    2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session。</p>
<p>​    3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能,考虑到减轻服务器性能方面，应当使用COOKIE。</p>
<p>​    4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>
<p>​    5、建议：将登陆信息等重要信息存放为SESSION、 其他信息如果需要保留，可以放在COOKIE中，比如购物车</p>
<p>​    购物车最好使用cookie，但是cookie是可以在客户端禁用的，这时候我们要使用cookie+数据库的方式实现，当从cookie中不能取出数据时，就从数据库获取。</p>
<h2 id="2-8-MVC的各个部分都有那些技术来实现"><a href="#2-8-MVC的各个部分都有那些技术来实现" class="headerlink" title="2-8.MVC的各个部分都有那些技术来实现?"></a>2-8.MVC的各个部分都有那些技术来实现?</h2><ul>
<li><p>M(Model) 模型 javabean</p>
</li>
<li><p>V(View) 视图  html jsp volicity freemaker</p>
</li>
<li><p>C(Control) 控制器 Servlet,Action</p>
<p>Jsp+Servlet+javabean 最经典mvc模式,实际上就是model2的实现方式，就是把视图和逻辑隔离开来</p>
</li>
</ul>
<h1 id="3-数据库"><a href="#3-数据库" class="headerlink" title="3.数据库"></a>3.数据库</h1><h2 id="3-1-数据库的分类及常用的数据库"><a href="#3-1-数据库的分类及常用的数据库" class="headerlink" title="3-1.数据库的分类及常用的数据库"></a>3-1.数据库的分类及常用的数据库</h2><p>关系型数据库和非关系型数据库</p>
<ul>
<li>关系型：mysql oracle sqlserver等</li>
<li>非关系型：redis,memcache,mogodb,hadoop等</li>
</ul>
<h2 id="3-2-关系数据库三范式？"><a href="#3-2-关系数据库三范式？" class="headerlink" title="3-2.关系数据库三范式？"></a>3-2.关系数据库三范式？</h2><p>​    范式就是规范,就是关系型数据库在设计表时，要遵循的三个规范。</p>
<p>​    要想满足第二范式必须先满足第一范式，要满足第三范式必须先满足第二范式。</p>
<ul>
<li>第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。<strong>列数据的不可分割</strong></li>
</ul>
<ul>
<li>二范式（2NF）要求数据库表中的每个行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。(<strong>主键</strong>)</li>
</ul>
<ul>
<li>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。(<strong>外键</strong>)</li>
</ul>
<ul>
<li>反三范式，有的时候为了效率，可以设置重复或者可以推导出的字段：订单（总价）和订单项（单价）</li>
</ul>
<h2 id="3-3-事务四个基本特征或-ACID-特性"><a href="#3-3-事务四个基本特征或-ACID-特性" class="headerlink" title="3-3.事务四个基本特征或 ACID 特性"></a>3-3.事务四个基本特征或 ACID 特性</h2><p>​    事务是并发控制的单位，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位。</p>
<p>​    如：一个转账必须 A账号扣钱成功，B账号加钱成功，才算正真的转账成功</p>
<p>​    事务必须满足四大特征：原子性、一致性、隔离性、持久性/持续性</p>
<ul>
<li>原子性：表示事务内操作不可分割。要么都成功、要么都是失败.</li>
<li>一致性：要么都成功、要么都是失败.后面的失败了要对前面的操作进行回滚。</li>
<li>隔离性：一个事务开始后，不能后其他事务干扰。</li>
<li>持久性/持续性：表示事务开始了，就不能终止。</li>
</ul>
<h2 id="3-4-mysql数据库的默认的最大连接数？"><a href="#3-4-mysql数据库的默认的最大连接数？" class="headerlink" title="3-4.mysql数据库的默认的最大连接数？"></a>3-4.mysql数据库的默认的最大连接数？</h2><p>​    100 </p>
<p>​     为什么需要最大连接数？特定服务器上面的数据库只能支持一定数目同时连接，这时候我们一般都会设置最大连接数（最多同时服务多少连接）。在数据库安装时都会有一个默认的最大连接数为100</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">max_connections=100</span><br></pre></td></tr></table></figure>



<h2 id="3-5-msyql的分页？Oracle的分页？"><a href="#3-5-msyql的分页？Oracle的分页？" class="headerlink" title="3-5.msyql的分页？Oracle的分页？"></a>3-5.msyql的分页？Oracle的分页？</h2><p>​    Mysql是使用关键字limit来进行分页的：limit、offset、size 表示从多少索引去多少位.</p>
<p>​    Oracle的分页，大部分情况下，我们是记不住了。说思路，要使用三层嵌套查询。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql:</span><br><span class="line">String sql &#x3D; &quot;select * from students order by id limit &quot; + pageSize*(pageNumber-1) + &quot;,&quot; + pageSize;</span><br><span class="line">	</span><br><span class="line">oracle:</span><br><span class="line">String sql &#x3D; &quot;select * from &quot; </span><br><span class="line">+  (select *,rownum rid from (select * from students order by postime desc) where rid&lt;&#x3D;&quot;</span><br><span class="line">+ pagesize*pagenumber + &quot;) as t&quot; + &quot;where t&gt;&quot; </span><br><span class="line">+ pageSize*(pageNumber-1);</span><br></pre></td></tr></table></figure>



<h2 id="3-6-数据库的触发器的使用场景？"><a href="#3-6-数据库的触发器的使用场景？" class="headerlink" title="3-6.数据库的触发器的使用场景？"></a>3-6.数据库的触发器的使用场景？</h2><p>​    触发器，需要有触发条件，当条件满足以后做什么操作。</p>
<p>​    就是在增加日志时做一个后触发，再向通知表中写入条目。因为触发器效率高，而UCH没有用触发器，效率和数据处理能力都很低。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table board1(id int primary key auto_increment,name varchar(50),articleCount int);</span><br><span class="line"></span><br><span class="line">create table article1(id int primary key auto_increment,title varchar(50),bid int references board1(id));</span><br><span class="line"></span><br><span class="line">delimiter |#把分割符;改成|</span><br><span class="line"></span><br><span class="line">create trigger insertArticle_Trigger after insert on article1 for each row begin</span><br><span class="line">    -&gt; update board1 set articleCount&#x3D;articleCount+1 where id&#x3D; NEW.bid;</span><br><span class="line">    -&gt; end;</span><br><span class="line">    -&gt; |</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">insert into board1 value (null,&#39;test&#39;,0);</span><br><span class="line"></span><br><span class="line">insert into article1 value(null,&#39;test&#39;,1);</span><br></pre></td></tr></table></figure>



<h2 id="3-7-数据库的存储过程的使用场景？"><a href="#3-7-数据库的存储过程的使用场景？" class="headerlink" title="3-7.数据库的存储过程的使用场景？"></a>3-7.数据库的存储过程的使用场景？</h2><p><strong>数据库存储过程具有如下优点：</strong></p>
<p>​    1、存储过程只在创建时进行编译，以后每次执行存储过程都不需再重新编译，而一般 SQL 语句每执行一次就编译一次，因此使用存储过程可以大大提高数据库执行速度。</p>
<p>​    2、通常，复杂的业务逻辑需要多条 SQL 语句。这些语句要分别地从客户机发送到服务器，当客户机和服务器之间的操作很多时，将产生大量的网络传输。如果将这些操作放在一个存储过程中，那么客户机和服务器之间的网络传输就会大大减少，降低了网络负载。</p>
<p>​    3、存储过程创建一次便可以重复使用，从而可以减少数据库开发人员的工作量。</p>
<p>​    4、安全性高，存储过程可以屏蔽对底层数据库对象的直接访问，使用 EXECUTE 权限调用存储过程，无需拥有访问底层数据库对象的显式权限。</p>
<p>​    正是由于存储过程的上述优点，目前常用的数据库都支持存储过程，例如 IBM DB2，Microsoft SQL Server，Oracle，Access 等，开源数据库系统 MySQL 也在 5.0 的时候实现了对存储过程的支持。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure insert_Student (_name varchar(50),_age int ,out _id int)</span><br><span class="line">begin</span><br><span class="line">	insert into student value(null,_name,_age);</span><br><span class="line">	select max(stuId) into _id from student;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">call insert_Student(&#39;wfz&#39;,23,@id);</span><br><span class="line">select @id;</span><br></pre></td></tr></table></figure>



<h2 id="3-8-用jdbc怎么调用存储过程？"><a href="#3-8-用jdbc怎么调用存储过程？" class="headerlink" title="3-8.用jdbc怎么调用存储过程？"></a>3-8.用jdbc怎么调用存储过程？</h2><p>​    加载驱动    获取连接    设置参数    执行    释放连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Connection cn = <span class="keyword">null</span>;</span><br><span class="line">		CallableStatement cstmt = <span class="keyword">null</span>;		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//这里最好不要这么干，因为驱动名写死在程序中了</span></span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">			<span class="comment">//实际项目中，这里应用DataSource数据，如果用框架，</span></span><br><span class="line">			<span class="comment">//这个数据源不需要我们编码创建，我们只需Datasource ds = context.lookup()</span></span><br><span class="line">			<span class="comment">//cn = ds.getConnection();			</span></span><br><span class="line">			cn = DriverManager.getConnection(<span class="string">"jdbc:mysql:///test"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">			cstmt = cn.prepareCall(<span class="string">"&#123;call insert_Student(?,?,?)&#125;"</span>);</span><br><span class="line">			cstmt.registerOutParameter(<span class="number">3</span>,Types.INTEGER);</span><br><span class="line">			cstmt.setString(<span class="number">1</span>, <span class="string">"wangwu"</span>);</span><br><span class="line">			cstmt.setInt(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line">			cstmt.execute();</span><br><span class="line">			<span class="comment">//get第几个，不同的数据库不一样，建议不写</span></span><br><span class="line">			System.out.println(cstmt.getString(<span class="number">3</span>));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(cstmt != <span class="keyword">null</span>)</span><br><span class="line">					cstmt.close();</span><br><span class="line">				<span class="keyword">if</span>(cn != <span class="keyword">null</span>)				</span><br><span class="line">					cn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-9-对jdbc的理解？"><a href="#3-9-对jdbc的理解？" class="headerlink" title="3-9.对jdbc的理解？"></a>3-9.对jdbc的理解？</h2><p>​    Java database connection java：数据库连接</p>
<p>​    数据库管理系统(mysql oracle等)是很多，每个数据库管理系统支持的命令是不一样的。</p>
<p>​    Java只定义接口，让数据库厂商自己实现接口，对于我们者而言。只需要导入对应厂商开发的实现即可。然后以接口方式进行调用.(mysql + mysql驱动（实现）+jdbc)</p>
<p><img src="../images/%E5%85%A8%E9%9D%A2%E7%AC%94%E8%AE%B01/5.png" alt="5"></p>
<h2 id="3-10-一个简单的jdbc的程序。写一个访问oracle数据的jdbc程序"><a href="#3-10-一个简单的jdbc的程序。写一个访问oracle数据的jdbc程序" class="headerlink" title="3-10.一个简单的jdbc的程序。写一个访问oracle数据的jdbc程序?"></a>3-10.一个简单的jdbc的程序。写一个访问oracle数据的jdbc程序?</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加载驱动</span><br><span class="line">com.mysql.jdbc.Driver,oracle.jdbc.driver.OracleDriver</span><br><span class="line">获取连接</span><br><span class="line">DriverManager.getConnection(url,usernam,passord)</span><br><span class="line">设置参数</span><br><span class="line">Statement PreparedStatement cstmt.setXXX(index, value);</span><br><span class="line">执行   </span><br><span class="line">executeQuery executeUpdate</span><br><span class="line">释放连接</span><br><span class="line">是否连接要从小到大，必须放到finnaly</span><br></pre></td></tr></table></figure>



<h2 id="3-11-JDBC中的PreparedStatement相比Statement的好处"><a href="#3-11-JDBC中的PreparedStatement相比Statement的好处" class="headerlink" title="3-11.JDBC中的PreparedStatement相比Statement的好处"></a>3-11.JDBC中的PreparedStatement相比Statement的好处</h2><ol>
<li>PreparedStatement是预编译的，比Statement速度快 </li>
<li>代码的可读性和可维护性</li>
</ol>
<ol start="3">
<li>安全性</li>
</ol>
<p>​    虽然用PreparedStatement来代替Statement会使代码多出几行,但这样的代码无论从可读性还是可维护性上来说.都比直接用Statement的代码高很多档次：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两种比较：</span><br><span class="line">stmt.executeUpdate(&quot;insert into tb_name (col1,col2,col2,col4) values (&#39;&quot;+var1+&quot;&#39;,&#39;&quot;+var2+&quot;&#39;,&quot;+var3+&quot;,&#39;&quot;+var4+&quot;&#39;)&quot;); </span><br><span class="line"></span><br><span class="line">perstmt &#x3D; con.prepareStatement(&quot;insert into tb_name (col1,col2,col2,col4) values (?,?,?,?)&quot;);</span><br><span class="line">perstmt.setString(1,var1);</span><br><span class="line">perstmt.setString(2,var2);</span><br><span class="line">perstmt.setString(3,var3);</span><br><span class="line">perstmt.setString(4,var4);</span><br><span class="line">perstmt.executeUpdate();</span><br></pre></td></tr></table></figure>

<p>​    PreparedStatement可以防止SQL注入攻击，而Statement却不能。比如说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String sql &#x3D; &quot;select * from tb_name where name&#x3D; &#39;&quot;+varname+&quot;&#39; and passwd&#x3D;&#39;&quot;+varpasswd+&quot;&#39;&quot;;</span><br><span class="line"></span><br><span class="line">如果我们把[&#39; or &#39;1&#39; &#x3D; &#39;1]作为varpasswd传入进来.用户名随意,看看会成为什么?</span><br><span class="line">select * from tb_name &#x3D; &#39;随意&#39; and passwd &#x3D; &#39;&#39; or &#39;1&#39; &#x3D; &#39;1&#39;;</span><br><span class="line"></span><br><span class="line">因为&#39;1&#39;&#x3D;&#39;1&#39;肯定成立，所以可以任何通过验证，更有甚者：</span><br><span class="line">把[&#39;;drop table tb_name;]作为varpasswd传入进来,则：</span><br><span class="line">select * from tb_name &#x3D; &#39;随意&#39; and passwd &#x3D; &#39;&#39;;drop table tb_name;</span><br></pre></td></tr></table></figure>

<p>​    有些数据库是不会让你成功的，但也有很多数据库就可以使这些语句得到执行。</p>
<p>​    而如果你使用预编译语句你传入的任何内容就不会和原来的语句发生任何匹配的关系，只要全使用预编译语句你就用不着对传入的数据做任何过虑。而如果使用普通的statement,有可能要对drop等做费尽心机的判断和过虑。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Java面试</tag>
      </tags>
  </entry>
  <entry>
    <title>maven的使用</title>
    <url>/post/c1734c25.html</url>
    <content><![CDATA[<p>​    这是Maven的基本使用方法</p>
<a id="more"></a>

<h2 id="1-基本信息"><a href="#1-基本信息" class="headerlink" title="1.基本信息"></a>1.基本信息</h2>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>博客的完善</title>
    <url>/post/fc7e1d6d.html</url>
    <content><![CDATA[<p>​    对博客的完善，用next主题，逐步完善功能</p>
<a id="more"></a>

<h2 id="1-主题的启用"><a href="#1-主题的启用" class="headerlink" title="1.主题的启用"></a>1.主题的启用</h2><h2 id="2-对博客改中文"><a href="#2-对博客改中文" class="headerlink" title="2.对博客改中文"></a>2.对博客改中文</h2><h2 id="3-增加标签页和分类页"><a href="#3-增加标签页和分类页" class="headerlink" title="3.增加标签页和分类页"></a>3.增加标签页和分类页</h2><h2 id="4-主题样式的改变"><a href="#4-主题样式的改变" class="headerlink" title="4.主题样式的改变"></a>4.主题样式的改变</h2><h2 id="5-更改头像和logo"><a href="#5-更改头像和logo" class="headerlink" title="5.更改头像和logo"></a>5.更改头像和logo</h2><h2 id="6-更改标题和作者"><a href="#6-更改标题和作者" class="headerlink" title="6.更改标题和作者"></a>6.更改标题和作者</h2><h2 id="7-建立一篇文章"><a href="#7-建立一篇文章" class="headerlink" title="7.建立一篇文章"></a>7.建立一篇文章</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">hexo new post "XXXXX"</span><br></pre></td></tr></table></figure>



<h2 id="8-建立友情链接"><a href="#8-建立友情链接" class="headerlink" title="8.建立友情链接"></a>8.建立友情链接</h2><h2 id="9-启动侧边栏链接"><a href="#9-启动侧边栏链接" class="headerlink" title="9.启动侧边栏链接"></a>9.启动侧边栏链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;linhuide || github</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>git的使用</title>
    <url>/post/2e742d51.html</url>
    <content><![CDATA[<p>​    这是Git的基本使用方法</p>
<a id="more"></a>

<h2 id="1-基本信息设置"><a href="#1-基本信息设置" class="headerlink" title="1.基本信息设置"></a>1.基本信息设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#39;XXXXX&#39;</span><br><span class="line">用户名字设置</span><br><span class="line">git config --global user.email &#39;XXXXX@qq.com&#39;</span><br><span class="line">用户邮箱设置</span><br></pre></td></tr></table></figure>

<h2 id="2-创建文件夹"><a href="#2-创建文件夹" class="headerlink" title="2.创建文件夹"></a>2.创建文件夹</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir XXXX</span><br></pre></td></tr></table></figure>

<h2 id="3-文件内初始化git"><a href="#3-文件内初始化git" class="headerlink" title="3.文件内初始化git"></a>3.文件内初始化git</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd XXX</span><br><span class="line">进入文件夹路径</span><br><span class="line">git init</span><br><span class="line">初始化git</span><br></pre></td></tr></table></figure>

<h2 id="4-增加文件"><a href="#4-增加文件" class="headerlink" title="4.增加文件"></a>4.增加文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">查看状态</span><br><span class="line">git add XXX</span><br><span class="line">git status</span><br><span class="line">增加，查看状态</span><br><span class="line">git commit -m &#39;XXXXXXXXX&#39;</span><br><span class="line">git status</span><br><span class="line">提交，查看状态</span><br></pre></td></tr></table></figure>

<h2 id="5-修改文件"><a href="#5-修改文件" class="headerlink" title="5.修改文件"></a>5.修改文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">查看状态</span><br><span class="line">git add XXX</span><br><span class="line">git status</span><br><span class="line">增加，查看状态</span><br><span class="line">git commit -m &#39;XXXXXXXXX&#39;</span><br><span class="line">git status</span><br><span class="line">提交，查看状态</span><br></pre></td></tr></table></figure>

<h2 id="6-删除文件"><a href="#6-删除文件" class="headerlink" title="6.删除文件"></a>6.删除文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -f XXX（删除文件）</span><br><span class="line">删除文件</span><br><span class="line">git rm XXX</span><br><span class="line">git删除文件</span><br><span class="line">git commit -m &#39;XXXXX&#39;</span><br><span class="line">提交删除文件描述</span><br></pre></td></tr></table></figure>

<h2 id="7-远程访问仓库"><a href="#7-远程访问仓库" class="headerlink" title="7.远程访问仓库"></a>7.远程访问仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先克隆github上面的仓库</span><br><span class="line">git clone XXXX</span><br><span class="line">克隆</span><br><span class="line">git add XXX</span><br><span class="line">增加</span><br><span class="line">git commit -m &#39;XXXXXXXXX&#39;</span><br><span class="line">提交描述</span><br><span class="line">git push</span><br><span class="line">提交到github上面</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>版本管理</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>建立个人博客</title>
    <url>/post/bae8e301.html</url>
    <content><![CDATA[<p>​    创建自己的个人博客，记录步骤，希望可以帮上忙</p>
<a id="more"></a>

<h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h2><p>​    去官网下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
<p><img src="../images/%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.jpg" alt="1"></p>
<ul>
<li>选择好要安装的地方，安装软件。</li>
<li>一直next，其中：修改存放地址，（我自己）版本选第三个，后面的不选择</li>
<li>安装完后进行测试</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在桌面打开cmd，对node和npm进行测试</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">两个都有版本号，就安装成功</span><br></pre></td></tr></table></figure>

<h2 id="2-配置node"><a href="#2-配置node" class="headerlink" title="2.配置node"></a>2.配置node</h2><h3 id="1-提高空间"><a href="#1-提高空间" class="headerlink" title="1.提高空间"></a>1.提高空间</h3><p>修改npm的缓存目录和全局目录路径，将对应的模块目录改到D盘nodejs的安装目录。</p>
<p>在D盘的node的目录下创建两个目录</p>
<p><img src="../images/%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.jpg" alt="2"></p>
<p>因为当npm安装的模块越来越多，那么这个文件夹的体积会越来越大，直到占满你的C盘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd，代码</span><br><span class="line">npm config set prefix “D:\nodejs\node_global”   &#x2F;&#x2F;配置全局模块存放路径</span><br><span class="line">npm config set cache “D:\nodejs\node_cache”   &#x2F;&#x2F;cache路径</span><br><span class="line">测试成功</span><br><span class="line">npm config get prefix</span><br><span class="line">npm config get cache</span><br></pre></td></tr></table></figure>

<h3 id="2-在电脑配置环境变量"><a href="#2-在电脑配置环境变量" class="headerlink" title="2.在电脑配置环境变量"></a>2.在电脑配置环境变量</h3><p><img src="../images/%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.jpg" alt="3"></p>
<p><img src="../images/%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.jpg" alt="4"></p>
<p>​    测试配置是否成功：打开cmd，输入node，回车，再输入require(‘cluster’)，如果能正常输出cluster模块的信息，说明上面的所有配置就算生效了</p>
<h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><p>​    先在cmd，阿里的国内镜像进行加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>在自己目录下，D:\Blog\Hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开git bush here</span><br><span class="line">开始安装</span><br><span class="line">npm i hexo-cli -g   </span><br><span class="line">安装hexo</span><br><span class="line"></span><br><span class="line">hexo -v   </span><br><span class="line">验证版本号</span><br><span class="line"></span><br><span class="line">hexo init	</span><br><span class="line">初始化文件</span><br><span class="line"></span><br><span class="line">npm install   </span><br><span class="line">安装必备的组件</span><br><span class="line"></span><br><span class="line">hexo g	</span><br><span class="line">生成静态网页</span><br><span class="line"></span><br><span class="line">hexo s	</span><br><span class="line">打开本地服务器</span><br><span class="line"></span><br><span class="line">浏览器打开	</span><br><span class="line">http:&#x2F;&#x2F;localhost:4000</span><br><span class="line"></span><br><span class="line">Ctrl+C，关闭服务器</span><br></pre></td></tr></table></figure>

<h2 id="4-配置github"><a href="#4-配置github" class="headerlink" title="4.配置github"></a>4.配置github</h2><p>在目录下，D:\Blog\Hexo</p>
<p>打开git bush here</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"XXXXX"</span></span><br><span class="line">git config --global user.email <span class="string">"XXXX@qq.com"</span></span><br><span class="line">配置名字和邮箱</span><br><span class="line"></span><br><span class="line">然后生成密钥SSH key：</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"XXXXX@qq.com"</span></span><br><span class="line"></span><br><span class="line">获取秘钥</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line">复制</span><br><span class="line"></span><br><span class="line">打开github，点击settings，点击SSH and GPG keys,新建一个ssh，名字随便，秘钥复制到下面框中。</span><br><span class="line"></span><br><span class="line">打开git bush here</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">结果出现你的用户名，那就成功了。</span><br></pre></td></tr></table></figure>



<p>打开D:\Blog\Hexo下的_config.yml</p>
<p>修改最后一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/XXXXX/XXXXX.github.io。git（建议直接复制URL过来）</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h2 id="5-上传博客"><a href="#5-上传博客" class="headerlink" title="5.上传博客"></a>5.上传博客</h2><p>打开git bush here</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br><span class="line">上传到github</span><br><span class="line">出现Deploy done：git，表示成功，可以登录</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;XXXXXXX.github.io&#x2F;</span><br><span class="line">没有登录成功，消除缓存，等待响应</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/post/ff05b5bf.html</url>
    <content><![CDATA[<p>创建第一篇博客，希望再接再厉</p>
]]></content>
  </entry>
</search>
